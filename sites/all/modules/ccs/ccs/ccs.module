<?php

function ccs_compress_numbers($numbers) {

  sort($numbers);
  
  $result = array();
  foreach (array(1000, 100, 10) as $type) {
    $length = (strlen((string)$type)-1);
  
    // Find numbers ending with one or more zero's.
    foreach (preg_grep('/^[0-9]{'.(strlen($numbers[0])-$length).'}0+$/', $numbers) as $match) {
  
      // Find all numbers for the found starting number.
      $found = preg_grep('/^'. substr($match, 0, $length*-1) .'/', $numbers);
  
      // Count the found numbers.
      if (count($found) == $type) {
  
  
        // Add the found starting number to the range.
        $result[$type][] = $match;
  
        // Remove all found numbers (in the found block) from the 'all' number array.
        $numbers = array_diff($numbers, $found);
      }
    }
  }
  
  // Copy the leftovers (singlenumbers) to the result array.
  $result[1] = $numbers;
  return $result;
}

/**
 * Implements hook_form_FORM_ID_alter(). for user_login
 */
function ccs_form_user_pass_alter(&$form, &$form_state) {
  drupal_set_title('');
  $form['name']['#title'] = t('Username');
  $form['description'] = array(
    '#type' => 'item',
    '#markup' =>
    t('Please enter your username or e-mail address. A one-time login link</br>will be send to your e-mail address.'),
  );

  $form['actions']['submit']['#prefix'] = '<span class="submit-button">';
  $form['actions']['submit']['#suffix'] = '</span>';
  $form['#validate'] = array('ccs_user_pass_validate');
  $form['#submit'] = array('ccs_user_pass_submit');
}


function ccs_form_user_pass_reset_alter(&$form, &$form_state, $form_id) {
  if (isset($form['message']['#markup']) && isset($form_state['build_info']['args'][0])) {
    if ($account = user_load($form_state['build_info']['args'][0])) {

      ccs_username_alter($account->name, $account);
      
      if (!empty($account->name)) {
        $form['message']['#markup'] = str_replace('<em class="placeholder">'.$form_state['build_info']['args'][0] .'</em>', $account->name , $form['message']['#markup']);
      }
    }
  }
  // Alter the submit button.
  $form['actions']['submit']['#prefix'] = '<span class="submit-button">';
  $form['actions']['submit']['#suffix'] = '</span>';

}


/**
 * Implementation of hook_permission().
 */
function ccs_permission() {
  return array(
    'view webserver hostname egg' => array(
        'title' => t('View webserver current hostname by triggering easter-egg.'),
    ),
    'ccs icm number overview' => array(
      'title' => t('ccs icm number overview'),
    )
  );
}

function ccs_logger_connect() {
  $conn = mssql_connect(variable_get('ccs_mssql_db_host_algra', ''), variable_get('ccs_mssql_db_user_algra', ''), variable_get('ccs_mssql_db_pass_algra', '')) or die("Error connection to server:$server".mssql_get_last_message());
  if ($conn) {
    if (mssql_select_db(variable_get('ccs_mssql_db_name_dblookup', ''), $conn) or die(mssql_get_last_message())) {
      return $conn;
    }
  }
  else {
    $conn = mssql_connect(variable_get('ccs_mssql_db_host_algrb', ''), variable_get('ccs_mssql_db_user_algrb', ''), variable_get('ccs_mssql_db_pass_algrb', '')) or die("Error connection to server:$server".mssql_get_last_message());
    if ($conn) {
      if (mssql_select_db(variable_get('ccs_mssql_db_name_dblookup', ''), $conn) or die(mssql_get_last_message())) {
        return $conn;
      }
    }
  }

  return FALSE;
}

function ccs_get_current_hostname() {
  echo json_encode(array('hostname' => $_SERVER['SERVER_ADDR']));
  die();
}

/*
 * Helper function to check if the user is routed from a techlan connected client.
*/
function ccs_verify_techlan() {
  if (!preg_match('/^10\.254\./', $_SERVER['REMOTE_ADDR'])) {
    drupal_not_found();
    die();
  }
}

function ccs_user_pass_validate($form, &$form_state) {
  
  $form_state['values']['name'] = trim($form_state['values']['name']);

  // If the user has passed an e-mail address.
  // If a e-mail address is passed as username, try to retrieve the user based on the passed e-mail address.
  if (valid_email_address($form_state['values']['name'])) {

    if ($ldap_username = ccs_ldap_get_user_on_mail_address($form_state['values']['name'])) {

      // We found 1 entry with the passed e-mail address.
      // Override the username variable with the assigned username.
      $form_state['values']['name'] = $ldap_username;
    }
    else {
      form_set_error('name', t('Sorry, %name is not recognized as a user name.', array('%name' => $form_state['values']['name'])));
      return;
    }
  }

  
  if (!$ldap_user = ccs_ldap_user_loopup($form_state['values']['name'])) {
    form_set_error('name', t('Sorry, %name is not recognized as a user name.', array('%name' => $form_state['values']['name'])));
    return;
  }

  if (empty($ldap_user['mail'])) {
    form_set_error('name', t("Sorry, we don't have a valid e-mail address attached to the user account. Please contact the support desk.", array('%name' => $form_state['values']['name'])));
  }
  else {
    
    // Load the user account.
    $users = user_load_multiple(array(), array('name' => $form_state['values']['name'], 'status' => '1'));
    if (!$account = reset($users)) {
      // Drupal account doesn't exists, ldap account does exist.
      // Create a new drupal account
      
      $account_values = array(
        'name' => $form_state['values']['name'], // Account name.
        'pass' => uniqid(), // Temporary password.
        'mail' => $ldap_user['mail'],
        'status' => 1,
        'init' => $ldap_user['mail'],
      );
      $account = new stdClass();
      $account = user_save($account, $account_values);
    }

    if (isset($account->uid)) {

      // Set the ldap mail adres.
      $account->mail = $ldap_user['mail'];

      // Set the account to be available at the submit handler.
      form_set_value(array('#parents' => array('account')), $account, $form_state);
    }
  }
}

function ccs_customer_definition_id_validate($element, &$form_state, $form) {
  if ($element['#required']!=TRUE && empty($element['#value'])) {
    return;
  }
  if (preg_match('/.+\[([0-9]{1,6})\]/', $element['#value'], $matches)) {
    // In case there is a tree, we need to prefix it with the correct parent key.
    if ($element['#tree'] && !empty($element['#parents'][0]) && !empty($element['#parents'][1])) {
   			$form_state['values'][$element['#parents'][0]][$element['#parents'][1]] = $matches[1];
    }
    else {
   			$form_state['values'][$element['#name']] = $matches[1];
    }
  }
  else {
   	form_error($element, t('Invalid customer definition id.'));
  }
}



/**
 * Generate a random alphanumeric password.
 */
function ccs_user_password($length = 10) {
  // This variable contains the list of allowable characters for the
  // password. Note that the number 0 and the letter 'O' have been
  // removed to avoid confusion between the two. The same is true
  // of 'I', 1, and 'l'.
  $allowable_characters = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ23456789';

  // Zero-based count of characters in the allowable list:
  $len = strlen($allowable_characters) - 1;

  // Declare the password as a blank string.
  $pass = '';

  // Loop the number of times specified by $length.
  for ($i = 0; $i < $length; $i++) {

    // Each iteration, pick a random character from the
    // allowable string and append it to the password:
    $pass .= $allowable_characters[mt_rand(0, $len)];
  }

  return $pass;
}

function ccs_user_pass_submit($form, &$form_state, $mail = NULL) {

  $account = $form_state['values']['account'];
  global $language;

  if (!is_null($mail)) {
    $account->mail = $mail;
  }

  if (strpos($account->mail, '@a.local')===FALSE) {

    // Mail one time login URL and instructions using current language.
    //$mail = _user_mail_notify('password_reset', $account, $language);
    //Bug #9722 - Make password recovery email text configurable in affiliate settings
    global $ActiveReseller;
    $from = NULL;
    $resellers = hpbx_get_resellers();
    $reseller_id = !empty($account->data['sipwise']['reseller_id']) ? $account->data['sipwise']['reseller_id'] : $ActiveReseller->id;
    $Reseller = $resellers[$reseller_id];
    $Subscriber = hpbx_users_get_user($account->name);// get user details from ldap
    
    
    $params = array();
    $params['firstname'] = $Subscriber['givenname'][0];
    $params['lastname'] = $Subscriber['sn'][0];
    $params['reseller_id'] = $reseller_id;
    $params['lgi_brand_name'] = $Reseller->name;
    $params['account'] = $account;

    $from = (isset($Reseller->_settings->mail_from_address)) ? $Reseller->_settings->mail_from_address : NULL;    

    $mail = drupal_mail("hpbx", "reset_password", $account->mail, $language, $params, $from);//9722
    //Bug #9722 - Make password recovery email text configurable in affiliate settings
    if (!empty($mail)) {
      watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
      drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
    }
    else {
      watchdog('user', t('Could not reset password'));
    }
    $form_state['redirect'] = 'user';
  }
  else {
    drupal_set_message(t("Sorry, we don't have a valid e-mail address attached to the user account. Please contact the support desk."));
  }
  return;
}

function ccs_mail($key, &$message, &$params){
  
  global $language;
  if ($key == 'password_reset') {
    $langcode = isset($language) ? $language->language : NULL;
    $message['subject'] = t('Replacement login information for @name at www.ccswebtool.com', array('@name' => $params['name']), array('langcode' => $langcode));
    $message['body'][] =  t("@name,

        A request to reset the password for your account has been made at www.ccswebtool.com.

        Username: @name
        Password: @password

        --  www.ccswebtool.com team", array('@name' => $params['name'], '@password' => $params['password']), array('langcode' => $langcode));
  }
}

function ccs_copy($from, $to, $force = FALSE) {
  return copy($from, $to);
  /*$cmd = sprintf("sudo cp %s '%s' '%s'", (($force) ? '-f' : '' ), $from, $to);
  //drupal_set_message($cmd);
  $output = shell_exec($cmd);
  return (strpos($output,'cp:') === FALSE);*/
}

function ccs_check_phone_number($PhoneNumber) {
  $RetVal = false;
  $regex = '/^[0]{1}[1-8]{1}[0-9]{1}[0-9]{7}/';

  //test len
  if(strlen($PhoneNumber) < 11) {
    //Check for spaces and other chars
    if (preg_match($regex,$PhoneNumber,$regs)) {
      $RetVal = true;
    }
  }
  return $RetVal;
}

function ccs_test_page() {
  
  
  drupal_mail('hpbx', 'user_pass', 'roeland.graat@gmail.com');
  
}

/**
 * Implementation of hook_menu().
 */
function ccs_menu() {
  $items = array();

  $items['tools'] = array(
      'title' => t('Tools'),
      'access arguments' => array('access content'),
      'page callback' => 'ccs_tools_page',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/ccs/settings'] = array(
      'title' => t('Database'),
      'weight' => -2,
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['chlang'] = array(
      'title' => t('Change Language'),
      'type' => MENU_CALLBACK,
      'page callback' => 'ccs_change_language',
      'access arguments' => array('access content'),
  );
  $items['hostname'] = array(
      'title' => t('Get current hostname'),
      'type' => MENU_CALLBACK,
      'page callback' => 'ccs_get_current_hostname',
      'access arguments' => array('view webserver hostname egg'),

  );
  return $items;
}


/**
 * Implementation of hook_preprocess_htmlmail().
 *
 * @param array $variables
 */
function ccs_preprocess_htmlmail(&$variables) {
  
  global $base_url;
  
  // Correcting the theme_path url. For the theme you would never want the preffix of the language included in the generation of the url.
  $variables['theme_url'] = url($variables['theme_path'], array('language' => (object)array('language' => FALSE), 'absolute' => TRUE));
  

  // To be able to get the htmlmail template from the theme,
  // we need to override the theme_hook_suggestions.
  // Otherwise it always takes the template from the htmlmail module.
  $variables['theme_hook_suggestions'] = array();
  
  global $theme;
      
  switch ($theme) {
    case 'hpbx_theme_virgin':
      $variables['theme_hook_suggestions'][] = 'htmlmail_virgin';
      break;
    case 'hpbx_theme_vtr':
      $variables['theme_hook_suggestions'][] = 'htmlmail_vtr';
      break;
    case 'hpbx_theme_ziggo':
    case 'ziggo':
      $variables['theme_hook_suggestions'][] = 'htmlmail_ziggo';
      break;
    case 'hpbx_theme_upc_cee':
      $variables['theme_hook_suggestions'][] = 'htmlmail_upc_cee';
      break;
    case 'hpbx_theme_upc_cee_poland':
      $variables['theme_hook_suggestions'][] = 'htmlmail_upc_cee_poland';
      break;
    default:
      $variables['theme_hook_suggestions'][] = 'htmlmail_upc';
      break;
  }
  
  watchdog('ccs_mail', 'Theme: '. $theme. '-> theme '. $variables['theme_hook_suggestions'][0] . ' selected');
  
  // Default logo.
  $variables['product_logo'] = '';
  $result = module_invoke_all('ccs_mail_product_logo', $variables);
  if (!empty($result['product_logo'])) {
    $variables['product_logo'] = $result['product_logo'];
  }
  
  // Footer.
  $variables['footer'] = '';  
  $result = module_invoke_all('ccs_mail_footer', $variables);
  if (!empty($result['footer'])) {
    $variables['footer'] = $result['footer'];
  }
}
  
/**
 * Implementation of hook_mail_alter().
 *
 * @param array $message
 */
function ccs_mail_alter(&$message) {

  static $footer_set = NULL;
  global $language;

  // Set the language of the reset mail to the language set for the user.
  $message['body'] = preg_replace('/\/[a-z]{1,3}(\/user\/reset)/',  '/'. $language->language . "$1", $message['body']);
  
  // In order to set a dynamic footer we need to set the complete HTML as the body
  // of this message, including subject and footer. This is unfortunatly needed because
  // the 'echo' module will render the template as anonymous user, resulting in not
  // beeing able to use the $user variable.
  $footer_set++;
  if ($footer_set === 1) {
    
    if (is_array($message['body'])) {
      $message['body'] = implode('', $message['body']);
    }
  }
}
  
  
function ccs_change_language() {
  global $language, $base_url, $user;

  $new_lang = '';
  if (!empty($user->language)) {
    // Redirect to language from user settings.
    $new_lang = '/'. $user->language;
  }
  else {
    // Redirect to language based on username (unl, uie, uat).
    if (preg_match('/^u(ie|at|nl)/', $user->name, $matches)) {

      switch($matches[1]) {
        case 'nl':
          $new_lang = '/nl';
          break;
        case 'at':
          $new_lang = '/de';
          break;
        case 'ie':

          // Fetch all languages that are configured.
          $languages = language_list();
          
          if (isset($languages['en'])) {
            
            // Choose english.
            $new_lang = '/en';
          }
          else {
            // English not availble, choose the dummy (DM) language, which is always available.
            $new_lang = '/dm';
          }

          break;
      }
    }
  }
  
  if (!strpos($base_url, 'reachability') && !strpos($base_url, 'hpbx')) {
    drupal_goto($base_url . $new_lang , array('absolute' => FALSE));
  }
  else {
    drupal_goto($base_url . $new_lang, array('absolute' => FALSE));
  }
}

function ccs_my_account_access() {
  global $user;
  if ($user->uid > 1 && strpos($user->mail, '@a.local')!==FALSE) {
    return TRUE;
  }
  return FALSE;
}



function ccs_user_page() {
  global $user;
  drupal_goto('user/'. $user->uid. '/edit');
}

function ccs_empty_page() {
  return '';
}

function ccs_tools_page() {
  return t('Within the tools section, some essentials tools can be found to manupulate various settings involving your (service)numbers.');
}



function ccs_init() {
  global $user, $conf;

  drupal_add_js(drupal_get_path('module', 'ccs') . '/js/ccs.js');

  // Set a message on the frontpage, notifying the customer to enter his e-mail address at the settings page.
  if (drupal_is_front_page() && ($_GET['q']!= 'user/'.$user->uid.'/edit') && $user->uid > 1 && strpos($user->mail, '@a.local')!==FALSE) {
    drupal_set_message(t("Currently, we don't have your e-mail
        address. Please enter a valid e-mail address at the !link page.",
        array('!link' => l(t('account settings'), 'user/'.$user->uid.'/edit'))), 'error');
  }
  if (file_exists(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc')) {
    require_once(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc');
  }
  if (file_exists(drupal_get_path('module', 'ccs') . '/language.inc.php')) {
    require_once(drupal_get_path('module', 'ccs') . '/language.inc.php');
    global $Text;
    $Text = LoadEnglish();
  }
}


/*
 * Because Drupal needs a unique e-mail address, and the current AD configuration
* doesn't have e-mail addresses configured for all users, we need to update the
* e-mail address first before LDAP module(s) can do there job.
*
* We will update the AD with <username>@<username>. User can edit this later on the edit screen..
*
* This function will ensure the actions taken within _ldap_authentication_login_form_alter() will be overridden.
*
* !!Ensure the ccs module has a higher weight then the ldap module in the system database table.
*/

/**
 * Implements hook_form_FORM_ID_alter(). for user_login
 */
function ccs_form_user_login_alter(&$form, &$form_state) {

  // Remove the 'Home' title.
  drupal_set_title('');

  // Remove the description fields.
  $form['name']['#description'] = '';
  $form['pass']['#description'] = '';

  $form['description'] = array(
      '#type' => 'item',
      '#markup' => l(t('Request new password'), 'user/password'),
  );
  // Check for a valid ldap config.
  if (!$auth_conf = ldap_authentication_get_valid_conf()) {
    return;
  }
  elseif (!$auth_conf->enabled_servers()) {
    return;
  }
  
 
   
  
  /**
   *
   * add validate function to test for ldap authentication
   * should be placed after user_login_authenticate_validate
   * 1. user_login_name_validate
   * 2. user_login_authenticate_validate
   * 3. external authentication validate functions
   * 4. user_login_final_validate
   *
   * as articulated above user_login_default_validators() in user.module
   *
   * without any other external authentication modules, this array will start out as:
   *    array('user_login_name_validate', 'user_login_authenticate_validate', 'user_login_final_validate')
   */
  if (@in_array('ldap_authentication_core_override_user_login_authenticate_validate', $form['#validate'])) {
    $new_validation_sequence = array();
    foreach ($form['#validate'] as $validate_function_name) {
      if ($validate_function_name == 'ldap_authentication_core_override_user_login_authenticate_validate') {

        if ($auth_conf->authenticationMode == LDAP_AUTHENTICATION_EXCLUSIVE) {

          // see drupal.org/node/1009990 and drupal.org/node/1022362 change back when fixed.
          $new_validation_sequence[] = 'user_login_authenticate_validate';

          // Add the CCS user_login_authenticate_validate() validate handler.
          // Will update the e-mail address if changed.
          $new_validation_sequence[] = 'ccs_user_login_authenticate_validate';

          // Ldap validation.
          $new_validation_sequence[] = 'ldap_authentication_user_login_authenticate_validate';
        }
        else {

          // misconfigured ldap authentication, restore to original validation sequence
          $new_validation_sequence[] = 'user_login_authenticate_validate';
        }
      }
      else {
        $new_validation_sequence[] = $validate_function_name;
      }
    }
    $form['#validate'] = $new_validation_sequence;
    if(variable_get('hpbx_force_password_reset')){     
      array_unshift($form['#validate'], 'ccs_ldap_get_user_password_attribute_validate');
    }	
    $form['#submit'][] = 'ccs_user_login_authenticate_submit';
  }
  
  // If an disable argument is passed we will disable all form login
  // input fields.
  if(isset($_GET['disable']) && $_GET['disable'] == 1) {
    $data = <<<EOF
(function ($) {
  $(document).ready(function () {
    $('#user-login #edit-name').attr('disabled', 'disabled');
    $('#user-login #edit-pass').attr('disabled', 'disabled');
    $('#edit-actions #edit-submit').attr('disabled', 'disabled');
  });
})(jQuery);
EOF;
    drupal_add_js($data, 'inline');
  }
  
  ldap_servers_disable_http_check($form);
}

function ccs_user_login_authenticate_submit($form, &$form_state) {
  $form_state['redirect'] = 'chlang';
  unset($_GET['destination']);
}




function ccs_ldap_get_user_password_attribute_validate($form, &$form_state){
		
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    $mail_attr = $ldap_server->mail_attr;
    foreach ($ldap_server->basedn as $basedn) {
      if (empty($basedn)) {
        continue;
      }
      $filter = $mail_attr .'='. $form_state['values']['name'];
      $sr = ccs_ldap_server_search_wrapper($ldap_server, $filter, $basedn);      
	}
	if(isset($sr['count']) && ($sr['count'] == 1)){
	  if(!isset($sr[0]['userpassword'])){
	    if($account = user_load_by_mail($form_state['values']['name'])){
		  global $ActiveReseller, $language;
          $from = NULL;
          $resellers = hpbx_get_resellers();
          $reseller_id = !empty($account->data['sipwise']['reseller_id']) ? $account->data['sipwise']['reseller_id'] : $ActiveReseller->id;
          $Reseller = $resellers[$reseller_id];
          $Subscriber = hpbx_users_get_user($account->name);   
    
          $params = array();
          $params['firstname'] = $Subscriber['givenname'][0];
          $params['lastname'] = $Subscriber['sn'][0];
          $params['reseller_id'] = $reseller_id;
          $params['lgi_brand_name'] = $Reseller->name;
          $params['account'] = $account;

          $from = (isset($Reseller->_settings->mail_from_address)) ? $Reseller->_settings->mail_from_address : NULL;    

          $mail = drupal_mail("hpbx", "reset_password", $form_state['values']['name'], $language, $params, $from);
    
          if (!empty($mail)) { 
              form_set_error('', t('Your password has been reset by the system administrator. Please check your e-mail for details on how to reset your password. If further information is required, please contact your administrator.'));
              unset($_GET['destination']);
              drupal_goto('user/login');                                                                            
          }
          else {
            watchdog('user', t('Could not reset password'));
          }                   
		}		
	  }
	}
  }	
}

/**
 *
 * @param array $form
 * @param array $form_state
 */
function ccs_user_login_authenticate_validate($form, &$form_state) {

 	// Little hack so we can return the connection, needed to change email address for the user.
  require_once(drupal_get_path('module', 'ccs') . '/LdapCCS.class.php');

  // If an e-mail address is passed as username, try to retrieve the user based on the passed e-mail address.
  if (valid_email_address($form_state['values']['name'])) {

    if ($ldap_username = ccs_ldap_get_user_on_mail_address($form_state['values']['name'])) {

      // We found 1 entry with the passed e-mail address.
      // Override the username variable with the assigned username.
      $form_state['values']['name'] = $ldap_username;
    }
    else return;
  }

  // Check whether access to the portal is allowed for the roles of the user 
  $user = null;
  if ($form_state['uid']) {
      $user = user_load($form_state['uid']);
  } else {
      $user = user_load_by_name($form_state['values']['name']);
  }

  if ($user && ccs_role_restricted($user)) {
      $form_state['values']['name'] = null;
      $form_state['uid'] = null;
  }  

  // Retrieve the ldap user.
  if ($ldap_user = ccs_ldap_user_loopup($form_state['values']['name'])) {

    // Check if the e-mail adress of the logged in user is still empty.
    if (empty($ldap_user['mail'])) {

      // Set the default (name@a.local) e-mail address, which the user needs to change.
      ccs_ldap_set_default_email_address($form_state['values']['name']);

      // We have to sleep, to let AD replicate all data.
      sleep(20);
    }
  }
}


/**
 * Implementation of hook_username_alter().
 * 
 * @param string $name
 * @param object $account
 */
function ccs_username_alter(&$name, $account) {
  
  // Retrieve the ldap user.
  if ($ldap_user = ccs_ldap_user_loopup($name)) {
    
    // Verify first and lastname are set.
    if (isset($ldap_user['attr']['name'][0])) {
      
      // Set the name - by reference.
      $name = $ldap_user['attr']['name'][0];
    }
  }
}

/**
 * Implementation of hook_form_user_profile_form_alter().
 * 
 * @param array $form
 * @param array $form_state
 */
function ccs_form_user_profile_form_alter(&$form, $form_state) {
  global $user;

  if ($user->uid > 1) {
    drupal_set_title(format_username($user));

    // Re-enable the mail files, so we can push the address to the LDAP server.
    $form['account']['mail']['#disabled'] = FALSE;
    $form['account']['mail']['#description'] = '';
     
    // If the default password is a @a.local password, display an empty field.
    if (strpos($form['account']['mail']['#default_value'], '@a.local')!==FALSE) {
      $form['account']['mail']['#default_value'] = '';
    }

    $form['#validate'][] = 'ccs_form_user_profile_form_validate';
    $form['#submit'][] = 'ccs_form_user_profile_form_submit';

    // Re-enable the current password field again (was disabled by the ldap module(s)).
    $form['account']['current_pass']['#disabled'] = FALSE;
    $form['account']['current_pass']['#description'] = t('Enter your current password to change the E-mail address or Password.');
    // Re-enable the password field again (was disabled by the ldap module(s)).
    $form['account']['pass']['#disabled'] = FALSE;

    // Replace the validate handler which checks for a valid password, cause we are using LDAP this isn't needed.
    foreach($form['#validate'] as $key => $handler) {
      if ($handler == 'user_validate_current_pass') {
        $form['#validate'][$key] = 'ccs_ldap_user_validate_current_pass';
      }
    }
    
    // Hide the overlay control.
    $form['overlay_control']['#access'] = FALSE;
    
    if (isset($form['locale']['language']['#options']['dm'])) {
      
      // Unset the dummy english language.
      unset($form['locale']['language']['#options']['dm']);
    }
    
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#prefix'] = '<span class="submit-button">';
      $form['actions']['submit']['#suffix'] = '</span>';
    }
    
    if (isset($form['actions']['cancel'])) {
      $form['actions']['cancel']['#prefix'] = '<span class="submit-button">';
      $form['actions']['cancel']['#suffix'] = '</span>';
    }
  }
}

function ccs_ldap_user_validate_current_pass($form, $form_state) {
  $account = $form['#user'];
  foreach ($form_state['values']['current_pass_required_values'] as $key => $name) {
    // This validation only works for required textfields (like mail) or
    // form values like password_confirm that have their own validation
    // that prevent them from being empty if they are changed.
    if ((strlen(trim($form_state['values'][$key])) > 0) && ($form_state['values'][$key] != $account->$key)) {

      $correct_password = FALSE;
      $ldap_server = ccs_ldap_get_valid_server();

      foreach ($ldap_server->basedn as $basedn) {
        	
        if ($ldap_user = $ldap_server->user_lookup($account->name)) {
          $result = $ldap_server->bind($ldap_user['dn'], $form_state['values']['current_pass']);
          if ($result == LDAP_SUCCESS) {
            $correct_password = TRUE;
            break;
          }
        }
      }
      if (empty($form_state['values']['current_pass']) || !$correct_password) {
        form_set_error('current_pass', t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => $name)));
        form_set_error($key);
      }
      break;
    }
  }
}

function ccs_form_user_profile_form_validate(&$form, &$form_state) {
  if (strpos($form_state['values']['mail'], '@a.local') !== FALSE) {
    form_set_error('mail', t('The e-mail address @mail is not valid.', array('@mail' => $form_state['values']['mail'])));
  }
}

function ccs_form_user_profile_form_submit($form, $form_state) {
  
  global $user;
  // Check if the e-mail address has been changed.
  if ($user->mail != $form_state['values']['mail']) {
    if (!ccs_ldap_set_email_address($user->name, $form_state['values']['mail'])) {
      drupal_set_message(t('Problem while trying to update the e-mail address, please try again or contact the support desk.'), 'error');
    }
  }

  if (!empty($form_state['values']['pass'])) {
    watchdog('ccs', t('Will enable user %user', array('%user' => $user->name)));
    ccs_ldap_enable_account($user->name);
    sleep(4);
    // Set the new password on the LDAP server.
    if (!ccs_ldap_set_password($user->name, $form_state['values']['pass'])) {
      drupal_set_message(t('Problem while trying to change the password, please try again or contact the support desk.'), 'error');
    }
    else {
      ccs_ldap_unlock_account($user->name);

      // In case of ADM authenticate again.
      if (function_exists('adm_soap_authenticate')) {
        sleep(3);
        watchdog('ccs', t('Will validate user %user', array('%user' => $user->name)));
        adm_soap_authenticate($user->name, $form_state['values']['pass']);
      }
    }
  }

  $languages = language_list();
  global $language;
  $options = array();
  if (isset($languages[$form_state['values']['language']])) {
    if ($user->language != $form_state['values']['language']) {
      $language = $languages[$form_state['values']['language']];
      $options = array('language' => $language);
    }
  }
  
  if (!empty($_GET['pass-reset-token'])) {
    drupal_goto(NULL, $options);
  }
  
  drupal_goto('', $options);
}

function ccs_node_view($node, $view_mode, $langcode) {
  if ($node->nid == 28) {
    menu_set_active_menu_names(array('main-menu'));
  }
}

function ccs_node_view_alter(&$build) {
  unset($build['links']['translation']);
}

function ccs_ldap_admin_bind(&$ldap_server) {
  return $ldap_server->bind();
}

function ccs_ldap_get_valid_server($debug = 0) {
  static $ldap_server;

  if (!$auth_conf = ldap_authentication_get_valid_conf()) {
    watchdog('ldap_authentication', 'Failed to get valid ldap authentication configuration.', array(), WATCHDOG_ERROR);
    form_set_error('name', 'Server Error: Failed to get valid ldap authentication configuration.' . $error);
    return FALSE;
  }
   
  require_once(drupal_get_path('module', 'ccs') . '/LdapCCS.class.php');

  foreach ($auth_conf->enabledAuthenticationServers as $sid => $ldap_server) {

    // Use our own wrapper.
    $ldap_server = new LdapCCS($sid);

    ldap_set_option($ldap_server->connection, LDAP_OPT_DEBUG_LEVEL, $debug);
    $result = $ldap_server->connect();

    if ($result != LDAP_SUCCESS) {
      continue; // next server, please
    }

    if ($ldap_server->bind_method ==  LDAP_SERVERS_BIND_METHOD_SERVICE_ACCT) {
      $result = $ldap_server->bind();
    }
    else {
      return FALSE;
    }
     
    if ($result == LDAP_SUCCESS) {
      return $ldap_server;
    }
  }
  return $ldap_server;
}

function ccs_ldap_set_default_email_address($name) {
  return ccs_ldap_set_email_address($name);
}

function ccs_ldap_set_password($name, $new_password, &$result = NULL) { 
  global $ActiveReseller;
  if (!is_null($reseller_id)) {
    sipwise_api_activate_reseller($reseller_id);
  }else{
    $reseller_id = sipwise_api_get_active_reseller();
  }
  $stretto = new StrettoUser();
  $user['userName'] = $name;
  $user['groupName'] = $ActiveReseller->_settings->stretto_group;
  
  $stretto_subscriber = $stretto->stretto_get('user', $user);
           
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    if ($ldap_user = ccs_ldap_user_loopup($name)) {
      $salt = substr(sha1(rand()), 0, 4);
      $salted_password = '{SSHA}' . base64_encode(sha1($new_password . $salt, TRUE) . $salt);
      $attributes = array('userPassword' => $salted_password);
      $user['password'] = $new_password;
      $ldap_server->bind();
      require_once(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc');
      if (ldap_user_modify($ldap_user['dn'], $attributes, $ldap_server)) {
      	if(!empty($stretto_subscriber)){
      	  $stretto->create($user, 'user', 'PUT');	
      	}
        return TRUE;
      }            
    }              
  }                
                   
  return FALSE;    
}

function ccs_ldap_set_description($name, $description) {
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    if ($ldap_user = ccs_ldap_user_loopup($name)) {
      $ldap_server->bind();
      require_once(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc');
      if (ldap_user_modify($ldap_user['dn'], array('description' => $description), $ldap_server)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

function ccs_ldap_set_email_address($name, $mail = NULL) {
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    if ($ldap_user = ccs_ldap_user_loopup($name)) {

      if (is_null($mail)) {
        $mail = $name .'@a.local';
      }

      $attributes = array('mail' => $mail);

      $ldap_server->bind();
      require_once(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc');
      // Update empty email address to new <username>@<username> email address.
      if (ldap_user_modify($ldap_user['dn'], $attributes, $ldap_server)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
  * 512	Enabled Account
  * 514	Disabled Account
  * 544	Enabled, Password Not Required
  * 546	Disabled, Password Not Required
  * 66048	Enabled, Password Doesn't Expire
  * 66050	Disabled, Password Doesn't Expire
  * 66080	Enabled, Password Doesn't Expire & Not Required
  * 66082	Disabled, Password Doesn't Expire & Not Required
  * 262656	Enabled, Smartcard Required
  * 262658	Disabled, Smartcard Required
  * 262688	Enabled, Smartcard Required, Password Not Required
  * 262690	Disabled, Smartcard Required, Password Not Required
  * 328192	Enabled, Smartcard Required, Password Doesn't Expire
  * 328194	Disabled, Smartcard Required, Password Doesn't Expire
  * 328224	Enabled, Smartcard Required, Password Doesn't Expire & Not Required
  * 328226	Disabled, Smartcard Required, Password Doesn't Expire & Not Required
  * @param unknown $name
  * @param unknown $uac
  * @return boolean
  */
function ccs_ldap_toggle_account_status($name, $enable) {

  if ($ldap_server = ccs_ldap_get_valid_server()) {
    if ($ldap_user = ccs_ldap_user_loopup($name)) {
      
      // Get the current user account control value.
      $uac = $ldap_user['attr']['useraccountcontrol'][0];

      if ($enable) {
        // Diabled flag will de-activated.
        $uac =($uac & ~2); // Diable bit 1 (=dec2).
      }
      else {
        // Disabled flag will be active.
        $uac = ($uac |  2); // Enable plus bit 1 (=dec2)
      }

      // Set new value.
      $attributes['useraccountcontrol'][0] = $uac;

      $ldap_server->bind();
      require_once(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc');

      // Update empty email address to new <username>@<username> email address.
      if (ldap_modify($ldap_server->connection, $ldap_user['dn'], $attributes)) {

        watchdog('ccs', t('Changing status for @name to @uac was successfully',
          array(
            '@uac' => $uac,
            '@name' => $name
          ))
        );
        return TRUE;
      }
    }
  }

  watchdog('ccs', t('Change enabled/disabled status for @name failed', array('@name' => $name)));
  return FALSE;
}

/**
 * Helper function to flag the ldap user account as disabled.
 *
 * @param string $name
 * @return boolean
 */
function ccs_ldap_disable_account($name) {
  return ccs_ldap_toggle_account_status($name, FALSE);
}

/**
 * Helper function to deactive the ldap user account disabled flag.
 *
 * @param string $name
 * @return boolean
 */
function ccs_ldap_enable_account($name) {
  return ccs_ldap_toggle_account_status($name, TRUE);
}

/**
 * Helper function to unlock a temporary locked out account.
 *
 * @param string $name
 * @return boolean
 */
function ccs_ldap_unlock_account($name) {
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    if ($ldap_user = ccs_ldap_user_loopup($name)) {

      $attributes = array('lockoutTime' => 0);

      $ldap_server->bind();
      require_once(drupal_get_path('module', 'ldap_servers') . '/ldap_servers.functions.inc');
      
      // Update empty email address to new <username>@<username> email address.
      if (ldap_mod_replace($ldap_server->connection, $ldap_user['dn'], $attributes)) {
        
        watchdog('ccs', t('Unlock for @name was successfully', array('@name' => $name)));
        return TRUE;
      }
    }
  }
  
  watchdog('ccs', t('Unlock for @name failed', array('@name' => $name)));
  return FALSE;
}

function ccs_ldap_user_loopup($name) {
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    if (!$ldap_user = $ldap_server->user_lookup($name)) {
      return FALSE;
    }
    return $ldap_user;
  }
  return FALSE;
}

function ccs_ldap_server_search_wrapper($ldap_server, $filter, $basedn, $attributes=array()) {
  return  $ldap_server->search($basedn, $filter, $attributes);
}

function ccs_ldap_get_user_on_mail_address($mail) {

  $matches = array();
  if ($ldap_server = ccs_ldap_get_valid_server()) {
    $mail_attr = $ldap_server->mail_attr;
    foreach ($ldap_server->basedn as $basedn) {
      if (empty($basedn)) {
        continue;
      }
      $filter = $mail_attr .'='. $mail;

      if ($result = ccs_ldap_server_search_wrapper($ldap_server, $filter, $basedn)) {

        for ($i=0;$i<$result['count'];$i++) {

          $match = $result[$i];

          // These lines serve to fix the attribute name in case a
          // naughty server (i.e.: MS Active Directory) is messing the
          // characters' case.
          // This was contributed by Dan "Gribnif" Wilga, and described
          // here: http://drupal.org/node/87833
          if (!isset($match[$mail_attr][0])) {
            $mail_attr = drupal_strtolower($mail_attr);
          }
          elseif (isset($match[drupal_strtolower($mail_attr)][0])) {
            $mail_attr = drupal_strtolower($mail_attr);
          }
          else {
            if (isset($match[$ldap_server->user_attr][0]) && $ldap_server->bind_method == LDAP_SERVERS_BIND_METHOD_ANON_USER) {
              $matches[] = array(
                'dn' =>  $match['dn'],
                'mail' => @$match[$this->mail_attr][0],
                'attr' => $match,
                'name' => $match[$ldap_server->user_attr][0]
              );
            }
            else {
              continue;
            }
          }

          // Finally, we must filter out results with spaces added before
          // or after, which are considered OK by LDAP but are no good for us
          // We allow lettercase independence, as requested by Marc Galera
          // on http://drupal.org/node/97728
          //
          // Some setups have multiple $mail_attr per entry, as pointed out by
          // Clarence "sparr" Risher on http://drupal.org/node/102008, so we
          // loop through all possible options.
          foreach ($match[$mail_attr] as $value) {
            if (drupal_strtolower(trim($value)) == drupal_strtolower($mail) && isset($match[$ldap_server->user_attr][0])) {
              $matches[] = array(
                'dn' =>  $match['dn'],
                'mail' => @$match[$mail_attr][0],
                'attr' => $match,
                'name' => $match[$ldap_server->user_attr][0]
              );
            }
          }
        }
      }
    }
  }

  if (!count($matches)) {
    return FALSE;
  }

  // Must find exactly one user for authentication to.
  elseif (count($matches) > 1) {
    $count = count($matches);
    watchdog('ldap_authentication', "Error: !count users found with $filter.", array('!count' => $count), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!empty($matches[0]['name'])) {
    // One entry, so return it.
    return $matches[0]['name'];
  }
  return FALSE;
}

// Function to check if the user is allowed to log in with these roles,
// given the presence/absence of the private HTTP header
function ccs_role_restricted($user)
{
    global $conf;

    if (array_key_exists('role_restrictions', $conf)) {
        $non_public_roles = array_diff(
            $user->roles,
            $conf['role_restrictions']['public_roles']
        );

        $server_hash_key = 'HTTP_' . strtoupper(str_replace('-', '_', $conf['role_restrictions']['private_header']));
        if ($non_public_roles && $_SERVER[$server_hash_key] != $conf['role_restrictions']['private_header_value']) {
            return true;
        }

        return false;
    } else {
        return false;
    }
}

/*
 * Implements hook_user_login()
 */
function ccs_user_login(&$edit, &$account)
{
    if (ccs_role_restricted($account)) {
      ccs_manual_user_logout($account);
    }

// Find the reseller's sipwise connectivity.
    if ( isset($account->data['sipwise']['reseller_id']) ) {
      $reseller_id = $account->data['sipwise']['reseller_id'];
      if (ccs_sipwise_connectivity_check($reseller_id) ) {
        ccs_manual_user_logout($account);
        drupal_set_message(t('Website is not reachable due to a technical problem. Please try again later.'), 'error', FALSE);
      }
    }
}

/**
* Performing drupal user logout.
*/
function ccs_manual_user_logout($account = array())
{
  session_destroy();
  module_invoke_all('user', 'logout', NULL, $account);
  $account = drupal_anonymous_user();
  // drupal_goto('/');
}

/**
* Checking sipwise connectivity for particular reseller id
*/
function ccs_sipwise_connectivity_check($reseller_id) {

  global $conf;
  $ua = curl_init();
  $options = array(
    CURLOPT_SSLCERT => $conf['sipwise'][$reseller_id]['sipwise_api_cert'],
    CURLOPT_SSLKEY  => $conf['sipwise'][$reseller_id]['sipwise_api_cert'],
    CURLOPT_SSL_VERIFYPEER => FALSE,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_SSL_VERIFYHOST => FALSE,
    CURLOPT_IPRESOLVE => CURL_IPRESOLVE_V4,
  );

  curl_setopt_array($ua , $options);
  curl_setopt($ua, CURLOPT_URL, $conf['sipwise'][$reseller_id]['sipwise_api_endpoint']);
  $res = curl_exec($ua);

  if($res) { // checking sipwise connectivity.
    // Successfully connected.
    return FALSE;
  }
  else {
    // Failed to connect
    return TRUE;
  }
}
