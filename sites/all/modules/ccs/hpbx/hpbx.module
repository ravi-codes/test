<?php

define('HPBX_SUBSCRIBER_FEATURE_INVISIBLE', 0);
define('HPBX_SUBSCRIBER_FEATURE_ENABLED', 1);
define('HPBX_SUBSCRIBER_FEATURE_TOGGLE', 2);

define('HPBX_BUNDLE_SETTINGS_OFFSET_COUNTER_INCREASE_NO', 0);
define('HPBX_BUNDLE_SETTINGS_OFFSET_COUNTER_INCREASE_PROFILE_SET', 1);
define('HPBX_BUNDLE_SETTINGS_OFFSET_COUNTER_INCREASE_PROFILE', 2);

define('HPBX_CUSTOMER_DELETE_NOT_ALLOWED', 0);
define('HPBX_CUSTOMER_SUSPENDED_DELETE_ALLOWED', 1);
define('HPBX_CUSTOMER_SUSPENDED_DELETE_NOT_ALLOWED', 2);
//define('HPBX_CUSTOMER_SUSPENDED_OFFSET_DAYS', '-7 days');

/**
 * Implementation of hook_page_delivery_callback_alter().
 *
 * @param string $callback
 * @param boolean $set
 *
 * @return void
 */
function hpbx_page_delivery_callback_alter(&$callback, $set = FALSE) {
  if ($callback == 'drupal_deliver_html_page') {
    $callback = 'hpbx_deliver_html_page';
  }
}

/**
 * Implementation of hook_file_entity_access()
 *
 * @param string $op
 * @param stdClass $file
 * @param stdClass $account
 *
 * @return int
 */
function hpbx_file_entity_access($op, $file, $account) {
  if ($op == 'view' && !empty($file->fid)) {

    if ($file->type == 'hpbx_music_on_hold_audio_file') {
      if (user_access('hpbx edit subscriber', $account)) {
        return FILE_ENTITY_ACCESS_ALLOW;
      }
      else {
        return FILE_ENTITY_ACCESS_DENY;
      }
    }
  }
  return;
}

/**
 * Helper function constract the voicemail part of a form, which is used in
 * multiple forms.
 *
 * @param array &$elements
 * @param SipwiseEntity $VoicemailSettings
 */
function hpbx_voicemail_elements(&$elements, $VoicemailSettings = NULL) {
  $elements['pin']['value'] = array(
    '#required' => TRUE,
    '#type' => 'textfield',
    '#default_value' => !empty($VoicemailSettings->pin) ? $VoicemailSettings->pin : rand(1000, 9999),
    '#description' => t('The PIN used to enter the voicemail from external numbers.'),
    '#title' => t('PIN'),
    '#maxlength' => 4,
    '#attributes' => array('class' => array('sg-element'), 'placeholder' => t('PIN')),
  );
  $elements['email']['value'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($VoicemailSettings->email) ? $VoicemailSettings->email : '',
    '#description' => t('The email address to which notifications and the recordings (if attach is enabled) are sent.'),
    '#title' => t('Email'),
    '#attributes' => array(
      'class' => array('sg-element', 'hpbx-toggle-target-when-value'),
      'placeholder' => t('Email'),
      'data-enable-target' => 'hpbx-voicemail-attach',
      'data-enable-value' => '*',
      'data-disable-target' => '',
      'data-disable-value' => '',
    ),
  );
  $elements['attach']['value'] = array(
    '#type' => 'checkbox',
    '#default_value' => $VoicemailSettings->attach,
    '#description' => t('Attach recordings (wav file) to the notification emails.'),
    '#title' => t('Attach'),
    '#attributes' => array(
      'class' => array('sg-element', 'hpbx-voicemail-attach'),
      'data-custom-change-event' => 'edit-voicemail-attach-change'
    ),
    '#title_display' => 'before',
  );

  $elements['delete']['value'] = array(
    '#type' => 'checkbox',
    '#default_value' => $VoicemailSettings->delete,
    '#description' => t('Delete voicemails from the voicemail box after sending the recording via email. Note that if delete is enabled and the mail cannot be delivered, the voicemail is lost.'),
    '#title' => t('Delete'),
    '#attributes' => array('class' => array('sg-element', 'hpbx-voicemail-delete')),
    '#title_display' => 'before',
  );
}

/**
 * Implementation of hook_form().
 *
 * @return array
 */
function hpbx_settings_form() {

  // Init form.
  $form = array(
    '#prefix' => '<div class="hpbx-main-content-inner hpbx-c">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('hpbx-tab-form')),
  );

  $form['settings'] = array(
    '#type' => 'container',
    '#tree' => FALSE,
    '#theme_wrappers' => array('hpbx_foldable_list', 'container'),
    '#attributes' => array('class' => array('hpbx-tab-form-foldable-list')),
  );

  $form['settings']['general'] = array(
    '#type' => 'container',
    '#tree' => FALSE,
    '#title' => t('General settings'),
    '#theme_wrappers' => array('hpbx_foldable_list_item'),
    '#collapsed' => FALSE,
  );

  $form['settings']['general']['hpbx_maintenance_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Maintenance mode'),
    '#description' => t('In case hpbx is in maintenance mode, only the LGI admin can login to deactivate this mode'),
    '#default_value' => variable_get('hpbx_maintenance_mode', FALSE),
    '#title_display' => 'before',
  );

  $form['settings']['general']['hpbx_show_hg_tip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show version number'),
    '#description' => t('Show hpbx version number (top-left, dev only)'),
    '#default_value' => variable_get('hpbx_show_hg_tip', FALSE),
    '#title_display' => 'before',
  );

  $form['settings']['general']['hpbx_sipwise_delete_allowed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bypass cooldown period'),
    '#description' => t('Allow deleting of customers before the cooldown periode has passed'),
    '#default_value' => variable_get('hpbx_sipwise_delete_allowed', FALSE),
    '#title_display' => 'before',
  );
  $form['settings']['general']['hpbx_verify_masquerade_login_btn'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify masquerade login button'),
    '#description' => t('Before displaying the login button on the customer overview page, check if it actually can be used'),
    '#default_value' => variable_get('hpbx_verify_masquerade_login_btn', FALSE),
    '#title_display' => 'before',
  );

  $options3 = array('panasonic_dev'=>'Panasonic Test RDS', 'panasonic_prod'=>'Panasonic Prod RDS');
  $form['settings']['general']['panasonic_rds'] = array(
    '#type' => 'select',
    '#options' => $options3,
    '#header' =>  array(t('Panasonic RDS')),
    '#default_value' => variable_get('panasonic_rds', FALSE),
    '#title' => t('Panasonic RDS'),
    '#attributes' => array('class' => array('chzn-select', 'sg-element', 'no-search')),
  );
  $form['settings']['general']['hpbx_password_policy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Password Policy'),
    '#description' => t('Enable more complex password requirements for users'),
    '#default_value' => variable_get('hpbx_password_policy', FALSE),
    '#title_display' => 'before',
  );

  $form['settings']['general']['hpbx_force_password_reset'] = array(
    '#type' => 'checkbox',
    '#title' => t('Password Reset while login'),
    '#description' => t('Trigger the password reset mail while login'),
    '#default_value' => variable_get('hpbx_force_password_reset', FALSE),
    '#title_display' => 'before',
  );

/*
  $form['settings']['yealink'] = array(
    '#type' => 'container',
    '#tree' => FALSE,
    '#title' => t('Yealink RPS configuration'),
    '#theme_wrappers' => array('hpbx_foldable_list_item'),
    '#collapsed' => FALSE,
  );

  $form['settings']['yealink']['hpbx_rps_yealink_auth_username'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('RPS username*'),
    '#default_value' => variable_get('hpbx_rps_yealink_auth_username', ''),
  );

  $form['settings']['yealink']['hpbx_rps_yealink_auth_password'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('RPS password*'),
    '#default_value' => variable_get('hpbx_rps_yealink_auth_password', '' ),
  );

  $form['settings']['yealink']['hpbx_rps_yealink_servername'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Server name*'),
    '#default_value' => variable_get('hpbx_rps_yealink_servername', 'lg-sme-prod-prov-y'),
  );

  $form['settings']['yealink']['hpbx_rps_yealink_endpoint'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Endpoint*'),
    '#default_value' => variable_get('hpbx_rps_yealink_endpoint', 'https://rps.yealink.com/xmlrpc'),
  );

  $form['settings']['panasonic'] = array(
    '#type' => 'container',
    '#tree' => FALSE,
    '#title' => t('Panasonic RPS configuration'),
    '#theme_wrappers' => array('hpbx_foldable_list_item'),
    '#collapsed' => FALSE,
  );
  $form['settings']['panasonic']['hpbx_rps_panasonic_auth_username'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('RPS username*'),
    '#default_value' => variable_get('hpbx_rps_panasonic_auth_username', ''),
  );

  $form['settings']['panasonic']['hpbx_rps_panasonic_auth_password'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('RPS password*'),
    '#default_value' => variable_get('hpbx_rps_panasonic_auth_password', '' ),
  );

  $form['settings']['panasonic']['hpbx_rps_panasonic_servername'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Server name*'),
    '#default_value' => variable_get('hpbx_rps_panasonic_servername', 'https://prov-p.h-pbx.eu:443/sync/abcd12345/{mac}'),
  );

  $form['settings']['panasonic']['hpbx_rps_panasonic_endpoint'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Endpoint*'),
    '#default_value' => variable_get('hpbx_rps_panasonic_endpoint', 'https://provisioning.e-connecting.net/redirect/xmlrpc'),
  );
*/

  $form = system_settings_form($form);

  $form['actions']['#attributes'] = array('class' => array('hpbx-tab-form-buttons-row'));
  $form['actions']['#prefix'] = '<div class="row">';
  $form['actions']['#suffix'] = '</div>';

  $form['actions']['submit']['#prefix'] = '<span class="submit-button">';
  $form['actions']['submit']['#suffix']= '</span><br/><br/>';
  $form['actions']['submit']['#attributes'] = array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary'));

  return $form;
}

/**
 * Callback for delivery callback alter.
 *
 * @param integer $page_callback_result
 *
 * @return void
 */
function hpbx_deliver_html_page($page_callback_result) {

  if ($page_callback_result == MENU_NOT_FOUND) {

    // Print a 404 page.
    drupal_add_http_header('Status', '404 Not Found');

    watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

    // Keep old path for reference, and to allow forms to redirect to it.
    if (!isset($_GET['destination'])) {
      $_GET['destination'] = $_GET['q'];
    }

    if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
      // Standard 404 handler.
      drupal_set_title('');
      $return = '<div class="hpbx-404">
                  <div class="hpbx-404-image"></div>
                  <div class="hpbx-404-message">
                  <div class="hpbx-404-message-title">';

      if (variable_get('hpbx_maintenance_mode')) {
        $return .= t('Offline');
        $return .= ',</div>
                  <div class="hpbx-404-message-text">'. t("Due to planned work the portal is currently offline....") . '</div>
                 </div></div>';
      }
      else {
      $return .= t('Whoops');
      $return .= ',</div>
                  <div class="hpbx-404-message-text">'. t("the page you're trying to reach doesn't exist...") . '</div>
                 </div></div>';
      }
    }

    drupal_set_page_content($return);
    $page = element_info('page');
    print drupal_render_page($page);
  }
  else {
    drupal_deliver_html_page($page_callback_result);
  }
}

/**
 * Implementation of hook_block_info().
 *
 * @return array
 */
function hpbx_block_info() {
  $blocks = array();
  // This example comes from node.module.
  $blocks['hpbx_logged_in'] = array(
      'info' => t('HostedPBX logged-in user info.'),
      'cache' => DRUPAL_NO_CACHE,
      'region' => 'top_header',
  );
  $blocks['hpbx_masquerade'] = array(
      'info' => t('HostedPBX masquerade.'),
      'cache' => DRUPAL_NO_CACHE,
      'region' => 'sidebar_first',
  );
  $blocks['hpbx_customer_search'] = array(
      'info' => t('HostedPBX customer search.'),
      'cache' => DRUPAL_NO_CACHE,
      'region' => 'sidebar_first',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'hpbx/customers',
  );
  $blocks['hpbx_device_subscribers'] = array(
      'info' => t('HostedPBX subscribers'),
      'cache' => DRUPAL_NO_CACHE,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'hpbx/pbxdevice/*',
      'status' => 1,
  );
  return $blocks;
}

/**
 * Helper function to get the soundset of the subscriber.
 *
 * @param SipwiseSubscriber $Subscriber
 * @param string $soundset_name
 *
 * @return SipwiseEntity
 */
function hpbx_soundset_get_subscriber_soundset($Subscriber, $soundset_name) {

  global $ActiveReseller;

  // Verify if a soundset does exist with the passed name.
  if (!$SoundSet = hpbx_get_soundset_on_name($soundset_name, $Subscriber->customer_id)) {

    // Not found; will create a new soundset.
    $SoundSet = SipwiseEntity::create('soundsets');
    $SoundSet->name = $soundset_name;
    $SoundSet->contract_default = FALSE;
    $SoundSet->customer_id = $Subscriber->customer_id;
    $SoundSet->reseller_id = $ActiveReseller->id;
    $SoundSet->save();

    watchdog('hpbx_upload_soundfile', 'Created new soundset '. $SoundSet->id . '.'. var_export($SoundSet, TRUE));
  }
  else {
    watchdog('hpbx_upload_soundfile', 'Loaded existing soundset '. $SoundSet->id . '.'. var_export($SoundSet, TRUE));
  }
  return $SoundSet;
}


function hpbx_soundset_upload_file(&$Subscriber, $soundset_name,$ActiveReseller) {

  try {

    $SoundSet = hpbx_soundset_get_subscriber_soundset($Subscriber, $soundset_name);

    if (isset($_FILES) && is_array($_FILES)) {
      $soundfiles = array();

      // Get the current stored soundfiles.
      foreach (sipwise_api_get_all('soundfiles', array('set_id' => $SoundSet->id)) as $SoundFile) {

        foreach ($_FILES as $handle => $sf) {
          if (!empty($sf['name']) && $SoundFile->handle == $handle) {
            $soundfiles[$handle] = $SoundFile;
          }
        }
      }

      foreach ($_FILES as $handle => $sf) {

        if (!empty($sf['name'])) {

          // Verify if the soundfile is already present.
          if (!isset($soundfiles[$handle]) || is_null($soundfiles[$handle])) {
            watchdog('hpbx_upload_soundfile', 'Did not found an existing soundfile. Create new soundfile for handle '. $handle);

            // Create new soundfile.
            $soundfiles[$handle] = new SipwiseSoundFile();
            $soundfiles[$handle]->handle = $handle;
            $soundfiles[$handle]->set_id = $SoundSet->id;
          }
          else {
            watchdog('hpbx_upload_soundfile', 'Found an existing soundfile for handle '. $handle);
          }

          // Update filename.
          $soundfiles[$handle]->filename = $sf['name'];

          // Convert to wav (8000, 1 channel).
          $soundfiles[$handle]->recording = hpbx_audio_convert_to_wav($sf['tmp_name'], $sf['name']);
          if($ActiveReseller->_settings->help_mail === 'No mail support'){
              $soundfiles[$handle]->loopplay = 'true';
          }else{
          // Set loopplay value (as string).
            $soundfiles[$handle]->loopplay = 'false';
          }
          // Save the soundfile.
          $soundfiles[$handle]->save();

          watchdog('hpbx_upload_soundfile', 'Stored SoundFile ('.$soundfiles[$handle]->id.') with handle '. $handle . '.'. var_export($soundfiles[$handle], TRUE));
        }
      }
    }

    if (!empty($SoundSet->name)) {

      // Set soundset at subscriber preferences.
      watchdog('hpbx_upload_soundfile', 'Set contract_sound_set to '. $SoundSet->name);
    }
  }
  catch (Exception $e) {

    watchdog('hpbx_upload_soundfile', $e->getMessage());
    return FALSE;
  }
  return TRUE;
}

/**
 * Implementation of hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function hpbx_block_view($delta=''){
  $block = array();
  switch($delta){
    case 'hpbx_logged_in':
      $block['subject'] = '';
      $block['content'] = hpbx_logged_in_block_content();
      break;
    case 'hpbx_masquerade':

      // Load masquerade include file.
      module_load_include('inc', 'hpbx', 'includes/hpbx.masquerade');

      $block['subject'] = t('Logout');
      $block['content'] = drupal_get_form('hpbx_masquerade_form');
      break;
    case 'hpbx_customer_search':
      module_load_include('inc', 'hpbx', 'includes/hpbx.customer');
      $block['subject'] = t('Search');
      $block['content'] = drupal_get_form('hpbx_customer_search_form');
      break;
  }
  return $block;
}

/**
 * @param array $variables.
 *
 * @return array
 */
function hpbx_ccs_mail_footer($variables) {

  if (isset($variables['params']['account']) && !empty($variables['params']['account']->data['sipwise']['reseller_id']) && !isset($variables['params']['account']->data['sipwise']['bp_id']) && !isset($variables['params']['account']->data['sipwise']['customer_id'])) {

    sipwise_api_activate_reseller($variables['params']['account']->data['sipwise']['reseller_id']);

    global $ActiveReseller;

    if (!empty($ActiveReseller->_settings->mail_footer)) {
      return array('footer' => t($ActiveReseller->_settings->mail_footer));
    }
  }elseif (isset($variables['params']['account']->data['sipwise']['customer_id']) && !empty($variables['params']['account']->data['sipwise']['customer_id'])&& isset($variables['params']['account']->data['sipwise']['reseller_id']) && !empty($variables['params']['account']->data['sipwise']['reseller_id']) ){
	 $Customer = SipwiseEntity::load('customers', $variables['params']['account']->data['sipwise']['customer_id']);
	 $CustomerContact = SipwiseEntity::load('customercontacts', $Customer->contact_id);
	 if($CustomerContact->gpp9 != ''){
	    $query = db_select('hpbx_business_partners','bp');
        $query->fields('bp', array('bp_id'));
	    $query->condition('bp_name', trim($CustomerContact->gpp9));
	    $result = $query->execute();
	    $res = $result->fetchAssoc();
	    $bp_id = $res['bp_id'];
     }else{
	 	sipwise_api_activate_reseller($variables['params']['account']->data['sipwise']['reseller_id']);

        global $ActiveReseller;

       if(!empty($ActiveReseller->_settings->mail_footer)) {
         return array('footer' => t($ActiveReseller->_settings->mail_footer));
       }
	 }
   }else{
   	 if(isset($variables['params']['account']->data['sipwise']['bp_id']) && !empty($variables['params']['account']->data['sipwise']['bp_id'])){
		$bp_id = $variables['params']['account']->data['sipwise']['bp_id'];
	 }
  }
  require_once(drupal_get_path('module', 'hpbx') .'/includes/hpbx.business_partner.inc');
  $bp_settings = hpbx_business_partner_settings_get_local($bp_id);
  if (!empty($bp_settings['mail_footer'])) {
    return array('footer' => t($bp_settings['mail_footer']));
  }
}

/**
 * @param array $variables.
 *
 * @return array.
 */
function hpbx_ccs_mail_product_logo($variables) {

  if (isset($variables['params']['account']) && !empty($variables['params']['account']->data['sipwise']['reseller_id']) && !isset($variables['params']['account']->data['sipwise']['bp_id']) && !isset($variables['params']['account']->data['sipwise']['customer_id'])) {

    sipwise_api_activate_reseller($variables['params']['account']->data['sipwise']['reseller_id']);

    global $ActiveReseller;

    if (!empty($ActiveReseller->_settings->logo_path)) {
      return array('product_logo' => url(file_create_url($ActiveReseller->_settings->logo_path), array('absolute' => TRUE)));
    }
  }elseif (isset($variables['params']['account']->data['sipwise']['customer_id']) && !empty($variables['params']['account']->data['sipwise']['customer_id']) && isset($variables['params']['account']->data['sipwise']['reseller_id']) && !empty($variables['params']['account']->data['sipwise']['reseller_id'])){
	 $Customer = SipwiseEntity::load('customers', $variables['params']['account']->data['sipwise']['customer_id']);
	 $CustomerContact = SipwiseEntity::load('customercontacts', $Customer->contact_id);
	 if($CustomerContact->gpp9 != ''){
	    $query = db_select('hpbx_business_partners','bp');
        $query->fields('bp', array('bp_id'));
	    $query->condition('bp_name', trim($CustomerContact->gpp9));
	    $result = $query->execute();
	    $res = $result->fetchAssoc();
	    $bp_id = $res['bp_id'];
     }else{
	   sipwise_api_activate_reseller($variables['params']['account']->data['sipwise']['reseller_id']);

       global $ActiveReseller;

       if (!empty($ActiveReseller->_settings->logo_path)) {
         return array('product_logo' => url(file_create_url($ActiveReseller->_settings->logo_path), array('absolute' => TRUE)));
       }
	 }
  }else{
    if(isset($variables['params']['account']->data['sipwise']['bp_id']) && !empty($variables['params']['account']->data['sipwise']['bp_id'])){
		$bp_id = $variables['params']['account']->data['sipwise']['bp_id'];
	 }
  }
  require_once(drupal_get_path('module', 'hpbx') .'/includes/hpbx.business_partner.inc');
  $bp_settings = hpbx_business_partner_settings_get_local($bp_id);
  if (!empty($bp_settings['logo_path'])) {
    return array('product_logo' => url(file_create_url($bp_settings['logo_path']), array('absolute' => TRUE)));
  }
}

/**
 *
 * @param int $subscriber_id
 * @param string $number
 *
 * @return string
 */
function hpbx_normalize_number_human_readable($subscriber_id, $number) {

  global $ActiveReseller;

  $number = str_replace("+", "", $number);

  //drupal_set_message($uri_default_value);
  if (preg_match('/sip:(\d+)@/', $number, $matches)) {
    $number = $matches[1];
  }

  // Strip off leading 00.
  $number = preg_replace('/^00/', '', $number);

  $Subscriber = SipwiseEntity::load('subscribers', $subscriber_id);
  $Customer = SipwiseEntity::load('customers', $Subscriber->customer_id);
  $PilotSubscriber = $Customer->get_pilot_subscriber();
  $pn = $ActiveReseller->_settings->country_code . substr(hpbx_parse_primary_number($PilotSubscriber->primary_number), strlen($ActiveReseller->_settings->digit_for_national_calls));

  if (strlen($number) < $ActiveReseller->_settings->subscriber_number_min_digits) {
    // Less digits then a national number, show the number as it is.
  }
  elseif ($pn == substr($number, 0, strlen($pn)) && strlen($number) == strlen($pn) + $Customer->_settings->extension_length) {

    // Internal number, show the extension.
    $number = substr($number, $Customer->_settings->extension_length * -1);
  }
  elseif (substr($number, 0, strlen($ActiveReseller->_settings->country_code)) == $ActiveReseller->_settings->country_code) {
    // In (own) international format, remove the country code.
    $number = $ActiveReseller->_settings->digit_for_national_calls. substr($number, strlen($ActiveReseller->_settings->country_code));
  }
  elseif (strlen($ActiveReseller->_settings->digit_for_national_calls) &&  substr($number, 0, strlen($ActiveReseller->_settings->digit_for_national_calls)) == $ActiveReseller->_settings->digit_for_national_calls) {
    // Already national do nothing.
  }
  else {
    $number = '00'. $number;
  }
  return $number;
}


/**
 * @param string $key
 * @param array &$message
 * @param array $params
 *
 * @return void
 */
function hpbx_mail($key, &$message, $params) {
  global $ActiveReseller;
  switch ($key) {
    case 'affiliate_user_welcome':
    case 'customer_administrator_welcome':
    case 'customer_subscriber_welcome':
    case 'bp_administrator_welcome':
    case 'reset_password':
      $reseller_id = !empty($params['reseller_id']) ? $params['reseller_id'] : $ActiveReseller->id;
      $message['body'] = _user_mail_text($key . '_'. $reseller_id . '_body', NULL, $params, TRUE);
      $message['subject'] = _user_mail_text($key . '_'. $reseller_id . '_subject', NULL, $params, TRUE);
      break;
    case 'bp_customer_administrator_welcome':
    case 'bp_subscriber_welcome':
    case 'bp_user_welcome':
      $reseller_id = !empty($params['reseller_id']) ? $params['reseller_id'] : $ActiveReseller->id;
      $bp_id = !empty($params['bp_id']) ? $params['bp_id'] : '';
      $message['body'] = _user_mail_text($key . '_'. $reseller_id .'_'. $bp_id .'_body', NULL, $params, TRUE);
      $message['subject'] = _user_mail_text($key . '_'. $reseller_id .'_'. $bp_id .'_subject', NULL, $params, TRUE);
      break;
  }
}

/**
 * Implementation of hook_drupal_goto_alter().
 *
 * In case a hpbx user used the user/reset one-time-login link,
 * redirect that user to his hpbx personal settings page.
 *
 * @param string &$path
 * @param array &$options
 * @param string &$http_response_code
 *
 * @return void
 */
function hpbx_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  global $user, $theme;
  $themes = list_themes();
  $base_themes = drupal_find_base_themes($themes, $theme);

  if (array_key_exists('hpbx_theme', $base_themes) && $user->uid && $path == 'user/' . $user->uid . '/edit') {

    if (user_access('hpbx change password')) {
      $path = 'hpbx/password';
      watchdog('hpbx_goto_alter', 'rewritten to hpbx/password (non subscribers)');
    }
    elseif (user_access('hpbx edit own subscriber settings')) {
      $path = 'hpbx/settings';
      watchdog('hpbx_goto_alter', 'rewritten to hpbx/settings');
    }
  }
}

/**
 * Implementation of hook_tokens().
 *
 * @return array
 */
function hpbx_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $language;
  $replacements = array();

  if ($type == 'hpbx') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'profile_set_name':
          $replacements[$original] = $data['profile_set_name'];
          break;
        case 'lgi_product_name':
          $replacements[$original] = $data['lgi_product_name'];
          break;
        case 'lgi_brand_name':
          $replacements[$original] = $data['lgi_brand_name'];
          break;
        case 'company':
          $replacements[$original] = $data['company'];
          break;
        case 'firstname':
          $replacements[$original] = $data['firstname'];
          break;
        case 'lastname':
          $replacements[$original] = $data['lastname'];
          break;
        case 'one-time-login-url':
          $replacements['[hpbx:one-time-login-url]'] = user_pass_reset_url($data['account'], array('langcode' => $language->language));
          break;
      }
    }
  }
  return $replacements;
}


function hpbx_external_id_exists($Customer, $external_id, $Subscriber = NULL) {

  foreach (sipwise_api_get_all('subscribers', array('customer_id' => $Customer->id)) as $Subscriber2) {

    if (trim(strtolower($Subscriber2->external_id)) == trim(strtolower($external_id))) {

      // Found existing external_id, verify if this is for the current subscriber we are editting.
      if (empty($Subscriber->id) || ($Subscriber->id != $Subscriber2->id)) {

        return TRUE;
      }
    }
  }
  return FALSE;
}

function hpbx_add_elessar_js() {
  drupal_add_js(drupal_get_path('module', 'hpbx') . '/includes/js/moment.min.js');
  drupal_add_js(drupal_get_path('module', 'hpbx') . '/includes/js/hpbx-elessar.js');
  drupal_add_js(drupal_get_path('module', 'hpbx') . '/includes/js/elessar.min.js');
  drupal_add_css(drupal_get_path('module', 'hpbx') . '/includes/css/elessar-bootstrap.css');
  drupal_add_css(drupal_get_path('module', 'hpbx') . '/includes/css/elessar.css');
}

/**
 *
 * @param string $form_error_table_name
 * @param array $values
 * @param SipwiseCustomer $Customer
 */
function hpbx_extension_validate($form_error_table_name, $values, SipwiseCustomer $Customer) {

  global $ActiveReseller;
  if (!ctype_digit($values['pbx_extension']['value'])) {
    form_set_error($form_error_table_name .'][pbx_extension', t('Extension number may consist of digits only'));
   return;
  }

  //Modified for Bug #9746 - PE DEV: Create/Update subscriber/CR/HG/AA/fax - Extension should not be able to start with the digit for national calls
  // Not allowed to start with national digit.
  if (strlen($ActiveReseller->_settings->digit_for_national_calls) && substr($values['pbx_extension']['value'], 0, 1) == $ActiveReseller->_settings->digit_for_national_calls) {
    form_set_error($form_error_table_name .'][pbx_extension', t('Extension cannot start with @na', array('@na' => $ActiveReseller->_settings->digit_for_national_calls)));
  }

  // Not allowed to start with.
  foreach ($ActiveReseller->_settings->extensions_are_not_allowed_to_start_with as $na) {

    if (preg_match('/^'. $na .'/', $values['pbx_extension']['value'])) {
      form_set_error($form_error_table_name .'][pbx_extension', t('Extension cannot start with @na', array('@na' => $na)));
    }
  }

  // Not allowed to start with.
  foreach ($ActiveReseller->_settings->exclude_extensions as $na) {

    if ($values['pbx_extension']['value'] == $na) {
      form_set_error($form_error_table_name .'][pbx_extension', t('Extension cannot start with @na', array('@na' => $na)));
    }
  }

  if (strlen($values['pbx_extension']['value']) != $Customer->_settings->extension_length ) {
    form_set_error($form_error_table_name .'][pbx_extension', t('Extension requires length of @length digits', array('@length' => $Customer->_settings->extension_length)));
  }
}

/**
 * @param int $extension_length
 * @param string $extension_prefix
 * @param string $range_start
 * @param int $range_length
 *
 * @return string
 */
function hpbx_get_number_range_extension_start($extension_length, $extension_prefix,
    $range_start, $range_length) {

  $sw = substr($range_start, -$extension_length + strlen($extension_prefix));
  $sw = $extension_prefix.$sw;

  if ((strlen($range_length)-1) > 0 ) {
    $sw = substr($sw, 0, -(strlen($range_length)-1));
  }
  return $sw;
}

/**
 * @param $area
 *
 * @return string
 */
function hpbx_get_emergency_index($area) {
  global $ActiveReseller;
  $emergency_prefixes = variable_get('hpbx_emergency_indexes_'. $ActiveReseller->id, array());
  $len = $area;
  $arealength = strlen((string)$len);
  if (isset($emergency_prefixes[$area])) {
    //Area code less than 2 digit  
    if ($arealength >= 2) {
      return str_pad($emergency_prefixes[$area], 2, '0', STR_PAD_LEFT);
    }
    //Area code less than 1 to  digit  
    else{
      return $emergency_prefixes[$area];
    }
  }
  // Not found. Will return the emergency index for Driebergen-Rijsenburg.
  return variable_get('hpbx_emergency_indexes_'. $ActiveReseller->id . '_default', FALSE);
}

/**
 * Implementation of hook_init().
 */
function hpbx_init() {

  if (variable_get('hpbx_show_hg_tip', FALSE)) {
    global $hg_current_rev;
    $hg_current_rev = exec('git describe --abbrev=0 --tags');
    $hg_current_rev .= ' ' . '-' . ' ' . exec('git log -r HEAD -n 1 --format="%h - %cd" --date=iso');    
  }	
 
  // Load some include files, needed globally.
  module_load_include('inc', 'hpbx', 'includes/hpbx.user');
  module_load_include('inc', 'hpbx', 'includes/hpbx.audio');

  // Include for huntgroup, confererence, autoattendant.
  module_load_include('inc', 'hpbx', 'includes/hpbx.subscriber');


  global $user;

  if (user_access('hpbx view reseller')) {

    // In case the user does have the permissions to access reseller settings. Remove the reseller_id and customer_id.
    if (isset($user->data['sipwise']['reseller_id'])) {
      unset($user->data['sipwise']['reseller_id']);

      if (isset($user->data['sipwise']['customer_id'])) {
        unset($user->data['sipwise']['customer_id']);
      }

      // Save the drupal user account.
      user_save($user);
    }
  }

  // Activate reseller of current user.
  if (!empty($user->data['sipwise']['reseller_id'])) {
    sipwise_api_activate_reseller($user->data['sipwise']['reseller_id']);
  }


  $redirect = TRUE;
  foreach ($user->roles as $rid => $role) {

    if ($rid!=2 && !preg_match('/HostedPBX/', $role)) {
      $redirect = FALSE;
    }
  }

  global $ActiveReseller;

  // Redirect to maintenance page if in maintenance mode.
  if (variable_get('hpbx_maintenance_mode', FALSE)) {

    if ($_GET['q']!='hpbx/general/settings' && $_GET['q']!='hpbx/offline' && $_GET['q']!='user/login' && $_GET['q']!='hpbx/logout' && !preg_match('/^hpbx\/help/', $_GET['q']) &&  !preg_match('/^node/', $_GET['q'])) {

      if (user_access('hpbx view reseller')) {
        drupal_goto('hpbx/general/settings');
      }
      else {
        drupal_not_found();
        die();
      }
    }
  }


  // Redirect to terms if not agreed yet.
  if ($redirect && !empty($ActiveReseller->_settings->terms_nid) && node_load($ActiveReseller->_settings->terms_nid) && empty($_SESSION['ccs']['hpbx']['masquerading_from']) &&
      arg(0) != 'user' &&
      $_GET['q'] != 'settings'  &&
      $_GET['q'] != 'hpbx/terms'  &&
      $_GET['q'] != 'user/reset' &&
      $_GET['q'] != 'node/2' &&
      $_GET['q'] != 'hpbx/logout' &&
    empty($user->data['sipwise']['terms_agreed']) && !user_access('hpbx view reseller') && !user_access('hpbx view customer') && !user_access('hpbx masquerade customer')) {

    $options = array();
    if (!empty($_GET['pass-reset-token'])) {
      $options = array('query' => drupal_get_query_parameters());
    }

    drupal_goto('hpbx/terms', $options);
  }

  // Redirect the user based on permissions, but only if the user has only hostedpbx rights.
  if ($redirect && drupal_is_front_page()) {

    if (user_access('hpbx view reseller')) {
      drupal_goto('hpbx/affiliates');
    }
    elseif (user_access('hpbx edit customer')) {
      drupal_goto('hpbx/customers');
    }
    elseif (user_access('hpbx view customer')) {
      drupal_goto('hpbx/customers');
    }
    elseif (user_access('hpbx view subscriber')) {
      drupal_goto('hpbx/dashboard');
    }
    elseif (user_access('hpbx edit own subscriber settings')) {
      drupal_goto('hpbx/settings');
    }
  }
}

/**
 * Helper function to generate password based on customer_id.
 *
 * @param integer $customer_id
 *
 * @return string
 */
function hpbx_subscriber_password($customer_id) {
  // Need an alpha numeric random string.
  return strtolower(chr(rand(65,90)) . uniqid((int)$customer_id));
}

/**
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function hpbx_rewrite_test_form($form, $form_state) {

  $resellers = hpbx_get_resellers();

  $option = array();
  foreach ($resellers as $Reseller) {
    $option[$Reseller->id] = $Reseller->name;
  }

  $form = array();
  $form['reseller_id'] = array(
    '#type' => 'select',
    '#options' => $option,
    '#title' => t('Reseller'),
    '#default_value' => (!empty($_SESSION['ccs']['hpbx']['rewrite_test']['values']['reseller_id']) ? $_SESSION['ccs']['hpbx']['rewrite_test']['values']['reseller_id'] : ''),
  );
  $form['subscriber_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscriber ID'),
    '#default_value' => (!empty($_SESSION['ccs']['hpbx']['rewrite_test']['values']['subscriber_id']) ? $_SESSION['ccs']['hpbx']['rewrite_test']['values']['subscriber_id'] : ''),
  );
  $form['input'] = array(
    '#type' => 'textfield',
    '#title' => t('Input'),
    '#default_value' => (!empty($_SESSION['ccs']['hpbx']['rewrite_test']['values']['input']) ? $_SESSION['ccs']['hpbx']['rewrite_test']['values']['input'] : ''),
  );

  $form['actions'] = array();
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply rewrite rules'),
    '#prefix' => '<span class="submit-button">',
    '#suffix' => '</span><br/></br></br>',
  );

  if (isset($_SESSION['ccs']['hpbx']['rewrite_test']['variables']) &&
    is_array($_SESSION['ccs']['hpbx']['rewrite_test']['variables'])) {

      $form['result'] = array(
        '#type' => 'markup',
        '#markup' => theme('table', $_SESSION['ccs']['hpbx']['rewrite_test']['variables']),
      );
    }

  $_SESSION['ccs']['hpbx']['rewrite_test']['variables'] = FALSE;
  return $form;
}

/**
 *
 * @param array $form
 * @param array $form_state
 */
function hpbx_rewrite_test_form_submit($form, $form_state) {

  global $user;
  $user->data['sipwise']['reseller_id'] = $form_state['values']['reseller_id'];;
  sipwise_api_activate_reseller($form_state['values']['reseller_id']);

  $header = array('callee_in', 'callee_out', 'caller_in', 'caller_out');

  $rows = array();
  $row[] = t('Input');
  $row[] = $form_state['values']['input'];
  foreach ($header as $type) {
    $row = array();
    $row[] = $type;
    $row[] = sipwise_api_normalize_number($form_state['values']['subscriber_id'], $form_state['values']['input'], $type);
    $rows[] = $row;
  }

  $_SESSION['ccs']['hpbx']['rewrite_test']['values'] = $form_state['values'];
  $_SESSION['ccs']['hpbx']['rewrite_test']['variables'] = array('headers' => $header, 'rows' => $rows);
  drupal_goto('hpbx/rewrite/test');
}

function hpbx_get_profile_name_from_profile_id($profile_set_id, $profile_id) {

  static $profile_names = array();

  if (!isset($profile_names[$profile_set_id])) {
    foreach (sipwise_api_get_all('subscriberprofiles', array('profile_set_id' => $profile_set_id)) as $SubscriberProfile) {
      $profile_names[$SubscriberProfile->profile_set_id][$SubscriberProfile->id] = t(str_ireplace(' profile', '', str_ireplace('HostedPBX SME ', '', $SubscriberProfile->description)));
    }
    asort($profile_names[$profile_set_id], SORT_NATURAL|SORT_FLAG_CASE);
  }
  if (isset($profile_names[$profile_set_id][$profile_id])) {
    return $profile_names[$profile_set_id][$profile_id];
  }
  return FALSE;;
}


function hpbx_queue_elements($SubscriberPreferences, $soundfiles) {

  $elements = array(
      '#type' => 'container',
      '#title' => t('Queue'),
      '#theme_wrappers' => array('hpbx_foldable_list_item'),
      '#tree' => TRUE,
      '#toggle' => array('type' => 'hpbx-queue-toggle', 'state' => $SubscriberPreferences->cloud_pbx_callqueue),
  );

  $elements['cloud_pbx_callqueue']['value'] = array(
      '#type' => 'hidden',
      '#default_value' => 1,
      '#required' => TRUE,
  );

  $elements['queue_wrap_up_time']['value'] = array(
      '#type' => 'textfield',
      '#default_value' => (isset($SubscriberPreferences->queue_wrap_up_time) || $SubscriberPreferences->queue_wrap_up_time != '') ? $SubscriberPreferences->queue_wrap_up_time : 10,
      '#empty_option' => t('Choose an option'),
      '#required' => TRUE,
      '#title' => t('Wrap up time (sec)*'),
      '#attributes' => array('class' => array('sg-element'), 'placeholder' => t('Wrap up time (sec)')),
  );

  $elements['max_queue_length']['value'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc(array(3, 5, 10, 20)),
      '#default_value' => !empty($SubscriberPreferences->max_queue_length) ? $SubscriberPreferences->max_queue_length : 5,
      '#empty_option' => t('Choose an option'),
      '#required' => TRUE,
      '#title' => t('Max. number of calls in queue'),
      '#attributes' => array('class' => array('chzn-select', 'sg-element', 'no-search')),
  );

  $handle = 'queue_greeting';
  $title = 'queue announcement';

  $markup = '<div class="hpbx-tab-form-label-field-row hpbx-upload-audio-container">';

  if (!empty($soundfiles[$handle]->filename)) {
    $markup .= '<div class="col-xs-12">
                     <div class="hpbx-tab-form-label">'.t(drupal_ucfirst($title)) .' audio</div>
                    </div>
                    <div class="col-xs-12 hpbx-tab-audio-container hpbx-audio-container hpbx-audio-container-singular" data-audio-url="/hpbx/audiorecording/'. $soundfiles[$handle]->id .'/play" data-audio-id="'.$soundfiles[$handle]->id.'">
                     <div class="hpbx-audio-background-active"></div>
                     <div class="hpbx-audio-progress-bar"></div>
                     <div class="hpbx-audio-content">
                       <div class="hpbx-audio-fallback">';

    $markup .= hpbx_audio_player('hpbx/audiorecording/'. $soundfiles[$handle]->id .'/play.wav');

    $markup .= '       </div>
                       <div class="hpbx-audio-control-icon"></div>
                       <div class="hpbx-audio-title">'. $soundfiles[$handle]->filename .'</div>
                       <div class="hpbx-delete js-delete sg-btn sg-btn-small sg-btn-secondary" title="'. t('Delete upload'). '"><span class="sg-btn-icon LGI-iconb-cross-bold"></span></div>
                     </div>
                     <input type="checkbox" name="hpbx-audio-is-replaced-queue-greeting" class="hpbx-audio-is-replaced" value="1"/>
                  ';
  }

  $markup .= '</div>';

  // Show audio player for handle.
  $elements[$handle] = array(
    '#prefix' => '<div class="hpbx-tab-form-label-field-row hpbx-upload-audio-container">',
    '#type' => 'markup',
    '#markup' => $markup,
    '#suffix' => '</div>',
  );

  $elements[$handle. '_upload']['value'] = array(
    '#title' => t('Upload !title audio', array('!title' => $title)),
    '#type' => 'file',
    '#name' => $handle,
    '#theme_wrappers' => array('hpbx_audio_upload', 'form_element'),
    '#attributes' => array(
      'class' => array('hpbx-click-with-alert-input'),
    ),
    '#wrapper_attributes' => array(
      'class' => array(
        'sg-btn',
        'sg-btn-file-input',
        'sg-btn-secondary',
        'hpbx-click-with-alert',
        'needsclick',
      ),
      'data-alert-title' => t('File requirements'),
      'data-alert-message' => t('If you upload an audio file, make sure you pay for or own the content rights for this audio file.</br></br>Supported file types: wav, mp3, flac, ogg, raw'),
      'data-alert-button-text' => t('OK'),
    ),
  );
  return $elements;
}


function hpbx_get_json_form_errors($form_errors, $element_suffix) {
  $json_form_errors = array();
  foreach ($form_errors as $form_element => $form_error) {
    $json_form_error = new stdClass();

    if (is_array($element_suffix)) {
      foreach ($element_suffix as $es) {
        $form_element = str_replace($es, '', $form_element);
      }
    }
    else {
      $form_element = str_replace($element_suffix, '', $form_element);
    }

    $form_element = str_replace('][value', '', $form_element);
    $json_form_error->element = $form_element;
    $json_form_error->message = $form_error;
    $json_form_errors[] = $json_form_error;
  }
  return $json_form_errors;
}


/**
 *
 * @param array $form
 * @param array $form_state
 * @param SipwiseCustomer $Customer
 * @param SipwiseSubscriber $Subscriber
 * @param string $key
 */
function hpbx_subscriber_number_extension_elements(&$form, $form_state, $Customer, $Subscriber, $key = 'general') {

  global $ActiveReseller;

  // Get free numbers from the pilot alias_numbers list.
 if(is_null($Subscriber)){
    $options = $Customer->get_free_numbers($Subscriber);
  }else{
    $number_options = $Customer->get_free_numbers($Subscriber);
    $min_length = $ActiveReseller->_settings->area_code_min_digits + $ActiveReseller->_settings->subscriber_number_min_digits;
    $max_length = $ActiveReseller->_settings->area_code_max_digits + $ActiveReseller->_settings->subscriber_number_max_digits;
    foreach($number_options as $option){ 
     if(strlen($option) >= $min_length && strlen($option) <= $max_length){
      $options[$option] = $option;
     }
    }
  }
  
  $form['alias_key'] = array(
    '#type' => 'value',
    '#value' => $key
  );
  if(isset($Customer->_settings->allow_subscribers_without_did) && $Customer->_settings->allow_subscribers_without_did && $form_state[build_info][form_id]!='hpbx_fax2email_edit_form'){
  		//array_unshift($options, 'None');
  		$options['0'] = 'None';
	  		foreach(ksort($options) as $key=>$value){
	  			$options[]=$value;
	  		}
  		  		
  		if(isset($Subscriber) && !empty($Subscriber->get_alias_number(HPBX_NUMBER_FORMAT_SN))){
  			$defaultAliasNo = $Subscriber->get_alias_number(HPBX_NUMBER_FORMAT_SN);
  		}else{
  			$defaultAliasNo = 0;
  		}
  		 		
  		$form[$key]['alias_number']['value'] = array(
	    '#type' => 'select',
	    '#required' => FALSE,
	    '#options' => $options,
	    '#empty_option' => '-'. t('Choose Number') . '-',
	    '#default_value' => (!is_null($Subscriber) ? $defaultAliasNo : '-'. t('Choose Number') . '-'),
	    '#access' => user_access('hpbx edit subscriber'),
	    '#title' => t('Number'),
	    '#attributes' => array(
	      'class' => array('chzn-select', 'sg-element', 'no-search'),
	      'data-placeholder' => t('Choose an option'),
	    ),
  		);
  }else{
	    $form[$key]['alias_number']['value'] = array(
	    '#type' => 'select',
	    '#required' => TRUE,
	    '#options' => $options,
	    '#empty_option' => '-'. t('None') . '-',
	    '#default_value' => (!is_null($Subscriber) ? $Subscriber->get_alias_number(HPBX_NUMBER_FORMAT_SN) : '-'. t('Choose Number') . '-'),
	    '#access' => user_access('hpbx edit subscriber'),
	    '#title' => t('Number'). '*',
	    '#attributes' => array(
	      'class' => array('chzn-select', 'sg-element', 'no-search'),
	      'data-placeholder' => t('Choose an option'),
	    ),
  		);
  }

  $form[$key]['pbx_extension']['value'] = array(
      '#type' => 'textfield',
      '#title' => t('Extension'). '*',
      '#default_value' => (!empty($Subscriber->pbx_extension) ? $Subscriber->pbx_extension : ''),
      '#access' => user_access('hpbx edit subscriber'),
      '#required' => TRUE,
      '#attributes' => array('class' => array('sg-element')),
      '#maxlength' => $Customer->_settings->extension_length,
  );

   if ($Customer->_settings->derive_extension_from_did || $Customer->_settings->allow_subscribers_without_did) {
    $form[$key]['alias_number']['value']['#attributes'] += array(
      'data-custom-change-event' => 'edit-subscriber-general-number-change',
      'data-derive-extension-from-did' => (int)$Customer->_settings->derive_extension_from_did,
      'data-allow-subscribers-without-did' => (int)$Customer->_settings->allow_subscribers_without_did,
      'data-extension-length' => (int)$Customer->_settings->extension_length,
      'data-extension-id' => '#edit-'. $key . '-pbx-extension-value',
      'data-form-id' => $form_state['build_info']['form_id'],
      'data-extension-value' => (!is_null($Subscriber) ? $Subscriber->pbx_extension : "")
    );
    
    if(!$Customer->_settings->allow_subscribers_without_did){
    	$form[$key]['pbx_extension']['value']['#attributes']['readonly'] = 'readonly';
    	$form[$key]['pbx_extension']['value']['#attributes']['class'][] = 'hpbx-incognito';
    }else{
    	$form[$key]['pbx_extension']['value']['#attributes']['enabled'] = 'enabled';
    	$form[$key]['pbx_extension']['value']['#attributes']['class'][]= 'sg-element form-text';
    }

    // Add customer number ranges for validation purposes.
    $ranges = array();
    foreach ($Customer->_settings->numberranges as $key => $range) {
      unset($range->inported);
      $ranges[$key] = $range;
    }

    $form['numberranges'] = array(
      '#markup' => '<div id="hpbx-numberranges" data-json="'. str_replace('"', "'", json_encode($ranges)) . '" style="display:none;"></div>',
    );
  }

  if (!isset($form_state['triggering_element']['#value']) || ($form_state['triggering_element']['#value'] != t('Add') && $form_state['triggering_element']['#value']!= t('Delete'))) {

    // When the page is loaded and no values are set yet, set the value to the default value of the element.
    if (!isset($form_state['values'])) {


      if (!empty($Subscriber->pbx_extension)) {
        $form_state['values'][$key]['pbx_extension']['value'] = $Subscriber->pbx_extension;
      }
      else {
        $form_state['values'][$key]['pbx_extension']['value'] = '';
      }

      if (!is_null($Subscriber)) {
        $form_state['values'][$key]['alias_number']['value'] = $Subscriber->get_alias_number(HPBX_NUMBER_FORMAT_SN);
      }
      else {
        $form_state['values'][$key]['alias_number']['value'] = '';
      }
    }


    if (!empty($form_state['values'][$key]['alias_number']['value'])) {
      $form[$key]['alias_number']['#default_value'] = $form_state['values'][$key]['alias_number']['value'];
    }

    // In case the extension is derived from the alias_number the virtual pbx will be displayed.
    if ($Customer->_settings->derive_extension_from_did) {

      if (!empty($form[$key]['alias_number']['#default_value'])) {

        // Set to read-only, so the user can't edit the extension.
        $form[$key]['pbx_extension']['value']['#attributes']['readonly'] = 'readonly';
        $prefix = hpbx_get_extension_prefix($Customer, $form[$key]['alias_number']['#default_value']);
        $extension_suffix_length = $Customer->_settings->extension_length - strlen($prefix);
        $form[$key]['pbx_extension']['value']['#value'] = $prefix. substr($form[$key]['alias_number']['#default_value'], $extension_suffix_length * - 1);
      } else if(isset($Subscriber->pbx_extension) && $Subscriber->pbx_extension!=''){
      	$form[$key]['pbx_extension']['value']['#value'] = $Subscriber->pbx_extension;
      }
      else {
        $form[$key]['pbx_extension']['value']['#value'] = '';
      }
    }
  }
}

/**
 * Implementation of hook_node_view().
 *
 * Used to empty the body of the frontpage node.
 *
 * @param stdClass $node
 * @param string $view_mode
 * @param string $langcode
 *
 * @return void
 */
function hpbx_node_view($node, $view_mode, $langcode) {
  global $user;
  if (drupal_is_front_page() && function_exists('hpbx_users_is_hpbx_user') && hpbx_users_is_hpbx_user() && count($user->roles) == 2) {
    drupal_set_title('');
    $node->content['body'][0]['#markup'] = '';
  }
  elseif ($node->type == 'hpbx_help_article') {
    drupal_add_js(drupal_get_path('module', 'hpbx') . '/includes/js/hpbx_help.js', array('scope' => 'footer'));
  }
}

/**
 * Implementation of hook_permission().
 */
function hpbx_permission() {
  return array(
    'hpbx basic' => array('title' => t('hpbx basic')),
    'hpbx import help' => array('title' => t('hpbx import help')),
    'hpbx view reseller' => array('title' => t('hpbx view reseller')),
    'hpbx edit reseller' => array('title' => t('hpbx edit reseller')),
    'hpbx edit own reseller' => array('title' => t('hpbx edit own reseller')),

    'hpbx edit own reseller users' => array('title' => t('hpbx edit own reseller users')),
    'hpbx edit general reseller settings' => array('title' => t('hpbx edit general reseller settings')),
    'hpbx edit dashboard reseller settings' => array('title' => t('hpbx edit dashboard reseller settings')),
    'hpbx edit mail reseller settings' => array('title' => t('hpbx edit mail reseller settings')),
    'hpbx edit terms reseller settings' => array('title' => t('hpbx edit terms reseller settings')),
    'hpbx edit emergency reseller settings' => array('title' => t('hpbx edit emergency reseller settings')),

    'hpbx add reseller' => array('title' => t('hpbx add reseller')),
    'hpbx delete reseller' => array('title' => t('hpbx delete reseller')),

    'hpbx view customer' => array('title' => t('hpbx view customer')),
    'hpbx add customer' => array('title' => t('hpbx add customer')),
    'hpbx edit customer' => array('title' => t('hpbx edit customer')),
    'hpbx delete customer' => array('title' => t('hpbx delete customer')),

    'hpbx view business partners'  => array('title' => t('hpbx view business partners')),
    'hpbx view business partner customer' => array('title' => t('hpbx view business partner customer')),
    'hpbx add business partner customer' => array('title' => t('hpbx add business partner customer')),
    'hpbx edit business partner customer' => array('title' => t('hpbx edit business partner customer')),
    'hpbx delete business partner customer' => array('title' => t('hpbx delete business partner customer')),
    'hpbx edit business partner users' => array('title' => t('hpbx edit business partner users')),
    'hpbx edit business partner settings' => array('title' => t('hpbx edit business partner settings')),
    'hpbx delete business partner' => array('title' => t('hpbx delete business partner')),

    'hpbx edit own business partner users' => array('title' => t('hpbx edit own business partner users')),
    'hpbx edit own business partner settings' => array('title' => t('hpbx edit own business partner settings')),

    'hpbx edit general business partner settings' => array('title' => t('hpbx edit general business partner settings')),
    'hpbx edit dashboard business partner settings' => array('title' => t('hpbx edit dashboard business partner settings')),
    'hpbx edit mail business partner settings' => array('title' => t('hpbx edit mail business partner settings')),

    'hpbx delete customer override' => array('title' => t('hpbx delete customer override')),

    'hpbx masquerade customer' => array('title' => t('hpbx masquerade customer')),

    'hpbx view reseller customer' => array('title' => t('hpbx view reseller customer')),
    'hpbx add reseller customer' => array('title' => t('hpbx add reseller customer')),
    'hpbx edit reseller customer' => array('title' => t('hpbx edit reseller customer')),
    'hpbx delete reseller customer' => array('title' => t('hpbx delete reseller customer')),


    'hpbx view subscriber' => array('title' => t('hpbx view subscriber')),
    'hpbx edit own subscriber settings' => array('title' => t('hpbx edit own subscriber settings')),
    'hpbx edit own customer settings' => array('title' => t('hpbx edit own customer settings')),

    'hpbx edit subscriber' => array('title' => t('hpbx edit subscriber')),
    'hpbx delete subscriber' => array('title' => t('hpbx delete subscriber')),
    'hpbx view pbxdevice' => array('title' => t('hpbx view pbxdevice')),
    'hpbx edit pbxdevice' => array('title' => t('hpbx edit pbxdevice')),
    'hpbx delete pbxdevice' => array('title' => t('hpbx delete pbxdevice')),
    'hpbx sync pbxdevice' => array('title' => t('hpbx sync pbxdevice')),
    'hpbx view call records' => array('title' => t('hpbx view call records')),

    'hpbx view huntgroup' => array('title' => t('hpbx view huntgroup')),
    'hpbx edit huntgroup' => array('title' => t('hpbx edit huntgroup')),
    'hpbx delete huntgroup' => array('title' => t('hpbx delete huntgroup')),

    'hpbx view auto attendant' => array('title' => t('hpbx view auto attendant')),
    'hpbx edit auto attendant' => array('title' => t('hpbx edit auto attendant')),
    'hpbx delete auto attendant' => array('title' => t('hpbx delete auto attendant')),

    'hpbx view conference' => array('title' => t('hpbx view conference')),
    'hpbx edit conference' => array('title' => t('hpbx edit conference')),
    'hpbx delete conference' => array('title' => t('hpbx delete conference')),

    'hpbx view numbers' => array('title' => t('hpbx view numbers')),
    'hpbx edit audio' => array('title' => t('hpbx edit audio')),

    'hpbx view administrator user' => array('title' => t('hpbx view administrator user')),
    'hpbx edit administrator user' => array('title' => t('hpbx edit administrator user')),

    'hpbx administer reseller' => array('title' => t('hpbx administer reseller')),

    'hpbx change password' => array('title' => t('hpbx change password (as non subscriber)')),

    'hpbx view dashboard' => array('title' => t('hpbx view dashboard')),

    'hpbx send fax' => array('title' => t('hpbx send fax')),
    'hpbx view fax log' => array('title' => t('hpbx view fax log')),
    'hpbx view fax2email' => array('title' => t('hpbx view fax2email')),
    'hpbx edit fax2email' => array('title' => t('hpbx edit fax2email')),
    'hpbx delete fax2email' => array('title' => t('hpbx delete fax2email')),
  );
}

/**
 * Implementation of hook_overlay_paths.
 */
function hpbx_overlay_paths() {
  $paths = array(
    //'hpbx/pbxdevice/*/sync' => array('width' => '500px'),
    'hpbx/terms_' => array('width' => '900px'),
  );
  return $paths;
}

function hpbx_terms_page() {
  drupal_set_title('');
  return '';
}

function hpbx_terms_form($form, $form_state) {
  drupal_set_title('');

  $form = array(
    '#prefix' => '<div class="hpbx-main-content-inner hpbx-default-forward">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('hpbx-tab-form')),
  );

  global $ActiveReseller;
  if ($node = node_load($ActiveReseller->_settings->terms_nid)) {
    drupal_set_title($node->title);
    $node->title = '';
    $markup = drupal_render(node_view($node));
  }
  else {
    $markup = t('Terms not found');
  }

  $form['container'] = array(
    '#type' => 'container',
    '#collapsible' => FALSE,
    '#tree' => TRUE,
    '#tabform' => TRUE,
  );

  $form['container'] ['terms']= array(
    '#type' => 'markup',
    '#markup' => $markup,
  );

    // Submit button.
  $form['container']['actions'] = array(
    '#type' => 'actions',
    '#attributes' => array('class' => array('hpbx-tab-form-buttons-row')),
    '#prefix' => '<div class="row">',
    '#suffix' => '</div>',
  );
  $form['container']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('I agree'),
    '#prefix' => '<span class="submit-button">',
    '#suffix' => '</span>',
    '#attributes' => array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary')),
  );
  return $form;
}

function hpbx_terms_form_validate($form, $form_state) {

}

function hpbx_terms_form_submit($form, $form_state) {

  global $user;

  $user->data['sipwise']['terms_agreed'] = TRUE;
  user_save($user);

  $options = array();
  if (!empty($_GET['pass-reset-token'])) {
    $options = array('query' => drupal_get_query_parameters());
  }
  drupal_goto('hpbx/password', $options);
}


/**
 * Implementation of hook_menu().
 */
function hpbx_menu() {
  $items = array();
  $items['hpbx/general/settings'] = array(
    'title' => t('HPBX general settings'),
    'description' => 'Set affiliate independent settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_settings_form'),
    'access arguments' => array('hpbx view reseller'),
    'type' => MENU_CALLBACK,
  );
  $items['hpbx/affiliate/%/report'] = array(
    'title' => t('Report'),
    'access arguments' => array('hpbx view reseller'),
    'page callback' => 'hpbx_reseller_report_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.reseller.inc',
  );
  $items['hpbx/affiliate/%/emergency_download'] = array(
    'title' => t('Report'),
    'access arguments' => array('hpbx edit emergency reseller settings'),
    'page callback' => 'hpbx_reseller_emergency_indexes_download',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.reseller.inc',
  );
  $items['hpbx/affiliate/%/mappings_download'] = array(
    'title' => t('Report'),
    'access arguments' => array('hpbx edit emergency reseller settings'),
    'page callback' => 'hpbx_reseller_emergency_mappings_download',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.reseller.inc',
  );
  $items['hpbx/logout'] = array(
    'title' => 'Log out',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'hpbx_logout',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['hpbx/password'] = array(
    'title' => 'Change password',
    'access arguments' => array('hpbx change password'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_user_pass_reset_form'),
    'file' => 'includes/hpbx.user.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['hpbx/dashboard'] = array(
    'title' => 'Dashboard',
    'access arguments' => array('hpbx view dashboard'),
    'page callback' => 'hpbx_dashboard_page',
    'file' => 'includes/hpbx.dashboard.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['hpbx/download'] = array(
	'title' => 'Download Softclient',
	'access callback' => 'hpbx_download_access_callback',
	'page callback' => 'hpbx_download_page',
	'file' => 'includes/hpbx.download.inc',
	'type' => MENU_SUGGESTED_ITEM,
  );
  $items['hpbx/download/software/%'] = array(
	'title' => 'Download',
	'access callback' => 'hpbx_download_access_callback',
	'page callback' => 'hpbx_software_download',
	'page arguments' => array(3),
	'type' => MENU_CALLBACK,
	'file' => 'includes/hpbx.download.inc',
  );
  $items['hpbx/fax2email/%/edit'] = array(
    'title' => 'Edit fax number',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_fax2email_edit_form', 2),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.fax2email.inc',
  );
  $items['hpbx/fax2email/add'] = array(
    'title' => 'Create fax number',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_fax2email_edit_form'),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.fax2email.inc',
  );
  $items['hpbx/fax2email/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_fax2email_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx delete fax2email'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.fax2email.inc',
  );
  $items['hpbx/fax'] = array(
    'title' => 'Fax',
    'access callback' => 'hpbx_fax_access_callback',
    'page callback' => 'hpbx_fax_page',
    'file' => 'includes/hpbx.fax.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['hpbx/terms'] = array(
    'title' => 'Terms and Conditions',
    'access arguments' => array('hpbx basic'),
    'page arguments' => array('hpbx_terms_form'),
    'page callback' => 'drupal_get_form',
    'type' => MENU_CALLBACK,
  );
  $items['hpbx/rewrite/test'] = array(
    'title' => 'Rewrite rules',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_rewrite_test_form'),
    'access arguments' => array('hpbx basic'),
    'type' => MENU_CALLBACK,
  );
 $items['hpbx/affiliate/%/customer/%/pre-masquerade'] = array(
    'title' => 'Masquerade',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_masquerade_before_form',4, 2),
    'access arguments' => array('hpbx masquerade customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.masquerade.inc',
  );
  $items['hpbx/mail_test'] = array(
    'title' => 'Sipwise',
    'access arguments' => array('hpbx basic'),
    'page callback' => 'hpbx_mail_test',
    'type' => MENU_CALLBACK,
  );

  $items['hpbx/customer/%/masquerade'] = array(
    'title' => 'Masquerade',
    'page callback' => 'hpbx_masquerade_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx masquerade customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.masquerade.inc',
  );
  $items['hpbx/customer/%/masquerade/%'] = array(
    'title' => 'Masquerade',
    'page callback' => 'hpbx_masquerade_page',
    'page arguments' => array(2, 4),
    'access arguments' => array('hpbx masquerade customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.masquerade.inc',
  );
  $items['hpbx/affiliate/%/customer/%/masquerade'] = array(
    'title' => 'Masquerade',
    'page callback' => 'hpbx_masquerade_page',
    'page arguments' => array(4, 2),
    'access arguments' => array('hpbx masquerade customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.masquerade.inc',
  );
  $items['hpbx/affiliate/%/customer/%/masquerade/%'] = array(
    'title' => 'Masquerade',
    'page callback' => 'hpbx_masquerade_page',
    'page arguments' => array(4, 2, 6),
    'access arguments' => array('hpbx masquerade customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.masquerade.inc',
  );
  // Voicemail.
  $items['hpbx/voicemails'] = array(
    'title' => 'Voicemail',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_voicemails_overview_form'),
    'access arguments' => array('hpbx edit own subscriber settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.voicemail.inc',
  );

  // Voicemail.
  $items['hpbx/voicemails/count'] = array(
    'title' => 'Voicemail',
    'page callback' => 'hpbx_voicemails_inbox_count_callback',
    'access arguments' => array('hpbx edit own subscriber settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.voicemail.inc',
  );

  // Voicemail.
  $items['hpbx/voicemail/%'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_voicemail_play',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit own subscriber settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.voicemail.inc',
  );
  // Voicemail.
  $items['hpbx/voicemail/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_voicemail_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit own subscriber settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.voicemail.inc',
  );

  // Callrecords.
  $items['hpbx/call-log'] = array(
    'title' => 'Call records',
    'page callback' => 'hpbx_callrecords_overview_page',
    'access arguments' => array('hpbx view call records'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.callrecords.inc',
  );

  // Huntgroups.
  $items['hpbx/huntinggroups'] = array(
    'title' => 'Hunt groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_huntgroups_overview_form'),
    'access arguments' => array('hpbx view huntgroup'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'includes/hpbx.huntgroup.inc',
  );
  $items['hpbx/huntinggroup/%/edit'] = array(
    'title' => 'Hunt groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_huntgroup_edit_form', 2),
    'access arguments' => array('hpbx edit huntgroup'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.huntgroup.inc',
  );
  $items['hpbx/huntinggroup/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_huntgroup_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx delete huntgroup'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.huntgroup.inc',
  );
  $items['hpbx/huntinggroup/add'] = array(
    'title' => 'Hunt groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_huntgroup_edit_form'),
    'access arguments' => array('hpbx edit huntgroup'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.huntgroup.inc',
  );
  $items['hpbx/auto-attendants'] = array(
    'title' => 'Auto attendants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_autoattendants_overview_form'),
    'access arguments' => array('hpbx view auto attendant'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.autoattendant.inc',
  );
  $items['hpbx/auto-attendant/%/edit'] = array(
    'title' => 'Auto attendant',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_autoattendant_edit_form', 2),
    'access arguments' => array('hpbx edit auto attendant'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.autoattendant.inc',
  );
  $items['hpbx/auto-attendant/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_autoattendant_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx delete auto attendant'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.autoattendant.inc',
  );
  $items['hpbx/auto-attendant/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_autoattendant_edit_form'),
    'access arguments' => array('hpbx edit auto attendant'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.autoattendant.inc',
  );
  $items['hpbx/conference-rooms'] = array(
    'title' => 'Conference rooms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_conferences_overview_form'),
    'access arguments' => array('hpbx view conference'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.conference.inc',
  );
  $items['hpbx/conference-room/%/edit'] = array(
    'title' => 'Conference',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_conference_edit_form', 2),
    'access arguments' => array('hpbx edit conference'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.conference.inc',
  );
  $items['hpbx/conference-room/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_conference_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx delete conference'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.conference.inc',
  );
  $items['hpbx/conference-room/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_conference_edit_form'),
    'access arguments' => array('hpbx edit conference'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.conference.inc',
  );

  // Resellers.
  $items['hpbx/affiliates'] = array(
    'title' => 'Affiliates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_resellers_overview_form'),
    'access arguments' => array('hpbx view reseller'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.reseller.inc',
  );
  $items['hpbx/affiliate/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_reseller_edit_form', 2),
    'access arguments' => array('hpbx edit reseller'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.reseller.inc',
  );
  $items['hpbx/affiliate/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_reseller_edit_form'),
    'access arguments' => array('hpbx edit own reseller'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'includes/hpbx.reseller.inc',
  );
  $items['hpbx/users'] = array(
    'title' => 'Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_users_overview_form'),
    'access arguments' => array('hpbx edit own reseller users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.user.inc',
  );
  $items['hpbx/user/add'] = array(
    'title' => 'Create affiliate user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_users_edit_form'),
    'access arguments' => array('hpbx edit own reseller users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.user.inc',
  );
  $items['hpbx/user/%/edit'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_users_edit_form', NULL, 2),
    'access arguments' => array('hpbx edit own reseller users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.user.inc',
  );

  $items['hpbx/user/%/delete'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'hpbx_users_delete_page',
    'page arguments' => array(NULL, 2),
    'access arguments' => array('hpbx edit own reseller users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.user.inc',
  );

  $items['hpbx/affiliate/%/users'] = array(
    'title' => 'Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_users_overview_form', 2),
    'access arguments' => array('hpbx view administrator user'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.user.inc',
  );
  $items['hpbx/affiliate/%/cc'] = array(
    'title' => 'Clear cache',
    'page callback' => 'hpbx_reseller_clear_cache',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit reseller'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.reseller.inc',
  );

  $items['hpbx/affiliate/%/user/add'] = array(
    'title' => 'Create affiliate user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_users_edit_form', 2),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.user.inc',
  );
  $items['hpbx/affiliate/%/user/%/edit'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_users_edit_form', 2, 4),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.user.inc',
  );
  $items['hpbx/affiliate/%/user/%/delete'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'hpbx_users_delete_page',
    'page arguments' => array(2, 4),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.user.inc',
  );
  $items['hpbx/affiliate/%/customers'] = array(
    'title' => 'Customers',
    'page callback' => 'hpbx_customers_overview_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx view reseller customer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/customers'] = array(
    'title' => 'Customers',
    'page callback' => 'hpbx_customers_overview_page',
    'access arguments' => array('hpbx view customer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/customer/add'] = array(
    'title' => 'Create',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_customer_edit_form'),
    'access arguments' => array('hpbx add customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/customer/location'] = array(
    'title' => 'location',
    'page callback' => 'hpbx_customer_location_callback',
    'access arguments' => array('hpbx add customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/affiliate/%/customer/add'] = array(
    'title' => 'Create',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_customer_edit_form', NULL, 2),
    'access arguments' => array('hpbx add reseller customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/bp/add'] = array(
    'title' => 'Create Business Partner',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_business_partner_edit_form'),
    'access arguments' => array('hpbx add business partner customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bp/add'] = array(
    'title' => 'Create Business Partner',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_business_partner_edit_form', 2),
    'access arguments' => array('hpbx add reseller customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bp/%/delete'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'hpbx_bp_delete_page',
    'page arguments' => array(2, 4),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/%/delete'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'hpbx_bp_delete_page',
    'page arguments' => array(NULL, 2),
    'access arguments' => array('hpbx delete business partner'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/user/%/bp/%/delete'] = array(
    'title' => 'Edit affiliate user',
    'page callback' => 'hpbx_bp_user_delete_page',
    'page arguments' => array(2, 4,6),
    'access arguments' => array('hpbx delete business partner'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bps'] = array(
    'title' => 'Business Partners',
    'page callback' => 'hpbx_bp_overview_page',
    'access callback' => 'hpbx_business_partner_access_callback',
    //'access arguments' => array('hpbx view business partners'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bps'] = array(
    'title' => 'Business Partners',
    'page callback' => 'hpbx_bp_overview_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx view reseller'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bp/%/users'] = array(
    'title' => 'Business Partner Users',
    'page callback' => 'hpbx_bp_users_overview_page',
    'page arguments' => array(2,4),
    'access arguments' => array('hpbx view reseller customer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/%/users'] = array(
    'title' => 'Business Partner Users',
    'page callback' => 'hpbx_bp_users_overview_page',
    'page arguments' => array(NULL, 2),
    'access arguments' => array('hpbx edit business partner users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/users'] = array(
    'title' => 'Business Partner Users',
    'page callback' => 'hpbx_bp_users_overview_page',
    'access arguments' => array('hpbx edit own business partner users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bp/%/user/add'] = array(
    'title' => 'Create Business Partner user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_users_edit_form', 2,4),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/%/user/add'] = array(
    'title' => 'Create Business Partner user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_users_edit_form', NULL, 2),
    'access arguments' => array('hpbx edit business partner users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/user/add'] = array(
    'title' => 'Create Business Partner user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_users_edit_form'),
    'access arguments' => array('hpbx edit own business partner users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bp/%/user/%/edit'] = array(
    'title' => 'Create Business Partner user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_users_edit_form', 2,4,6),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/%/user/%/edit'] = array(
    'title' => 'Create Business Partner user ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_users_edit_form',NULL,2,4),
    'access arguments' => array('hpbx edit business partner users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/affiliate/%/bp/%/settings'] = array(
    'title' => 'Business Partner settings ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_settings_edit_form', 2,4),
    'access arguments' => array('hpbx edit administrator user'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/%/settings'] = array(
    'title' => 'Business Partner settings ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_settings_edit_form',NULL,2),
    'access arguments' => array('hpbx edit business partner settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );
  $items['hpbx/bp/settings'] = array(
    'title' => 'Business Partner settings ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_bp_settings_edit_form'),
    'access arguments' => array('hpbx edit own business partner settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.business_partner.inc',
  );

  $items['hpbx/affiliate/%/customer/location'] = array(
    'title' => 'location',
    'page callback' => 'hpbx_customer_location_callback',
    'page arguments' => array(2),
    'access arguments' => array('hpbx add reseller customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/customer/%'] = array(
    'title' => 'View',
    'page callback' => 'hpbx_customer_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit reseller customer'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/affiliate/%/customer/%'] = array(
    'title' => 'View',
    'page callback' => 'hpbx_customer_page',
    'page arguments' => array(4, 2),
    'access arguments' => array('hpbx edit reseller customer'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/customer'] = array(
    'title' => 'PBX Settings',
    'page callback' => 'hpbx_customer_own_settings_page',
    'access arguments' => array('hpbx edit own customer settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/music-on-hold'] = array(
    'title' => 'Music on Hold',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_musiconhold_edit_form'),
    'access arguments' => array('hpbx edit own customer settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.musiconhold.inc',
  );
  $items['hpbx/default-forward'] = array(
    'title' => 'Default forward',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_defaultforward_edit_form'),
    'access arguments' => array('hpbx edit own customer settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.defaultforward.inc',
  );
  $items['hpbx/customer/%/view'] = array(
    'title' => 'View',
    'access arguments' => array('hpbx edit customer'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/affiliate/%/customer/%/view'] = array(
    'title' => 'View',
    'access arguments' => array('hpbx edit reseller customer'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/pbxdevices'] = array(
    'title' => 'Devices',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_pbxdevices_overview_form'),
    'access arguments' => array('hpbx view pbxdevice'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevicemodel/%'] = array(
    'title' => 'PBX Device Model JSON callback',
    'page callback' => 'hpbx_pbxdevice_model_json_callback',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevicemodelimage/%'] = array(
    'title' => 'PBX Device Model Image',
    'page callback' => 'hpbx_pbxdevice_model_image_callback',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );

  $items['hpbx/pbxdevice/add'] = array(
    'title' => 'Devices',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_pbxdevice_edit_form'),
    'access arguments' => array('hpbx edit pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevice/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_pbxdevice_edit_form', 2),
    'access arguments' => array('hpbx edit pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevice/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_pbxdevice_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx delete pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevice/sync/callback'] = array(
    'page callback' => 'hpbx_pbxdevice_sync_log_callback',
    'access arguments' => array('hpbx sync pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevice/%/sync'] = array(
    'title' => 'Associate device',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_pbxdevice_sync_form', 2),
    'access arguments' => array('hpbx sync pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevice/%/sync/failed'] = array(
    'title' => 'Device failed to be associated',
    'page callback' => 'hpbx_pbxdevice_sync_failed_page',
    'access arguments' => array('hpbx sync pbxdevice'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/pbxdevice/%/sync/success'] = array(
    'title' => 'Device successfully associated',
    'page callback' => 'hpbx_pbxdevice_sync_success_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx sync pbxdevice'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.pbxdevice.inc',
  );
  $items['hpbx/audiorecording/%'] = array(
    'title' => 'Play',
    'page callback' => 'hpbx_audio_play',
    'page arguments' => array(2),
    'access arguments' => array('hpbx edit audio'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.audio.inc',
  );
  $items['hpbx/customer/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_customer_edit_form', 2),
    'access arguments' => array('hpbx edit customer'),
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/affiliate/%/customer/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_customer_edit_form', 4, 2),
    'access arguments' => array('hpbx edit reseller customer'),
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/customer/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_customer_delete_page',
    'page arguments' => array(2),
    'access arguments' => array('hpbx delete customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/affiliate/%/customer/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'hpbx_customer_delete_page',
    'page arguments' => array(4, 2),
    'access arguments' => array('hpbx delete reseller customer'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.customer.inc',
  );
  $items['hpbx/subscribers'] = array(
    'title' => 'Subscribers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_subscribers_overview_form'),
    'access arguments' => array('hpbx view subscriber'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.subscriber.inc',
  );

  $items['hpbx/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'hpbx_subscriber_own_settings_page',
    'access arguments' => array('hpbx edit own subscriber settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hpbx.subscriber.inc',
  );
  $items['hpbx/subscriber/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_subscriber_edit_form', 2),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.subscriber.inc',
  );
  $items['hpbx/subscriber/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_subscriber_edit_form'),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.subscriber.inc',
  );
  $items['hpbx/wizard/employee'] = array(
    'title' => 'Start wizard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_wizard_employee_form'),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'includes/hpbx.wizard.inc',
  );
  $items['hpbx/wizard/callback/subscriber/submit'] = array(
    'title' => 'Wizard',
    'page callback' => 'hpbx_wizard_subscriber_submit',
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.wizard.inc',
  );
  $items['hpbx/wizard/callback/device/submit'] = array(
    'title' => 'Wizard',
    'page callback' => 'hpbx_wizard_device_submit',
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.wizard.inc',
  );
  $items['hpbx/wizard/callback/device/submit/failed'] = array(
    'title' => 'Wizard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_wizard_employee_form'),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.wizard.inc',
  );
  $items['hpbx/wizard/callback/device/submit/success'] = array(
    'title' => 'Wizard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_wizard_employee_form'),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.wizard.inc',
  );
  $items['hpbx/subscriber/bulk'] = array(
    'title' => 'Bulk import',
    'page callback' => 'hpbx_subscriber_bulk_page',
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'includes/hpbx.subscriber.bulk.inc',
  );
  $items['hpbx/subscriber/bulk/template'] = array(
    'title' => 'Bulk',
    'page callback' => 'hpbx_subscriber_bulk_template_download',
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.subscriber.bulk.inc',
  );
  $items['hpbx/subscriber/bulk/submit'] = array(
    'title' => 'Bulk',
    'page callback' => 'hpbx_subscriber_bulk_submit',
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.subscriber.bulk.inc',
  );
  $items['hpbx/subscriber/add'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_subscriber_edit_form'),
    'access arguments' => array('hpbx edit subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.subscriber.inc',
  );
  $items['hpbx/subscriber/%/delete'] = array(
    'title' => 'Edit',
    'page callback' => 'hpbx_subscriber_delete_page',
    'page arguments' => array(2, 4),
    'access arguments' => array('hpbx delete subscriber'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.subscriber.inc',
  );
  $items['hpbx/help/url/save'] = array(
    'title' => 'Save url',
    'access arguments' => array('hpbx basic'),
    'page callback' => 'hpbx_help_url_submit',
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/help/count'] = array(
    'title' => 'Save url',
    'access arguments' => array('hpbx basic'),
    'page callback' => 'hpbx_help_article_counter_callback',
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/help/loader.html'] = array(
    'title' => 'Help Loader',
    'access arguments' => array('hpbx basic'),
    'page callback' => 'hpbx_help_loader',
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/help'] = array(
    'title' => 'Help',
    'access arguments' => array('hpbx basic'),
    'page callback' => 'hpbx_help_page',
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/help/node/%node/replicate'] = array(
    'title' => 'Help replicate',
    'access callback' => 'hpbx_help_node_replicate_access_callback',
    'page callback' => 'hpbx_help_node_replicate_callback',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/help/sitemap'] = array(
    'title' => 'Sitemap',
    'access callback' => 'hpbx_help_node_replicate_access_callback',
    'page callback' => 'hpbx_help_sitemap_page',
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/import'] = array(
    'title' => 'Help node import',
    'access arguments' => array('hpbx import help'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_help_node_create_form'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.help.inc',
  );
  $items['hpbx/sipwise/scripts'] = array(
    'title' => t('Sipwise Scripts'),
    'access arguments' => array('hpbx view reseller'),
	'page callback' => 'drupal_get_form',
    'page arguments' => array('hpbx_sipwise_script_form'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.scripts.inc',
  );
  $items['hpbx/stretto/group'] = array(
    'title' => t('Stretto'),
    'page callback' => 'hpbx_get_stretto_profiles_callback',
    'access arguments' => array('hpbx view reseller'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/hpbx.stretto.inc',
  );
  $items['hpbx/compare/db/ldap'] = array(
    'title' => 'TEST',
    'page callback' => 'hpbx_test_comp_db_ldap',
    // 'page arguments' => array('hpbx_test_comp_db_ldap'),
    'access arguments' => array('hpbx view reseller'),
    'file' => 'includes/hpbx.test.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/*
 * Enter description here ...
 *
 * @param string $username
*/
function ccs_users_get_user($username) {
  require_once(drupal_get_path('module', 'ccs') . '/LdapCCS.class.php');
  $ldap_server = ccs_ldap_get_valid_server();

  $ldap_result = $ldap_server->connect();
  ccs_ldap_admin_bind($ldap_server);
  ldap_set_option($ldap_server->connection, LDAP_OPT_PROTOCOL_VERSION, 3);
  $attributes = array('samaccountname', 'sn', 'givenname', 'memberof', 'mail');

  return ccs_ldap_server_search_wrapper($ldap_server, $ldap_server->user_attr. '='. $username, 'DC=A, DC=local', $attributes);
}


function hpbx_users_preg_match_role($string, $user = NULL) {

  // No user object passed? Use currently logged in user object.
  if ($user==NULL) {
    global $user;
  }

  // Compare all roles.

  if (isset($user->roles)) {
    foreach ($user->roles as $role) {
      if (preg_match('/^'. $string .'/', $role)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * @return bool
 Added for #1257 - BUILD: Softclient Desktop Distribution page
 */
function hpbx_download_access_callback() {

  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/Sipwise.class.php');
  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseEntity.class.php');
  include_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseReseller.class.php');
  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseCustomer.class.php');
  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseSubscriber.class.php');

  global $user, $ActiveReseller;

  // Admin always has access.
  if ($user->uid == 1) return TRUE;

  if (is_null($ActiveReseller) && !empty($user->data['sipwise']['reseller_id'])) {
    sipwise_api_activate_reseller($user->data['sipwise']['reseller_id']);
  }

  if (is_null($ActiveReseller)) return FALSE;



  if (!user_access('hpbx basic') || empty($user->data['sipwise']['subscriber_id']) || empty($user->data['sipwise']['customer_id'])) {
    return FALSE;
  }

  // Try to get the active subscriber.
  if ($Subscriber = hpbx_get_active_subscriber()) {

    $SubscriberPreferences = SipwiseEntity::load('subscriberpreferences', $Subscriber->id);
    $profile_id = $Subscriber->profile_id;

    // The fax page will be accessible for the Customer Administrator.

    if(($ActiveReseller->_settings->profile_allowed_features->$profile_id->mobile_softclient == TRUE) || ($ActiveReseller->_settings->profile_allowed_features->$profile_id->desktop_softclient == TRUE)){
      return TRUE;
    }
    else {
      return false;
    }
  }

  return FALSE;
}

function hpbx_business_partner_access_callback() {
  global $user, $ActiveReseller;

  // Admin always has access.
  if ($user->uid == 1) return TRUE;

  if (is_null($ActiveReseller) && !empty($user->data['sipwise']['reseller_id'])) {
    sipwise_api_activate_reseller($user->data['sipwise']['reseller_id']);
  }

  if (is_null($ActiveReseller)) return FALSE;

  if (user_access('hpbx view business partners') && !empty($ActiveReseller->_settings->enable_business_partners)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * @return bool
 */
function hpbx_fax_access_callback() {

  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/Sipwise.class.php');
  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseEntity.class.php');
  include_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseReseller.class.php');
  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseCustomer.class.php');
  require_once(drupal_get_path('module', 'sipwise_api') .'/includes/SipwiseSubscriber.class.php');

  global $user, $ActiveReseller;

  if (is_null($ActiveReseller) && !empty($user->data['sipwise']['reseller_id'])) {
    sipwise_api_activate_reseller($user->data['sipwise']['reseller_id']);
  }

  if (is_null($ActiveReseller)) return FALSE;

  // Admin always has access.
  if ($user->uid == 1) return TRUE;

  // Verify if the fax profile id is set.
  if (isset($ActiveReseller) && empty($ActiveReseller->_settings->fax_subscriber_profile_id)) return FALSE;

  if (!user_access('hpbx basic') || empty($user->data['sipwise']['subscriber_id']) || empty($user->data['sipwise']['customer_id'])) {
    return FALSE;
  }

  // Try to get the active subscriber.
  if ($Subscriber = hpbx_get_active_subscriber()) {

    // The fax page will be accessible for the Customer Administrator.
    if (user_access('hpbx view fax2email')) {
      return TRUE;
    }

    // For non-admin users: if the logged in user is allowed to use SendFax
    // (according to his profile) AND is a member of the Fax2email subscriber,
    // the fax page will be accessible. Otherwise, the Fax page shall not be
    // selectable in the menu.
    if ($ActiveReseller && hpbx_attribute_allowed('sendfax', $Subscriber->profile_id)) {

      if ($Customer = hpbx_get_active_customer()) {
        foreach ($Customer->get_fax_subscribers() as $Subscriber2) {
          if ($Subscriber2->is_member($Subscriber)) return TRUE;
        }
      }
    }
  }

  return FALSE;
}

function hpbx_help_node_replicate_access_callback() {
  global $user;
  $account = $user;
  if (!empty($_SESSION['ccs']['hpbx']['masquerading_from'])) {
    $account = user_load($_SESSION['ccs']['hpbx']['masquerading_from']);
  }
  return user_access('edit any hpbx_help_article content', $account);
}

/**
 * Implements hook_js_alter().
 *
 *  Make summary always expanded for field of "Long text and summary" type.
 */
function hpbx_js_alter(&$javascript) {
  $js_path = drupal_get_path('module', 'text') . '/text.js';

  if (isset($javascript[$js_path])) {
    unset($javascript[$js_path]);
  }
}

function hpbx_logout() {

  // Un-masquerade.
  if (!empty($_SESSION['ccs']['hpbx']['masquerading_from'])) {
    module_load_include('inc', 'hpbx', 'includes/hpbx.masquerade');
    hpbx_masquerade_return();
  }
  else {

    module_load_include('pages.inc', 'user');
    user_logout();
  }
}

/**
 * @param string $name
 * @param int $length
 * @return string
 */
function hpbx_truncate_name_element($name = '', $length = 40) {

  if (!empty($name)) {
    return truncate_utf8(check_plain($name), $length, FALSE, TRUE);
  }
  return  '';
}

function hpbx_mail_test() {

  drupal_set_title(t('Welcome'));
  $params = $message = array();
  $params = array();
  $params['firstname'] = 'Roeland';
  $params['lastname'] = 'Graat';
  $params['company'] = 'Test Company';
  $params['lgi_product_name'] = 'My BIZ';
  $params['profile_set_name'] = 'SME';
  $params['lgi_brand_name'] = 'UPC Business';
  $params['account'] = user_load(1558);

  global $language ;

  drupal_mail("hpbx", "customer_administrator_welcome", 'roeland.graat@gmail.com', $language, $params);
  //drupal_mail("hpbx", "customer_subscriber_welcome", 'roeland.graat@gmail.com', $language, $params);

  die();
}

/**
 * Implementation of hook_mail_alter().
 *
 * @param array $message
 */
function hpbx_mail_alter(&$message) {

  if (!empty($message['params']['account']->data['sipwise']['reseller_id'])) {
    sipwise_api_activate_reseller($message['params']['account']->data['sipwise']['reseller_id']);

    global $ActiveReseller;

    if (!empty($ActiveReseller->_settings->mail_from_address)) {
      $message['headers']['Reply-To'] =
      $message['headers']['From'] =
      $message['from'] = $ActiveReseller->_settings->mail_from_address;

      $message['headers']['Return-Path'] =
      $message['headers']['Sender'] = 'no-reply@h-pbx.eu';
    }
  }
}

/**
 * @return array
 */
function hpbx_get_resellers() {
  global $conf;

  $orig_reseller_id = sipwise_api_get_active_reseller();

  $resellers = array();
  foreach (array_keys($conf['sipwise']) as $reseller_id) {

    if (is_numeric($reseller_id)) {
      sipwise_api_activate_reseller($reseller_id);

      // Get all customers from all multiple endpoints.
      foreach (sipwise_api_get_all('resellers', array(), TRUE, FALSE) as $Reseller) {

        if (!($Reseller->status == 'terminated' || ($reseller_id != 1 && $Reseller->id == 1))) {
          $resellers[$Reseller->id] = $Reseller;
        }
      }
    }
  }

  if (!empty($orig_reseller_id) && is_numeric($orig_reseller_id)) {
    // Set default reseller active again.
    sipwise_api_activate_reseller($orig_reseller_id);
  }
  return $resellers;
}

/**
 *
 * @param SipwiseSoundFile $SoundFile
 *   Source soundfile.
 *
 * @param SipwiseEntity $Soundset
 *   Destination soundset.
 *
 * @return boolean|SipwiseSoundFile
 */
function hpbx_soundfile_copy(SipwiseSoundFile $SoundFile, SipwiseEntity $Soundset, $handle = NULL) {


  try {
    $dest_SoundFile = new SipwiseSoundFile();

    if (is_null($handle)) {
      $dest_SoundFile->handle = $SoundFile->handle;
    }
    else {
      $dest_SoundFile->handle = $handle;
    }
    $dest_SoundFile->set_id = $Soundset->id;
    $dest_SoundFile->filename = $SoundFile->filename;
    $dest_SoundFile->loopplay = $SoundFile->loopplay;
    $dest_SoundFile->recording = SipwiseEntity::load('soundfilerecordings', $SoundFile->id);
    watchdog(__function__, var_export($dest_SoundFile, TRUE));

    $dest_SoundFile->save();
  }
  catch (Exception $e) {
    watchdog(__FUNCTION__, $e->getMessage());
    return FALSE;
  }
  return $dest_SoundFile;
}

/**
 *
 * @param integer $customer_id
 * @param string $soundset_name
 * @param mixed $soundfile_handle
 *
 * @return array
 */
function hpbx_get_soundfiles_from_soundset($customer_id, $soundset_name, $soundfile_handle) {

  $soundfiles = array();

  if (!empty($soundset_name) && $SoundSet = hpbx_get_soundset_on_name($soundset_name, $customer_id)) {
    foreach (sipwise_api_get_all('soundfiles', array('set_id' => $SoundSet->id)) as $SoundFile) {

      if (is_array($soundfile_handle) && in_array($SoundFile->handle, $soundfile_handle)) {
        $soundfiles[$SoundFile->handle] = $SoundFile;
      }
      elseif (is_string($soundfile_handle) && $soundfile_handle == $SoundFile->handle) {
        $soundfiles[$SoundFile->handle] = $SoundFile;
      }
    }
  }
  return $soundfiles;
}

/**
 *
 * @param string $soundset_name
 * @param integer $customer_id
 *
 * @return SipwiseEntity
 */
function hpbx_get_soundset_on_name($soundset_name, $customer_id) {

  $query = array();
  $query['customer_id'] = $customer_id;
  $query['name'] = $soundset_name;

  if ($soundsets = sipwise_api_get_all('soundsets', $query)) {

    foreach ($soundsets as $SoundSet) {
      return $SoundSet;
    }
  }

  return FALSE;
}

/**
 *
 * @param SipwiseCustomer $Customer
 * @return array
 */
function hpbx_get_extensions($Customer) {

  $extensions = array();

  foreach (sipwise_api_get_all('subscribers', array('customer_id' => $Customer->id)) as $Subscriber) {
    if (isset($Subscriber->pbx_extension)) {
      $extensions[$Subscriber->id] = $Subscriber->pbx_extension;
    }
  }

  return $extensions;
}


function hpbx_page() {

  return '';
}

/**
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array;
 */
function hpbx_wizard_form($form, $form_state) {

  $form = array();
  $form['test'] = array('#type' => 'textfield', '#default' => 'blaat');
  $form['actions'] = array();
  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#prefix' => '<span class="submit-button">',
      '#suffix' => '</span>',
  );
  return $form;
}

/**
 * Helper function to set the element to read only.
 *
 * @param array
 */
function hpbx_set_read_only(&$element) {

  if (isset($element['#type']) && in_array($element['#type'],
      array('checkbox', 'select', 'textfield', 'tableselect', 'textarea'))) {

    if (isset($element['#default_value']) &&
      isset($element['#options'][$element['#default_value']]) &&
      is_scalar($element['#options'][$element['#default_value']])) {

      // Set the option human readable name.
      $element['#markup'] = $element['#options'][$element['#default_value']];
    }
    elseif(isset($element['#default_value'])) {

      if (is_bool($element['#default_value'])) {
        $element['#markup'] = $element['#default_value'] ? t('Yes') : t('No');
      }
      else {
        $element['#markup'] = str_replace(PHP_EOL, '</br>', $element['#default_value']);
      }
    }

    // Set type to item.
    $element['#type'] = 'item';

    // Unset the default value, we don't need this item any more.
    unset($element['#default_value']);

    // Unset the default value, we don't need this item any more.
    unset($element['#description']);
  }

  // Walk all children item, for example in case of a fieldset.
  foreach (element_children($element) as $name) {
    hpbx_set_read_only($element[$name]);
  }
  return;
}

/**
 * @param $table
 * @param $numberranges
 * @param $allowed_clis
 * @param SipwiseCustomer $Customer
 * @param bool $exclude_in_use
 * @param bool $pilot_force_inbound_calls_to_peer
 * @return array
 */
function hpbx_get_alias_numbers_from_rows($table, &$numberranges, &$allowed_clis,
  $Customer, $exclude_in_use = TRUE, &$pilot_force_inbound_calls_to_peer = FALSE) {

  global $ActiveReseller;
  $allowed_clis = array();
  $alias_numbers = array();
  $numberranges = array();

  $in_use = array();
  if ($exclude_in_use) {

    $subscribers = $Customer->get_subscribers(FALSE, TRUE, TRUE, TRUE, TRUE);

    foreach ($subscribers as $Subscriber) {
      if (isset($Subscriber->alias_numbers)) {
        $in_use[] = $Subscriber->get_alias_number(HPBX_NUMBER_FORMAT_SN);
      }
    }
  }

  foreach ($table as $id => $values) {

    if (!empty($values['area']['data']) && !empty($values['start']['data']) &&
      !empty($values['length']['data'])) {

      $ActiveReseller->remove_national_digits($values['area']['data']);
      if (!$values['inported']['data']) {
        $pilot_force_inbound_calls_to_peer = TRUE;
      }
      $range = array(
        'inported' => $values['inported']['data'],
        'area' => $values['area']['data'],
        'start' => trim($values['start']['data']),
        'length' => (int)$values['length']['data'],
        'prefix' => $values['prefix']['data']
      );
      $numberranges[] = (object)$range;

      // Add prefix 1, to prevent leading zero's to be stripped of while
      // casting to integer.
      $end = $start = (int)'1'. $values['start']['data'];
      $end += (int)$values['length']['data'];

      for ($i=$start;$i<$end;$i++) {
        $an = new stdClass();
        $an->cc = $ActiveReseller->_settings->country_code;
        $an->ac = trim($values['area']['data']);
        $an->sn = substr($i, 1);

        if (!$exclude_in_use || !in_array($an->ac.$an->sn, $in_use)) {
          $alias_numbers[$an->ac.$an->sn] = $an;
        }

        if ($values['inported']['data']) {
          $allowed_clis[] = $an->cc . $an->ac . $an->sn;
        }
      }
    }
  }
  return array_values($alias_numbers);
}

function hpbx_get_blocks_from_alias_numbers($alias_numbers) {
  $blocks = array();
  return $blocks;
}

function hpbx_speeddials_callback($form, $form_state) {
  return $form['speeddials']['table'];
}

function hpbx_numberranges_callback($form, $form_state) {
  return $form['general']['numberranges']['table'];
}

function hpbx_cfu_times_callback($form, $form_state) {
  return $form['cfu_times']['table'];
}

function hpbx_cfna_times_callback($form, $form_state) {
  return $form['cfna_times']['table'];
}

function hpbx_cfb_times_callback($form, $form_state) {
  return $form['cfb_times']['table'];
}

function hpbx_cft_times_callback($form, $form_state) {
  return $form['cft_times']['table'];
}


/**
 * Helper function to format the passed identifier.
 *
 * @param string $identifier
 * @return string
 */
function hpbx_get_mac_address_from_identifier($identifier) {
  return implode(':', str_split(strtoupper(preg_replace('/\W/', '', $identifier)), 2));
}

function hpbx_get_active_subscriber($subscriber_id = NULL) {
  global $user;

  $id = FALSE;

  // If a customer_id is passed, verify if the user exists.
  if ($subscriber_id) {
    $id = (int)$subscriber_id;
  }
  elseif (!empty($user->data['sipwise']['subscriber_id'])) {
    $id = (int)$user->data['sipwise']['subscriber_id'];
  }

  if ($id && $Subscriber = SipwiseEntity::load('subscribers', $id, FALSE, FALSE)) {
    return $Subscriber;
  }

  drupal_not_found();
  exit();
}

/**
 * Implementation of hook_preprocess_html().
 *
 * @param &$vars
 */
function hpbx_preprocess_html(&$vars) {
  global $_domain;

  $pl_domains = array(
    'vpabx.biznes.upc.pl',
    'pl-dev.h-pbx.eu',
    'pl-lab.h-pbx.eu'
  );
  if (in_array($_domain['subdomain'], $pl_domains)) {

    $vars['attributes_array']['data-country'] = 'pl';
  }
}

/**
 * @param null $customer_id
 * @param bool $active
 *
 * @return SipwiseCustomer
 */
function hpbx_get_active_customer($customer_id = NULL, $active = TRUE) {
  global $user;

  $id = FALSE;

  // If a customer_id is passed, verify if the user exists.
  if ($customer_id) {
    $id = (int)$customer_id;
  }
  elseif (!empty($user->data['sipwise']['customer_id'])) {
    $id = (int)$user->data['sipwise']['customer_id'];
  }

  if ($id && $Customer = SipwiseEntity::load('customers', $id)) {
    if ($active == TRUE && $Customer->status=='terminated') {

      drupal_access_denied();
      die();
    }
    else {
      return $Customer;
    }
  }
  watchdog('sipwise', 'Could not get active customer');
  drupal_not_found();
  exit();
}

function hpbx_table_customer_select_callback($form, $form_state) {
  return $form['table'];
}

/**
 *
 * @param array $values
 * @param string $type
 * @param array $fields
 */
function hpbx_process_submit($values, $type, $fields, $form_elements) {

  try {

    // Update.
    if (!empty($values['id'])) {

      // Load existing entity.
      $Entity = SipwiseEntity::load($type, $values['id']);
    }
    else {

      // Create entity.
      $Entity = SipwiseEntity::create($type);
    }

    // Walk all fields.
    foreach ($fields as $field) {

      // Verify if the value isset (also in case of null).
      if (isset($values[$field]) && (is_null($values[$field]) || isset($values[$field]))) {

        if ($values[$field] == 'API needs fix') {
          continue;
        }

        // Verify if the value needs to be converted to a bool.
        if (isset($form_elements[$field]['value']['#type']) &&
            $form_elements[$field]['value']['#type'] == 'checkbox') {

          // Set value.
          $Entity->$field = (bool)$values[$field];
        }

        // Verify the value is numeric.
        elseif (is_numeric($values[$field])) {

          // Set value.
          $Entity->$field = (int)$values[$field];
        }
        elseif (is_string($values[$field]) && empty($values[$field])) {
          // Do nothing.
        }
        else {

          // Set value.
          $Entity->$field = $values[$field];
        }
      }
    }

    // Save the entity.
    $Entity->save();
    return $Entity;
  }
  catch (Exception $e) {

    // Failed to create customer.
    drupal_set_message(t('Failed to update '. $type), 'error');

    drupal_set_message(t($e->getMessage()), 'error');
    return FALSE;
  }

  return TRUE;
}


function hpbx_build_tableselect($types, $fields, $conditions = NULL) {

  $rows = array();

  if (!is_array($types)) {
    $types = array($types);
  }

  // Walk all types.
  foreach ($types as $type) {

    // Get all entries for the specified type.
    foreach (sipwise_api_get_all($type) as $Obj) {

      // In case conditions are passed verify the entry does met the condition.
      if (!$conditions || $Obj->{$conditions['field']} == $conditions['value']) {

        // Walk each column required.
        foreach ($fields as $key => $value) {

          // In case of an array retrieve the referenced entity.
          if (is_array($value) && !empty($value['type']) &&
            !empty($value['id_field']) && isset($value['ref_field'])) {

            // Retrieve the referenced entity.
            $ref_obj = SipwiseEntity::load($value['type'], $Obj->{$value['id_field']});

            // Set cell value.
            $path = 'hpbx/'. substr($value['type'],0, -1) . '/'. $Obj->{$value['id_field']};
            $rows[$Obj->id][$key] = l($ref_obj->{$value['ref_field']}, $path);
          }

          // Verify if the referenced value was set.
          if (!isset($rows[$Obj->id][$key])) {

            // Set cell value.
            $rows[$Obj->id][$key] = !empty($Obj->$key) ? $Obj->$key : '';
          }
        }
      }
    }
  }

  // Set actual header title for complex fields.
  foreach ($fields as $key => &$value) {

    // Verify if the value is an array.
    if (is_array($value)) {

      // Set header.
      $value = $value['ref_header'];
    }
  }

  return array(
      '#type' => 'tableselect',
      '#multiple' => FALSE,
      '#options' => $rows,
      '#header' =>  $fields,
  );
}

/**
 * Implementation of hook_node_access().
 */
function hpbx_node_access($node, $op, $account) {

  $type = is_string($node) ? $node : $node->type;

  // In case a maquerading user is visiting a help* node, verify the
  // rights of the masquerading user.
  if (!empty($_SESSION['ccs']['hpbx']['masquerading_from'])) {
    $account = user_load($_SESSION['ccs']['hpbx']['masquerading_from']);
  }

  if ($op == 'delete' && $type == 'hpbx_help_article' &&
    user_access('delete any hpbx_help_article content', $account)) {

    if (!user_access('edit any hpbx_help_article content', $account) &&
      isset($account->data['sipwise']['reseller_id']) &&
      $node->field_hpbx_reseller_id[LANGUAGE_NONE][0]['value']!=$account->data['sipwise']['reseller_id']) {

      // Deny in case the logged in user his/her reseller_id is not equal
      // to the article reseller_id.
      return array(NODE_ACCESS_DENY);
    }

    // Allow for LG and in case the logged in user his/her reseller_id is
    // equal to the article reseller_id.
    return array(NODE_ACCESS_ALLOW);
  }
  elseif ($op == 'view' && $type == 'hpbx_help_article') {

    if (isset($account->data['sipwise']['reseller_id']) &&
      $node->field_hpbx_reseller_id[LANGUAGE_NONE][0]['value']!=$account->data['sipwise']['reseller_id']) {

      // Deny in case the logged in user his/her reseller_id is not equal to
      // the article reseller_id.
      return array(NODE_ACCESS_DENY);
    }


    return array(NODE_ACCESS_ALLOW);
  }
  elseif ($op == 'create' && $type == 'hpbx_help_article' &&
    user_access('edit any hpbx_help_article content', $account)) {


    return array(NODE_ACCESS_ALLOW);
  }
  elseif ($op == 'update' && $type == 'hpbx_help_article' &&
    user_access('edit any hpbx_help_article content', $account)) {

    if (isset($account->data['sipwise']['reseller_id']) &&
      $node->field_hpbx_reseller_id[LANGUAGE_NONE][0]['value']!=$account->data['sipwise']['reseller_id']) {

      // Deny in case the logged in user his/her reseller_id is not equal to
      // the article reseller_id.
      return array(NODE_ACCESS_DENY);
    }

    // Allow for LG and in case the logged in user his/her reseller_id is equal
    // to the article reseller_id.
    return array(NODE_ACCESS_ALLOW);
  }
}

/**
 */
function hpbx_api_times_inverse(&$times_ranges) {

  $empty_days = 0;
  foreach (element_children($times_ranges) as $wday) {
    if (is_numeric($wday)){
      if (is_array($times_ranges[$wday]['ranges']) &&
        array_key_exists('#default_value', $times_ranges[$wday]['ranges'])) {

        $ranges = $times_ranges[$wday]['ranges']['#default_value'];
      }
      else {
        $ranges = $times_ranges[$wday]['ranges'];
      }

      if (!empty($ranges) && json_decode(str_replace("'", '"', $ranges))) {
        $ranges = json_decode(str_replace("'", '"', $ranges));

        $inverse = array();
        $inverse[] = date('l, F d Y') . ' 12:00 AM';

        foreach ($ranges as $range) {
          $from = strtotime($range[0]);
          $to = strtotime($range[1]);

          if ($to > $from) {
            $inverse[] = date('l, F d Y g:i A', strtotime('-1 min, ', $from));
            $inverse[] = date('l, F d Y g:i A', strtotime('+1 min, ', $to));
          }
          else {

          }
        }

        $inverse[] = date('l, F d Y') . ' 11:59 PM';

        // Make pairs of the from-to timesets.
        $chunks = array_chunk($inverse, 2);

        // Remove pair if the to time is earlier of equal to the from time.
        $cnt = count($chunks);
        for ($i=0;$i<$cnt;$i++) {
          if (strtotime($chunks[$i][1]) <= strtotime($chunks[$i][0])) {
            unset($chunks[$i]);
          }
        }

        // Encode to json.
        $ranges = json_encode(array_values($chunks));
      }
      else {
        $empty_days++;
        // Complete day is a range.
        $ranges = json_encode(array(array(date('l, F d Y') . ' 12:00 AM', date('l, F d Y'). ' 11:59 PM')));
      }

      if (is_array($times_ranges[$wday]['ranges']) &&
        array_key_exists('#default_value', $times_ranges[$wday]['ranges'])) {

        $times_ranges[$wday]['ranges']['#default_value'] = $ranges;
      }
      else {
        $times_ranges[$wday]['ranges'] = $ranges;
      }
    }
  }

  // In case all days are empty we won't set the timeranges at all; So no
  // inverse action is applied.
  if ($empty_days == 7) {
    foreach (element_children($times_ranges) as $wday) {
      if (is_numeric($wday)) {
        if (is_array($times_ranges[$wday]['ranges']) &&
          array_key_exists('#default_value', $times_ranges[$wday]['ranges'])) {

          $times_ranges[$wday]['ranges']['#default_value'] = json_encode(array());
        }
        else {
          $times_ranges[$wday]['ranges'] = json_encode(array());
        }
      }
    }
  }

  return;
}

function hpbx_time_ranges_convert_datetime($time_ranges, $convert_type) {

  //
  $wday_mapping = array(
    1 => 'Sunday', 2=> 'Monday', 3 => 'Tuesday',
    4 => 'Wednesday', 5=> 'Thursday', 6 => 'Friday', 7 => 'Saturday'
  );


  $time_ranges_new = array();

  foreach ($time_ranges as $wday => $times) {

    if (is_numeric($wday)) {

      $json = json_decode(str_replace("'", '"', $times['ranges']));

      if (!empty($times['ranges']) && count($json) && $times['ranges'] = $json) {

        foreach ($times['ranges'] as $range) {
          $minute_extracted = FALSE;

          //
          $from = strtotime($range[0]);
          $to = strtotime($range[1]);

          // Convert to correct day of week, based on $wday.
          $dow_text = $wday_mapping[$wday];
          $from = strtotime('next '.$dow_text. ' '. date('H:i', $from));
          $to = $to_orig = strtotime('next '.$dow_text. ' '. date('H:i', $to));

          $func = 'hpbx_convert_to_'. $convert_type .'_datetime';

          if (function_exists($func)) {
            $from = strtotime($func(date('Y-m-d H:i:s', $from)));
            $to = strtotime($func(date('Y-m-d H:i:s', $to)));
          }

          // In case the original 'to' (before conversion) is 23:59, this is done
          // because of the end of the day. We will assume  this wasn't the  user
          // his/her choise, and thus we will add 1 minute.
          if ($convert_type == 'local' && date('H:i', $to_orig) == '23:59') {
            //$to = strtotime('+1 min', $to);
          }

          // Fix for ranges where the range ends on the last minute of the day.
          // This is  fixed by  decreasing the end of the  range with 1 minute.
          if ($to == strtotime('+1 day 00:00:00', $from)) {
            //$to = strtotime('-1 min', $to);
            $minute_extracted = TRUE;
          }

          // If time range covers only one day, add it to the new ranges array.
          if (date('w', $from) == date('w', $to)) {
            // Same day; Add range to time ranges.
            $wday_n = date('w', $from) + 1;


            if (date('d', $from) >= 7) {
              $from = strtotime('-1 week', $from);
            }
            if (date('d', $to) >= 7) {
              $to = strtotime('-1 week', $to);
            }

            $time_ranges_new[$wday_n]['ranges'][$from] = array(date('l, M d, Y g:i A', $from), date('l, M d, Y g:i A', $to));
          }

          // if time range covers multiple days, break the range into multiple
          // ranges.
          else {


            // Break range into multiple ranges.

            // 1st block.
            $r_from = date('l, M d, Y g:i A', $from);
            $r_to = date('l, M d, Y g:i A', strtotime('tomorrow', $from) - 60); // extract 60 seconds from end of day.
            $wday_n = date('w', strtotime($r_from)) + 1;
            $time_ranges_new[$wday_n]['ranges'][strtotime($r_from)] = array($r_from, $r_to);

            // 2th
            // Make sure the day of the week will not exceed 1 week in the future.
            if (date('d', $to) >= 7) {
              $to = strtotime('-1 week', $to);
            }

            if ($minute_extracted) {
              // Add the previously removed minute again, as we
              // are not at the end of the day anymore (impossible with a break).
              //$to = strtotime('+1 min', $to);
            }

            $r_from = date('l, M d, Y g:i A', strtotime('today', $to));
            $r_to = date('l, M d, Y g:i A', $to);


            $wday_n = date('w', strtotime($r_from)) + 1;
            $time_ranges_new[$wday_n]['ranges'][strtotime($r_from)] = array($r_from, $r_to);
          }
        }
      }
    }
  }

  $time_ranges_sorted = array();
  // Set to current day (as is was before conversion) and add correct key.
  foreach ($time_ranges_new as $wday => &$times) {
    if (isset($times['ranges'])) {
      foreach ($times['ranges'] as $key => &$range) {
        $range[0] = date('l, M d, Y') . ' ' . date('g:i A', strtotime($range[0]));
        $range[1] = date('l, M d, Y') . ' ' . date('g:i A', strtotime($range[1]));

        $time_ranges_sorted[$wday]['ranges'][strtotime($range[0])] = $range;

      }
    }
  }

  $time_ranges_new = $time_ranges_sorted;

  // Sort ranges within same day
  foreach ($time_ranges_new as $wday => &$times) {
    if (isset($times['ranges'])) {
      ksort($times['ranges'], SORT_NUMERIC);
      $times['ranges'] = array_values($times['ranges']);
    }
  }

  // Set empty days.
  for ($wday=1;$wday<=7;$wday++) {
    if (!isset($time_ranges_new[$wday]['ranges'])) {
      $time_ranges_new[$wday]['ranges'] = array();
    }
  }

  //
  if ($convert_type == 'local') {

    // Ranges on same day with 5 min. or less distance; merge ranges.
    foreach ($time_ranges_new as $wday => &$times) {


      $prev_to = NULL;
      if (isset($times['ranges'])) {

        foreach ($times['ranges'] as $key => &$range) {
          if (!is_null($prev_to)) {

    //        var_dump('previous to: '. date('Y-m-d H:i:s', strtotime($prev_to)));

      //      var_dump('from: '. date('Y-m-d H:i:s', strtotime($range[0])));

        //    var_dump('-- diff: '. (strtotime($range[0]) - (strtotime($prev_to))));

            if ( ((strtotime($range[0]) - (strtotime($prev_to))) <= (2*60)) &&
              ((strtotime($range[0]) - (strtotime($prev_to))) >= 0)) {

          //    var_dump('--- set from to from of prev range');
              $range[0] = $time_ranges_new[$wday]['ranges'][$key-1][0];

            //  var_dump('--- remove prev range');
              unset($time_ranges_new[$wday]['ranges'][$key-1]);
            }
          }
          else {
            //var_dump('--- prev_to not set');
          }

          // Remove range where range[0] is equal to range[1].
          if ($range[0]==$range[1]) {
            //$range[1] = date('l, M d, Y') . ' ' . date('g:i A', strtotime($range[1])-60);
          }


          if (isset($range[1])) $prev_to = $range[1];

          //var_dump('--next');
        }
      }
    }
  }

  // Encode to json.
  foreach ($time_ranges_new as $wday => &$times) {
    if (isset($times['ranges'])) {
      if (count($times['ranges'])) {
        $times['ranges'] = str_replace('"', "'", json_encode(array_values($times['ranges'])));
      }
      else {
        $times['ranges'] = '[]';
      }
    }
  }

  ksort($time_ranges_new);

  return $time_ranges_new;
}

/**
 * @param array $time_ranges
 * @param bool $fill_empty_week
 * @return array
 */
function hpbx_api_times_get($time_ranges,  $fill_empty_week = FALSE) {

  $api_times = array();
  $empty_days = 0;

  // Sort time ranges.
  ksort($time_ranges);

  // Convert time ranges to sipwise timezone.
  $time_ranges = hpbx_time_ranges_convert_datetime($time_ranges, 'sipwise');

  //$time_ranges = hpbx_time_ranges_convert_datetime($time_ranges, 'local');



  foreach ($time_ranges as $wday => $times) {

    if (is_numeric($wday)) {

      $json = json_decode(str_replace("'", '"', $times['ranges']));

      if (!empty($times['ranges']) && count($json) && $times['ranges'] = $json) {

        foreach ($times['ranges'] as $range) {

          $bla = array();

          //
          $from = strtotime($range[0]);
          $to = strtotime($range[1]);

          //echo 'to';


          // Fix for ranges where the range ends on the last minute of the day.
          // This is fixed by decreasing the end of the range with 1 minute.
          if ($to == strtotime('+1 day 00:00:00')) {
            //$to = strtotime('-1 min', $to);
          }

          // Cut range into peaces:
          // Example: 08:45 - 17:36
          //   8-8 45-59
          //   09-16
          //   17-17 0-36

          // Only in case the 'from hour' is different then the
          // 'to hour', to prevent overlap.



          if (date('G', $from)!=date('G', $to)) {

            // Start.
            $api_times[] = $bla[0] = array(
              'wday' => $wday . '-' . $wday,
              'hour' => ((int)date('G', $from)) .'-'. date('G', $from),
              'minute' => (int)date('i', $from) .'-59',
              'year' => NULL,
              'month' => NULL,
              'mday' => NULL,
            );

            // Middle (G=hour without leading zero's)
            if ((date('G', $from) + 1) <= (date('G', $to) - 1)) {
              $api_times[] = $bla[1] = array(
                'wday' => $wday . '-' . $wday,
                'hour' => (date('G', $from) + 1) .'-'. (date('G', $to) - 1),
                'minute' => NULL,
                'year' => NULL,
                'month' => NULL,
                'mday' => NULL,
              );
            }

            // End.
            // if (date('i', $to) > 0) {
              $api_times[] = $bla[2] = array(
                'wday' => $wday . '-' . $wday,
                'hour' => date('G', $to) .'-'. date('G', $to),
                'minute' => '0-'. date('i', $to),
                'year' => NULL,
                'month' => NULL,
                'mday' => NULL,
              );
            //}
          }

          // 'from' hour is equal to 'to' hour. No start, middle, and end
          // needed. Just one set.
          else {
            // Start.
            $api_times[] = $bla[-1] = array(
                'wday' => $wday . '-' . $wday,
                'hour' => ((int)date('G', $from)) .'-'. date('G', $to),
                'minute' => (int)date('i', $from) .'-'. date('i', $to),
                'year' => NULL,
                'month' => NULL,
                'mday' => NULL,
            );
          }
        }
      }
      elseif($fill_empty_week == TRUE) {
        $empty_days++;
      }

    }
  }
  if ($empty_days==7 && $fill_empty_week) {
    $api_times[] = array(
      'wday' => '1-7',
      'hour' => NULL,
      'minute' => NULL,
      'year' => NULL,
      'month' => NULL,
      'mday' => NULL,
    );
  }

  //
  // die();
  return $api_times;
}

/**
 *
 * @param unknown $primary_number
 * @return string
 */
function hpbx_parse_primary_number($numbers, $glue = '', $national = TRUE) {

  global $ActiveReseller;

  $primary_number = array();

  $numbers = (object)$numbers;
  if (!$national && isset($numbers->cc)) {
    $primary_number[] = $numbers->cc;
  }

  if (isset($numbers->ac)) {
    $primary_number[] = $numbers->ac;
  }

  if (isset($numbers->sn)) {
    $primary_number[] = $numbers->sn;
  }

  if ($national) {
    return $ActiveReseller->_settings->digit_for_national_calls . implode($glue, $primary_number);
  }
  return implode($glue, $primary_number);
}

/**
 *
 * @param array $form
 * @param array $form_state
 */
function hpbx_set_subscribers_preferences_elements(&$form, &$form_state) {

  // Get definitions.
  if ($preferencedefs = hpbx_get_preferencedefs('subscriber')) {

    // Remove the _links object.
    unset($preferencedefs->_links);

    foreach ($preferencedefs as $name => $preferencedef) {

      // @todo change dynamicaly or statically.
      $fieldset = 'preferences';

      // Add new element to form.
      $form[$fieldset][$name] = array(
          'attribute' => array('#markup' => $name),
          'name' => array(
              '#markup' => t($preferencedef->label),
              '#suffix' => '<span class="atooltip" title="' . htmlentities(t($preferencedef->description)) . '"',
          ),
      );

      $form[$fieldset][$name]['value'] = array('#disabled' => $preferencedef->read_only);

      // Set form element type.

      switch ($preferencedef->data_type) {
        case 'boolean':
          $form[$fieldset][$name]['value']['#type'] = 'checkbox';
          break;
        case 'string':
        case 'int':
          $form[$fieldset][$name]['value']['#type'] = 'textfield';
          $form[$fieldset][$name]['value']['#size'] = 15;
          break;
        case 'enum':

          $form[$fieldset][$name]['value']['#type'] = 'select';

          $options = array();

          // Walk each enum value.
          foreach ($preferencedef->enum_values as $enum) {

            // Verify if the current value is the default value for this element.
            if ($enum->default_val) {

              // Set default value.
              $form[$fieldset][$name]['value']['#empty_option'] = $enum->label;
            }
            else {

              // Set select option.
              $options[$enum->value] = $enum->label;
            }
          }

          // Assign options.
          $form[$fieldset][$name]['value']['#options'] = $options;
          break;
      }
    }
  }
}

function hpbx_logged_in_block_content() {
  if (function_exists('hpbx_users_is_hpbx_user') && hpbx_users_is_hpbx_user()) {
    global $user;

    unset($user->roles[2]);

    $name = '';
    if (isset($user->data['sipwise']['account']['cn'][0])) {
      $name = $user->data['sipwise']['account']['cn'][0];
    }
    return t('<strong>@name</strong>&nbsp;<i>@role</i>',
      array(
        '@name' => $name,
        '@role' => t(str_replace('Customer', '', str_replace('HostedPBX', '', implode(', ', $user->roles)))),
      )
    );
  }
  return;
}

function hpbx_set_destination_sets($Subscriber, $destination_type, $times_api = NULL,
  $set_fallback_office_hours = TRUE, $fallback_office_hours_destination = 'officehours', $cf_type = 'cfu') {

  // Destination set.
  $CFDestinationSets = sipwise_api_get_all('cfdestinationsets', array('subscriber_id' => $Subscriber->id, 'name' => $cf_type . '_' . $destination_type));
  if (count($CFDestinationSets)) {
    $CFDestinationSet = current($CFDestinationSets);
  }
  else {
    $CFDestinationSet = SipwiseEntity::create('cfdestinationsets');
    $CFDestinationSet->name = $cf_type . '_' . $destination_type;
    $CFDestinationSet->subscriber_id = $Subscriber->id;
  }

  $destination = array(
    'destination' => $destination_type,
    'timeout' => 300,
    'priority' => 1
  );

  $CFDestinationSet->destinations = array($destination);

  $CFDestinationSet->save();

  // Timeset.
  $CFTimeSets = sipwise_api_get_all('cftimesets', array('subscriber_id' => $Subscriber->id, 'name' => $cf_type . '_' . $destination_type));
  if (count($CFTimeSets)) {
    $CFTimeSet = current($CFTimeSets);
  }
  else {
    $CFTimeSet = SipwiseEntity::create('cftimesets');
    $CFTimeSet->name = $cf_type . '_' . $destination_type;
    $CFTimeSet->subscriber_id = $Subscriber->id;
  }

  if (!is_null($times_api)) {
    $CFTimeSet->times = $times_api;
  }
  $CFTimeSet->save();

  if ($set_fallback_office_hours && !is_null($times_api) && count($times_api)) {

    // Out of office destination set as fallback.
    $CFDestinationSets = sipwise_api_get_all('cfdestinationsets', array('subscriber_id' => $Subscriber->id, 'name' => $cf_type . '_' . 'outofofficehours'));
    if (count($CFDestinationSets)) {
      $CFDestinationSet = current($CFDestinationSets);
    }
    else {
      $CFDestinationSet = SipwiseEntity::create('cfdestinationsets');
      $CFDestinationSet->name = $cf_type . '_' . 'outofofficehours';
      $CFDestinationSet->subscriber_id = $Subscriber->id;
    }

    $CFDestinationSet->destinations[0] = array(
      'destination' => $fallback_office_hours_destination, // Announcement.
      'timeout' => 300,
      'priority' => 1
    );
    $CFDestinationSet->save();
  }

  $CFMapping = SipwiseEntity::load('cfmappings', $Subscriber->id, TRUE);
  $map = array();

  if ($set_fallback_office_hours&& !is_null($times_api) && count($times_api)) {
    $map[] = array('destinationset' => $cf_type . '_' . 'outofofficehours', 'timeset' => NULL);
  }
  if (!is_null($times_api) && count($times_api)) {
    $map[] = array('destinationset' => $cf_type . '_' . $destination_type, 'timeset' => $cf_type . '_' . $destination_type);
  }

  $CFMapping->$cf_type = $map;
  $CFMapping->save();
}

/**
 * @param SipwiseEntity $Callforward
 * @param string $cf_type
 * @param bool $add_parent_foldable_list
 * @param array $form_state
 * @return array
 */
function hpbx_get_simple_times_element($Callforward, $cf_type, $add_parent_foldable_list = FALSE, $form_state = NULL) {

  // Sipwise weekday => weekday name mapping.
  static $wday_mapping = NULL;
  static $items = NULL;

  if (is_null($wday_mapping)) {
    $wday_mapping = array(
      1 => 'Sunday', 2=> 'Monday', 3 => 'Tuesday',
      4 => 'Wednesday', 5=> 'Thursday', 6 => 'Friday', 7 => 'Saturday'
    );
  }

  $convert = FALSE;
  if (is_null($items)) {
    $items = array();
    $items[] = l(t('Werkdagen > Werktijden'), '#', array('attributes' => array('class' => array('hpbx-times-example-officehours'))));
    $items[] = l(t('Werkdagen > Lunchtijd'), '#', array('attributes' => array('class' => array('hpbx-times-example-lunchtime'))));
    $items[] = l(t('Werkdagen > Koffiepauzes'), '#', array('attributes' => array('class' => array('hpbx-times-example-coffee'))));
    $items[] = l(t('Werkdagen > Buiten werktijd'), '#', array('attributes' => array('class' => array('hpbx-times-example-not-officehours'))));
    $items[] = l(t('Weekend'), '#', array('attributes' => array('class' => array('hpbx-times-example-weekend'))));
  }

  if (isset($form_state['input']['call-forwards'][$cf_type]['times'])) {

    $js_times = array();
    foreach ($form_state['input']['call-forwards'][$cf_type]['times'] as $wday => $t) {

      $js_times[$wday] = json_decode(str_replace("'", '"', $t['ranges']));
    }
  }
  elseif (isset($Callforward->$cf_type->times)) {

    $js_times = array();
    $k = -1;
    foreach ($Callforward->$cf_type->times as $time) {
      $obj = new stdClass();

      if (!empty($time->wday)) {
        list($obj->wday) = explode('-', $time->wday);
      }
      else {
        break;
      }
      if (!empty($time->hour)) {
        list($obj->hour_from, $obj->hour_to) = explode('-', $time->hour);
      }
      else {
        break;
      }

      if (!empty($time->minute)) {
        list($obj->minute_from, $obj->minute_to) = explode('-', $time->minute);
      }
      else {
        $obj->minute_from = 0;
        $obj->minute_to = 0;
        $obj->hour_to++;
      }

      $time_from = strtotime(date('Y-m-d') . ' '. $obj->hour_from . ':'. $obj->minute_from);
      $time_to = strtotime(date('Y-m-d') . ' '. $obj->hour_to . ':'. $obj->minute_to);

      // Detect if the timeset does extend the previous timeset. If so, merge both timesets.
      if (isset($prev_to[$obj->wday]) && isset($js_times[$obj->wday][$prev_to[$obj->wday]['key']][1]) && isset($prev_to[$obj->wday]['time_to']) && ($time_from - $prev_to[$obj->wday]['time_to']) <= 60) {

        // Overwrite the previous to with the new time to.
        $js_times[$obj->wday][$prev_to[$obj->wday]['key']][1] = date('l, F d Y g:i A', $time_to);

        // Overwrite the previous to with the new time to.
        $prev_to[$obj->wday]['time_to'] = $time_to;
      }
      else {
        $prev_to[$obj->wday] = array(
          'time_to' => $time_to,
          'key' => ++$k,
        );

        $js_times[$obj->wday][$k][0] = date('l, F d Y g:i A', $time_from);
        $js_times[$obj->wday][$k][1] = date('l, F d Y g:i A', $time_to);
      }
    }
    $convert = TRUE;
  }

  $element = array(
    '#type' => 'container',
    '#theme_wrappers' => array(
      'hpbx_foldable_list_item',
    ),
    '#collapsible' => FALSE,
    '#tree' => TRUE,
    '#title' => t('Office hours (during)'),
  );

  if (!empty($add_parent_foldable_list)) {
    $element['#theme_wrappers'][] = 'hpbx_foldable_list';
  }
  for ($wday=1;$wday<=7;$wday++) {

    if (isset($js_times[$wday])) {
      $values = array_values($js_times[$wday]);
    }
    else {
      $values = array();
    }

    $element[$wday]['ranges'] = array(
      '#type' => 'hpbx_timeslot',
      '#title' => drupal_ucfirst(t($wday_mapping[$wday])),
      '#default_value' => str_replace('"', "'", json_encode($values))
    );
  }

  //

  // Only convert in case the source is from the Sipwise API.
  if ($convert) {
    $time_ranges = array();
    for ($wday=1;$wday<=7;$wday++) {
      $time_ranges[$wday]['ranges'] = $element[$wday]['ranges']['#default_value'];
    }

    $time_ranges = hpbx_time_ranges_convert_datetime($time_ranges, 'local');

    for ($wday=1;$wday<=7;$wday++) {
      $element[$wday]['ranges']['#default_value'] = $time_ranges[$wday]['ranges'];
    }
  }

  // Move the sunday to the end of the array.
  $sun = $element[1];
  unset($element[1]);
  $element[1] = $sun;
  //$element['examples']['#markup'] = t('<i>* To remove, double click the time range you want to remove.</i>');

  $element['add'] = array(
    '#type' => 'submit',
    '#title' => t('Add timeslot(s)'),
    '#value' => t('Add'),
    '#theme_wrappers' => array( 'button', 'form_element'),
    '#attributes' => array('class' => array('sg-btn', 'sg-btn-secondary', 'hpbx-add-timeslot'),
      'data-target' => 'call-forwards['.$cf_type.']'),
    '#field_suffix' => array(
      '#attributes' => array(
        'class' => array(
          'sg-btn-icon',
          'LGI-iconb-arrow-right-bold'
        )
      ),
      'data' => ''
    ),
  );

  return $element;
}

/**
 *
 * @param SipwiseEntity $CFTimeSet
 * @return The
 */
function hpbx_times_get_element($CFTimeSet = NULL, $add_parent_foldable_list = FALSE, $form_state = NULL) {

  // Fake a callforward entity with cfu set.
  $Callforward = new stdClass();
  $Callforward->cfu = $CFTimeSet;

  // Get the js element.
  return hpbx_get_simple_times_element($Callforward, 'cfu', $add_parent_foldable_list, $form_state);
}

function hpbx_convert_to_local_datetime(&$datetime_str, $ignore_correction_state = FALSE) {
  global $ActiveReseller;

  if (!$ignore_correction_state && !empty($ActiveReseller->_settings->timezone_correction) && !empty($ActiveReseller->_settings->timezone)) {
    $DateTime = new DateTime($datetime_str, new DateTimeZone('Europe/Vienna'));
    $DateTime->setTimezone(new DateTimeZone($ActiveReseller->_settings->timezone));
    $datetime_str = $DateTime->format('Y-m-d H:i:s');
  }
  return $datetime_str;
}

function hpbx_convert_to_sipwise_datetime(&$datetime_str, $ignore_correction_state = FALSE) {
  global $ActiveReseller;

  if (!$ignore_correction_state && !empty($ActiveReseller->_settings->timezone_correction) && !empty($ActiveReseller->_settings->timezone)) {
    $DateTime = new DateTime($datetime_str, new DateTimeZone($ActiveReseller->_settings->timezone));
    $DateTime->setTimezone(new DateTimeZone('Europe/Vienna'));
    $datetime_str = $DateTime->format('Y-m-d H:i:s');
  }
  return $datetime_str;
}

/**
 *
 * @param string $attribute
 * @param string $profile_id
 * @return boolean
 */
function hpbx_attribute_allowed($attribute, $profile_id = NULL, $customer_profile_set_id = NULL) {
  global $ActiveReseller;

  if (is_null($customer_profile_set_id)) {
    $Customer = hpbx_get_active_customer();
    $customer_profile_set_id = $Customer->_settings->profile_set_id;
  }

  // Get all profiles for the customer profile set.
  $SubscriberProfiles = sipwise_api_get_all('subscriberprofiles', array('profile_set_id' => $customer_profile_set_id));

  $attributes = array();
  foreach ($SubscriberProfiles as $SubscriberProfile) {

    $attributes[$SubscriberProfile->id] = array();
    foreach ($SubscriberProfile->attributes as $at) {
      $attributes[$SubscriberProfile->id][$at] = $at;
    }

    // Retrieve 'local' features not supported by sipwise attributes (eg. blf
    // or being a huntgroup member).

    $local_features = (array)$ActiveReseller->_settings->profile_allowed_features->{(string)$SubscriberProfile->id};

    foreach ($local_features as $at => $val) {
      if ($val) {
        $attributes[$SubscriberProfile->id][$at] = $at;
      }
    }
  }

  if (!is_null($profile_id)) {
    return in_array($attribute, $attributes[$profile_id]);
  }
  else {
    foreach ($attributes as $p_id => $p_attrs) {
      foreach ($p_attrs as $p_a) {
        if ($p_a == $attribute) {
          return ((count($attributes) >= 2) ? HPBX_SUBSCRIBER_FEATURE_TOGGLE : HPBX_SUBSCRIBER_FEATURE_ENABLED);
        }
      }
    }
  }

  // Not found in one of the profiles.
  return HPBX_SUBSCRIBER_FEATURE_INVISIBLE;
}


function hpbx_get_subscriber_options($Customer, $Subscriber = NULL, $number_key = FALSE, $is_pbx_pilot = FALSE, $is_pbx_group = TRUE,
    $autoattendant = TRUE, $conference = TRUE, $is_subscriber = TRUE, $must_be_pbx_group_member = FALSE) {

  global $so_debug;
  if ($so_debug == TRUE && $_SERVER['REMOTE_ADDR'] == '10.254.242.19') {
    drupal_set_message('is_subscriber: '. var_export($is_subscriber, TRUE));
    drupal_set_message('autoattendant: '. var_export($autoattendant, TRUE));
    drupal_set_message('is_pbx_group: '. var_export($is_pbx_group, TRUE));
    drupal_set_message('must_be_pbx_group_member: '. var_export($must_be_pbx_group_member, TRUE));
    drupal_set_message('conference: '. var_export($conference, TRUE));
    drupal_set_message('is_pbx_pilot: '. var_export($is_pbx_pilot, TRUE));
  }

  global $ActiveReseller;

  // Get all subscribers to fill the options.
  $subscriber_options = array();
  foreach ($Customer->get_subscribers($is_pbx_pilot, $is_pbx_group,
      $autoattendant, $conference) as $SubscriberForCLI) {

    // Exclude own number.
    if (is_null($Subscriber) || ($SubscriberForCLI->id!=$Subscriber->id)) {

      if ($number_key) {
      if(!empty($SubscriberForCLI->get_alias_number(HPBX_NUMBER_FORMAT_GSN))){
        $key = $SubscriberForCLI->get_alias_number(HPBX_NUMBER_FORMAT_GSN);
      }
      else{
        $key =  $SubscriberForCLI->pbx_extension;
      }
      }
      else {
        $key = $SubscriberForCLI->id;
      }

      $value = array();
      $value[] = '';
      $value[] = ' - '. hpbx_get_profile_name_from_profile_id($SubscriberForCLI->profile_set_id, $SubscriberForCLI->profile_id) . ' - ';
      $value[] = $SubscriberForCLI->get_alias_number(HPBX_NUMBER_FORMAT_GSN);
      $value[] = ' ('. $SubscriberForCLI->pbx_extension . ')';

      if ($SubscriberForCLI->profile_id == $ActiveReseller->_settings->auto_attendant_subscriber_profile_id ||
          $SubscriberForCLI->profile_id == $ActiveReseller->_settings->conference_room_subscriber_profile_id ||
          $SubscriberForCLI->is_pbx_group) {

        if ($SubscriberForCLI->is_pbx_group && $must_be_pbx_group_member) {

           // Verify if the subscriber is member of the pbx_group.
          if (is_null($Subscriber) || !in_array($Subscriber->id, $SubscriberForCLI->pbx_groupmember_ids)) {

            // The subscriber is not part of the hunt group, which is required by
            // the argument passed. Ignore this entry.
            continue;
          }
        }

        $value[0] = hpbx_truncate_name_element($SubscriberForCLI->external_id, 30);
        $subscriber_options[t('Groups')][$key] = implode('' , $value);
      }
      elseif ($is_subscriber) {

        // For subscriber with ad account.
        if ($ad_entry = hpbx_users_get_user($SubscriberForCLI->webusername)) {

          $value[0] = $ad_entry['sn'][0]. ', '. $ad_entry['givenname'][0] . ' ';
          $subscriber_options[t('Subscribers')][$key] = implode('', $value);
        }

        // For subscribers with external_id.
        elseif (!empty($SubscriberForCLI->external_id)) {

          $value[0] = hpbx_truncate_name_element($SubscriberForCLI->external_id, 30);
          $subscriber_options[t('Subscribers')][$key] = implode('', $value);
        }
      }
    }
  }

  if (isset($subscriber_options[t('Subscribers')])) {
    // Sort subscribers.
    asort($subscriber_options[t('Subscribers')], SORT_NATURAL|SORT_FLAG_CASE);
  }

  if (isset($subscriber_options[t('Groups')])) {
    // Sort groups.
    asort($subscriber_options[t('Groups')], SORT_NATURAL|SORT_FLAG_CASE);
  }

  if ($so_debug && $_SERVER['REMOTE_ADDR'] == '10.254.242.19') {

  }
  $so_debug = FALSE;
  return $subscriber_options;
}

/**supportive function to get CLI dropdown values*/
function hpbx_get_subscriber_options_subscriber_create($Customer, $Subscriber = NULL, $number_key = FALSE, $is_pbx_pilot = FALSE, $is_pbx_group = TRUE,
    $autoattendant = TRUE, $conference = TRUE, $is_subscriber = TRUE, $must_be_pbx_group_member = FALSE) {

  global $so_debug;
  if ($so_debug == TRUE && $_SERVER['REMOTE_ADDR'] == '10.254.242.19') {
    drupal_set_message('is_subscriber: '. var_export($is_subscriber, TRUE));
    drupal_set_message('autoattendant: '. var_export($autoattendant, TRUE));
    drupal_set_message('is_pbx_group: '. var_export($is_pbx_group, TRUE));
    drupal_set_message('must_be_pbx_group_member: '. var_export($must_be_pbx_group_member, TRUE));
    drupal_set_message('conference: '. var_export($conference, TRUE));
    drupal_set_message('is_pbx_pilot: '. var_export($is_pbx_pilot, TRUE));
  }

  global $ActiveReseller;

  // Get all subscribers to fill the options.
  $subscriber_options = array();
  foreach ($Customer->get_subscribers($is_pbx_pilot, $is_pbx_group,
      $autoattendant, $conference) as $SubscriberForCLI) {
if(!empty($SubscriberForCLI->get_alias_number(HPBX_NUMBER_FORMAT_GSN))){
    // Exclude own number.
    if (is_null($Subscriber) || ($SubscriberForCLI->id!=$Subscriber->id)) {

      if ($number_key) {
        $key = $SubscriberForCLI->get_alias_number(HPBX_NUMBER_FORMAT_GSN);
      }
      else {
        $key = $SubscriberForCLI->id;
      }

      $value = array();
      $value[] = '';
      $value[] = ' - '. hpbx_get_profile_name_from_profile_id($SubscriberForCLI->profile_set_id, $SubscriberForCLI->profile_id) . ' - ';
      $value[] = $SubscriberForCLI->get_alias_number(HPBX_NUMBER_FORMAT_GSN);
      $value[] = ' ('. $SubscriberForCLI->pbx_extension . ')';

      if ($SubscriberForCLI->profile_id == $ActiveReseller->_settings->auto_attendant_subscriber_profile_id ||
          $SubscriberForCLI->profile_id == $ActiveReseller->_settings->conference_room_subscriber_profile_id ||
          $SubscriberForCLI->is_pbx_group) {

        if ($SubscriberForCLI->is_pbx_group && $must_be_pbx_group_member) {

           // Verify if the subscriber is member of the pbx_group.
          if (is_null($Subscriber) || !in_array($Subscriber->id, $SubscriberForCLI->pbx_groupmember_ids)) {

            // The subscriber is not part of the hunt group, which is required by
            // the argument passed. Ignore this entry.
            continue;
          }
        }

        $value[0] = hpbx_truncate_name_element($SubscriberForCLI->external_id, 30);
        $subscriber_options[t('Groups')][$key] = implode('' , $value);
      }
      elseif ($is_subscriber) {

        // For subscriber with ad account.
        if ($ad_entry = hpbx_users_get_user($SubscriberForCLI->webusername)) {

          $value[0] = $ad_entry['sn'][0]. ', '. $ad_entry['givenname'][0] . ' ';
          $subscriber_options[t('Subscribers')][$key] = implode('', $value);
        }

        // For subscribers with external_id.
        elseif (!empty($SubscriberForCLI->external_id)) {

          $value[0] = hpbx_truncate_name_element($SubscriberForCLI->external_id, 30);
          $subscriber_options[t('Subscribers')][$key] = implode('', $value);
        }
      }
    }
}
  }
 
  if (isset($subscriber_options[t('Subscribers')])) {
    // Sort subscribers.
    asort($subscriber_options[t('Subscribers')], SORT_NATURAL|SORT_FLAG_CASE);
  }

  if (isset($subscriber_options[t('Groups')])) {
    // Sort groups.
    asort($subscriber_options[t('Groups')], SORT_NATURAL|SORT_FLAG_CASE);
  }

  if ($so_debug && $_SERVER['REMOTE_ADDR'] == '10.254.242.19') {

  }
  $so_debug = FALSE;
  return $subscriber_options;
}

/**
 * @param SipwiseCustomer $Customer
 * @param int $profile_id
 * @param int $offset
 * @param null $bundle_settings
 * @return bool
 */
function hpbx_bundle_settings_is_allowed($Customer, $profile_id, $offset = 0, $bundle_settings = NULL) {

  global $ActiveReseller;
  $counter = array();

  if (!$SubscriberProfile  = SipwiseEntity::load('subscriberprofiles', $profile_id)) return FALSE;
  if (empty($ActiveReseller->_settings->bundle_settings)) return TRUE;
  if (is_null($bundle_settings)) $bundle_settings = $Customer->_settings->bundle_settings;

  if(empty($bundle_settings)) return TRUE;

  // Set profile set counter to 0 or the 1 based on passed offsets.
  $counter['profileset'][$SubscriberProfile->profile_set_id] = (int)(($offset&HPBX_BUNDLE_SETTINGS_OFFSET_COUNTER_INCREASE_PROFILE_SET)!=FALSE);
  $counter['profile'][$SubscriberProfile->id] = (int)(($offset&HPBX_BUNDLE_SETTINGS_OFFSET_COUNTER_INCREASE_PROFILE)!=FALSE);

  foreach (sipwise_api_get_all('subscribers', array('customer_id' => $Customer->id, 'is_pbx_pilot' => 0)) as $Subscriber) {
    if (isset($Subscriber->profile_set_id)) $counter['profileset'][$Subscriber->profile_set_id]++;
    if (isset($Subscriber->profile_id)) $counter['profile'][$Subscriber->profile_id]++;
  }

  if (1==2) {
    echo '<pre>';
    echo __FUNCTION__ . PHP_EOL;
    var_dump($counter);
    var_dump('offset: '. $offset);
    var_dump('profile: ' . $SubscriberProfile->name . ' => ' . $SubscriberProfile->id);
    var_dump('profile_set_id: ' . $SubscriberProfile->profile_set_id);
    var_dump($bundle_settings->{$SubscriberProfile->profile_set_id}->value);
    var_dump('current profile_set_id counter: ' . $counter['profileset'][$SubscriberProfile->profile_set_id]);
    var_dump('allowed profile_set_id total_amount: ' . $bundle_settings->{$SubscriberProfile->profile_set_id}->total_amount);
    var_dump('current profile counter: ' . $counter['profile'][$SubscriberProfile->id]);
    var_dump('allowed profile total amount: ' . $bundle_settings->{$SubscriberProfile->profile_set_id}->profiles->{$profile_id}->amount);
    var_dump('switch: ' . $bundle_settings->{$SubscriberProfile->profile_set_id}->profiles->{$profile_id}->value);
  }

  switch ($bundle_settings->{$SubscriberProfile->profile_set_id}->value) {
    case 'unlimited':
      return TRUE;
    case 'limit_total':
      if (!($counter['profileset'][$SubscriberProfile->profile_set_id] <= $bundle_settings->{$SubscriberProfile->profile_set_id}->total_amount)) {
        return -1;
      }
      return TRUE;
    case 'limit_per_profile':

      switch ($bundle_settings->{$SubscriberProfile->profile_set_id}->profiles->{$profile_id}->value) {
        case 'unlimited':
          return TRUE;
        case 'none':
          return $counter['profile'][$SubscriberProfile->id] == 0;
        case 'input':
          return $counter['profile'][$SubscriberProfile->id] <= $bundle_settings->{$SubscriberProfile->profile_set_id}->profiles->{$profile_id}->amount;
      }
      break;
  }

  return FALSE;
}

function hpbx_numberranges_has_prefix($Customer) {
  static $prefix = array();

  if (!isset($prefix[$Customer->id])) {
    $prefix[$Customer->id] = FALSE;
    foreach ($Customer->_settings->numberranges as $k => $nrange) {
      if ($nrange->prefix) {
        $prefix[$Customer->id] = TRUE;
        break;
      }
    }
  }

  return $prefix[$Customer->id];
}
function hpbx_get_numberrange($Customer, $number) {

  // Find out the prefix for this specific range.
  $prefix = '';
  foreach ($Customer->_settings->numberranges as $range) {

    // Add prefix 1, to prevent leading zero's to be stripped of while casting to integer.
    $end = $start = (int)'1'. $range->start;
    $end += (int)$range->length;
    for ($i=$start;$i<$end;$i++) {

      if ($range->area.substr($i, 1) == $number) {
        return $range;
      }
    }
  }
  return FALSE;
}

function hpbx_get_extension_prefix($Customer, $number) {

  // Find out the prefix for this specific range.
  $prefix = '';
  foreach ($Customer->_settings->numberranges as $range) {

    // Add prefix 1, to prevent leading zero's to be stripped of while casting to integer.
    $end = $start = (int)'1'. $range->start;
    $end += (int)$range->length;
    for ($i=$start;$i<$end;$i++) {

      if ($range->area.substr($i, 1) == $number) {
        $prefix = $range->prefix;
      }
    }
  }
  return $prefix;
}

function hpbx_set_autocomplete($namespace, $element, $subscriber_options) {
  $datalist = array();
  foreach ($subscriber_options as $type => $options) {
    foreach ($options as $value => $option) {
      $datalist[] = "{value:'". $value . "',label:'". $option . "'}";
    }
  }
    // Adds the library making it available for use.
  drupal_add_library('system', 'ui.autocomplete');

  $datalist = implode(',', $datalist);
  $autocomplete = <<<EOF
(function ($) {
  $('document').ready(function(){

    $( "{$element}" ).autocomplete({
      source: [{$datalist}],
      minLength: 0,
    }).focus(function() {
      $(this).autocomplete("search", "");
    })

  });

  Drupal.behaviors.{$namespace} = {
    attach: function(context,settings) {

      $( "{$element}" ).autocomplete({
        source: [{$datalist}],
        minLength: 0,
      }).focus(function() {
        $(this).autocomplete("search", "");
      })
    }
  };

})(jQuery);

jQuery.ui.autocomplete.prototype._resizeMenu = function () {
  var ul = this.menu.element;
  ul.outerWidth(500);
}
EOF;

  drupal_add_js($autocomplete, array('type' => 'inline'));
}


/**
 *
 * @param unknown $formUploaden
 * @param unknown $form_state
 * @param unknown $SipwiseEntity
 */
function hpbx_add_more_table(&$form, &$form_state, $SipwiseEntity) {

  global $ActiveReseller;

  if (!isset($form_state['triggering_element']['#value']) || $form_state['triggering_element']['#type'] != 'button') {
    $_SESSION['ccs']['hpbx']['add_more'] = array();
  }

  $template_row = array();
  $template_row['id']['data'] = array(
    '#type' => 'hidden',
    '#required' => TRUE,
  );

  if ($SipwiseEntity->table == 'speeddials') {
    $prefix = '*';
    $slots_var = $SipwiseEntity->table;

    $header = array(
      'id' => array(),
      'slot' => array(
        'data'=> t('Option')
      ),
      'destination' => array(
        'data'=> t('Destination'),
      ),
      'op' => array(),
    );

    $template_row['slot']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#options' => array(),
    );

    // Destination
    $template_row['destination']['data'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
    );

    // Add datalist to the destination input.
    $subscriber_options = hpbx_get_subscriber_options($SipwiseEntity->_Customer, $SipwiseEntity->_Subscriber,
      $number_key = TRUE,
      $is_pbx_pilot = FALSE,
      $is_pbx_group = TRUE,
      $autoattendant = TRUE,
      $conference = TRUE,
      $is_subscriber = TRUE,
      $must_be_pbx_group_member = FALSE
    );

    if (count($subscriber_options)) {

      // Set subscriber options, in case the form fails to validate and we
      // need to attach the autocomplete again.
      $form['speeddials_autcomplete_subscriber_options'] = array('#type' => 'value', '#value' => $subscriber_options);

      hpbx_set_autocomplete('speeddialsAddMore', "#hpbx-speeddials-table-wrapper div.form-type-textfield input[type=text]", $subscriber_options);
    }
  }
  elseif ($SipwiseEntity->table == 'numberranges') {
    $prefix = '';
    $slots_var = 'numberranges';

    $header = array(
      'id' => array(),
      'inported' => array(
        'data'=> t('Ported / </br>New number'),
      ),
      'area' => array(
      'data'=> t('Area code')
      ),
      'start' => array(
        'data'=> t('Start')
      ),
      'length' => array(
        'data'=> t('Length'),
      ),
      'prefix' => array(
        'data'=> t('Prefix'),
      ),
      'op' => array(),
    );

    // Get all CustomerPreferences, to speed up displaying the list.
    $template_row['inported']['data'] = array(
        '#type' => 'checkbox',
    );
    
    $placeholder_number = mt_rand(1234567891,1234567899);
    $area_placholder = substr($placeholder_number,0,$ActiveReseller->_settings->area_code_max_digits);
    $template_row['area']['data'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#size' => $ActiveReseller->_settings->area_code_max_digits,
      '#maxlength' => $ActiveReseller->_settings->area_code_max_digits,
      '#attributes' => array('placeholder' => $area_placholder),
    );
	//Modified for Bug #1100 - PE LAB: Create Customer - Numberrange removed after error message about prefix starting with a zero
   $start_placeholder = substr($placeholder_number,0,$ActiveReseller->_settings->subscriber_number_max_digits);
    $template_row['start']['data'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#size' => $ActiveReseller->_settings->subscriber_number_max_digits,
      '#maxlength' => $ActiveReseller->_settings->subscriber_number_max_digits,
      '#attributes' => array('placeholder' => $start_placeholder),
      /*'#rules' => array(
        array(
          'rule' => 'length['. $ActiveReseller->_settings->subscriber_number_min_digits .','. $ActiveReseller->_settings->subscriber_number_max_digits . ']',
          'error' => t('Invalid start number size'),
        )
      ),*/
    );
    $template_row['length']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#options' => drupal_map_assoc(array(1, 5, 10, 100, 1000)),
      '#attributes' => array('class' => array('chzn-select', 'sg-element', 'no-search')),
      '#field_size_class' => array('col-xs-12', 'col-sm-12', 'col-md-12'),
    );
    $template_row['prefix']['data'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#maxlength' => 4,
      '#size' => 7,
    );
  }
  elseif ($SipwiseEntity->table == 'cfu_times') {
    $prefix = '';
    $slots_var = 'times';

    $header = array(
      'id' => array(),
      'wday' => array(
        'data'=> t('Weekday'),
        'colspan' => 2,
      ),
      'hour' => array(
        'data'=> t('Hour'),
        'colspan' => 2,
      ),
      'minute' => array(
        'data'=> t('Minute'),
        'colspan' => 2,
      ),
      'op' => array(),
    );

    $weekdays = array(
      1 => t('Sun'),
      2 => t('Mon'),
      3 => t('Tue'),
      4 => t('Wed'),
      5 => t('Thu'),
      6 => t('Fri'),
      7 => t('Sat')
    );

    $template_row['wday_end']['data'] = $template_row['wday_start']['data'] =  array(
      '#type' => 'select',
      '#required' => TRUE,
      '#options' => $weekdays
    );

    $hours = array_map(function($n) {
      return sprintf('%02d', $n);
    }, range(0, 23));
    $template_row['hour_end']['data'] = $template_row['hour_start']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#options' => $hours,
    );

    $minutes = array_map(function($n) {
      return sprintf('%02d', $n);
    }, range(0, 59));
    $template_row['minute_end']['data'] = $template_row['minute_start']['data'] =  array(
      '#type' => 'select',
      '#required' => TRUE,
      '#options' => $minutes,
    );

    // Format data into usefull data.
    foreach ($SipwiseEntity->$slots_var as &$time) {

      unset($time->mday, $time->month, $time->year, $time->time_set_id, $time->id);
      if (!empty($time->wday)) {
        list($time->wday_start, $time->wday_end) = explode('-', $time->wday);
        unset($time->wday);
      }

      if (!empty($time->hour)) {
        list($time->hour_start, $time->hour_end) = explode('-', $time->hour);
        unset($time->hour);
      }

      if (!empty($time->minute)) {
        list($time->minute_start, $time->minute_end) = explode('-', $time->minute);
        unset($time->minute);
      }
    }
  }
  elseif ($SipwiseEntity->table == 'autoattendants') {
    $prefix = '';
    $slots_var = 'slots';

    $header = array(
      'id' => array(),
      'slot' => array(
        'data'=> t('Option')
      ),
      'destination' => array(
        'data'=> t('Destination'),
      ),
      'op' => array(),
    );

    $template_row['slot']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#options' => array(),
    );

    // Destination
    $template_row['destination']['data'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
    );

    // Add datalist to the destination input.
    $subscriber_options = hpbx_get_subscriber_options($SipwiseEntity->_Customer, $SipwiseEntity->_Subscriber,
      $number_key = TRUE,
      $is_pbx_pilot = FALSE,
      $is_pbx_group = TRUE,
      $autoattendant = TRUE,
      $conference = FALSE,
      $is_subscriber = TRUE,
      $must_be_pbx_group_member = FALSE
    );

    if (count($subscriber_options)) {

      // Set subscriber options, in case the form fails to validate and we
      // need to attach the autocomplete again.
      $form['autoattendants_autcomplete_subscriber_options'] = array('#type' => 'value', '#value' => $subscriber_options);

      hpbx_set_autocomplete('autoattendantsAddMore', '#hpbx-autoattendants-table-wrapper div.form-type-textfield input[type=text]', $subscriber_options);
    }
  }
  else {
    return FALSE;
  }

  // Delete button.
  $template_row['op']['data'] = array(
    '#type' => 'button',
    '#value' => t('Delete'),
    '#ajax' => array(
      'callback' => 'hpbx_'. $SipwiseEntity->table .'_callback',
      'wrapper' => 'hpbx-'. $SipwiseEntity->table .'-table-wrapper'
    ),
    '#limit_validation_errors' => array(),
    '#prefix' => '<span class="submit-button">',
    '#suffix' => '</span>',
    '#attributes' => array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary')),
  );

  // Add the already configured lines to the form storage, but only on first load (so not on ajax load).
  if (!isset($form_state['clicked_button']['#value']) && isset($SipwiseEntity->$slots_var)) {

    foreach ($SipwiseEntity->$slots_var as $i => $rows) {
      if (isset($rows->destination)) {
        $destination = hpbx_normalize_number_human_readable($SipwiseEntity->_Subscriber->id, trim($rows->destination));
      }

      $row = array();
      foreach ($template_row as $template_row_cell_key => $template_row_cell) {

        // For destination the prefix and suffix must be stripped.
        if ($template_row_cell_key == 'area')  {
          if (strlen($ActiveReseller->_settings->digit_for_national_calls) &&
            strlen($rows->area) < $ActiveReseller->_settings->area_code_max_digits
          ) {
            $ActiveReseller->remove_national_digits($rows->area);
            $rows->area = $ActiveReseller->_settings->digit_for_national_calls. $rows->area;
          }

          $row['area'] = array('data' => $rows->area);
        }
        elseif ($template_row_cell_key == 'destination') {

          $destination = hpbx_normalize_number_human_readable($SipwiseEntity->_Subscriber->id, trim($rows->destination));

          // Set destination default value.
          $row['destination'] = array('data' => $destination);
        }
        elseif ($template_row_cell_key!='op' && $template_row_cell_key!='id') {
          // Set the default values.
          $row[$template_row_cell_key] = array('data' => $rows->$template_row_cell_key);
        }
      }
      $row['id'] = array('data' => uniqid());
      $_SESSION['ccs']['hpbx']['add_more']['values'][$SipwiseEntity->table]['rows'][$row['id']['data']] = $row;
    }
  }


  // Create the table.
  $form[$SipwiseEntity->table]['table'] = array(
    '#type' => 'container',
    '#header' => $header,
    '#title' => '',
    '#collapsible' => FALSE,
    '#tree' => TRUE,
    '#theme' => 'hpbx_table',
  );


  if ($SipwiseEntity->table == 'speeddials') {
    $form[$SipwiseEntity->table]['table']['#tabform'] = TRUE;
  }

  // Set the wrapper div, required for the AJAX response.
  $form[$SipwiseEntity->table]['table']['#prefix'] = '<div id="hpbx-'. $SipwiseEntity->table .'-table-wrapper">';
  $form[$SipwiseEntity->table]['table']['#suffix'] = '</div>';

  $deleted_slot = NULL;
  $active_tab = FALSE;

  if (isset($form_state['input']['subscriber-settings__active_tab'])) {
    $active_tab = str_replace('edit-', '', $form_state['input']['subscriber-settings__active_tab']);
  }

  // In case the 'Add' or 'Remove' line button is clicked. Add the values to the session..
  if (isset($form_state['clicked_button']['#value']) && ($active_tab==FALSE || $active_tab == $SipwiseEntity->table || ($SipwiseEntity->table == 'cfu_times' && $active_tab == 'call-forwards'))) {

    if ($form_state['clicked_button']['#value'] == t('Add')) {

      if ($SipwiseEntity->table == 'numberranges') {
        // Add all rows to the storage.
        $_SESSION['ccs']['hpbx']['add_more']['values'][$SipwiseEntity->table]['rows'] = $form_state['input']['general'][$SipwiseEntity->table]['table'];
        unset($form_state['input']['general'][$SipwiseEntity->table]['table']);
      }
      else {
        // Add all rows to the storage.
        $_SESSION['ccs']['hpbx']['add_more']['values'][$SipwiseEntity->table]['rows'] = $form_state['input'][$SipwiseEntity->table]['table'];
        unset($form_state['input'][$SipwiseEntity->table]['table']);
      }
    }
    elseif ($form_state['clicked_button']['#value'] == t('Delete')) {

      $deleted_slot = $form_state['clicked_button']['#name'];
    }
  }

  $slots_in_use = array();

  // Add all existing (real and in session) to the table.
  if (isset($_SESSION['ccs']['hpbx']['add_more']['values'][$SipwiseEntity->table]['rows'])) {

    foreach ($_SESSION['ccs']['hpbx']['add_more']['values'][$SipwiseEntity->table]['rows'] as $slot => $row) {

      $new_row = $template_row;
      $new_row['op']['data']['#name'] = $row['id']['data'];

      foreach ($template_row as $template_row_cell_key => $template_row_cell) {

        if ($template_row_cell_key == 'area')  {
          if (strlen($ActiveReseller->_settings->digit_for_national_calls) &&
            strlen($row['area']['data']) < $ActiveReseller->_settings->area_code_max_digits
            ) {
              $ActiveReseller->remove_national_digits($row['area']['data']);
              $row['area']['data'] = $ActiveReseller->_settings->digit_for_national_calls . $row['area']['data'];
          }

          $new_row['area']['data']['#default_value'] = $row['area']['data'];
        }

        // For destination the prefix and suffix must be stripped.
        elseif ($template_row_cell_key == 'destination') {
          $destination = trim($row['destination']['data']);
          if (preg_match('/sip:(\d+)@/', trim($row['destination']['data']), $matches)) {
            $destination = $matches[1];
          }

          // Set destination default value.
          $new_row['destination']['data']['#default_value'] =  $destination;
        }
        elseif ($template_row_cell_key!='op') {

          // Set the default values.
          $new_row[$template_row_cell_key]['data']['#default_value'] = $row[$template_row_cell_key]['data'];
        }
      }


      if (isset($row['id']['data'])) {
        if (!empty($row['area']['data']) && !empty($row['start']['data'])) {
          if (isset($row['slot']['data'])) {
            $slots_in_use[] = $row['slot']['data'];
          }

          // Add the row to the table.
          $form[$SipwiseEntity->table]['table'][$row['id']['data']] = $new_row;
        }
      }
    }
  }

  // Verify if a row has been deleted.
  if (!is_null($deleted_slot)) {

    // Remove that specific row from the storage.
    unset($_SESSION['ccs']['hpbx']['add_more']['values'][$SipwiseEntity->table]['rows'][$deleted_slot]);
    unset($form[$SipwiseEntity->table]['table'][$deleted_slot]);
  }

  // Remove required attribute and default value.
  foreach ($template_row as &$row) {
    unset($row['data']['#required']);

    unset($row['data']['#default_value']);

    $row['data']['#value'] = '';

    if ($row['data']['#type'] == 'select') {
      $row['data']['#empty_option'] = '-'. t('Select') . '-';
    }
  }

  // Set new ID value.
  $template_row['id']['data']['#value'] = uniqid();

  // Assign the template row to the last row.
  $form[$SipwiseEntity->table]['table']['add'] = $template_row;
  $form[$SipwiseEntity->table]['table']['add']['op']['data'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#name' => 'add-'. $SipwiseEntity->table,
    '#ajax' => array(
      'callback' => 'hpbx_'. $SipwiseEntity->table .'_callback',
      'wrapper' => 'hpbx-'. $SipwiseEntity->table .'-table-wrapper'
    ),
    '#limit_validation_errors' => array(),
    '#prefix' => '<span class="submit-button">',
    '#suffix' => '</span>',
    '#attributes' => array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary')),
  );

  // In case of 'slots'.
  if (!is_null($slots_var) && $SipwiseEntity->table!='numberranges') {

    // Only allow slots not in use to be choosen to add a new slot.
    foreach (element_children($form[$SipwiseEntity->table]['table']) as $key => $element) {
      $options = array();
      for($i=0;$i<=9;$i++) {
        if (!in_array($prefix.$i, $slots_in_use)) {
          $options[$prefix.$i] = $prefix.$i;
        }
      }

      // Add own default value.
      if (isset($form[$SipwiseEntity->table]['table'][$element]['slot']['data']['#default_value'])) {
        $options[] = $form[$SipwiseEntity->table]['table'][$element]['slot']['data']['#default_value'];
      }
      sort($options);

      $form[$SipwiseEntity->table]['table'][$element]['slot']['data']['#options'] = drupal_map_assoc($options);
    }
  }
}

function hpbx_profile_callback($form, $form_state) {
  return $form['general']['profile_id']['value'];
}

/**
 *
 * @param integer $ncos_level_id
 * @param unknown $destination
 *
 * @return boolean
 */
function hpbx_ncos_is_allowed($ncos_level, $destination, $subscriber_id = NULL) {

  if (is_string($ncos_level)) {
    foreach (sipwise_api_get_all('ncoslevels') as $NCOSLevel) {

      if ($ncos_level == $NCOSLevel->level) {
        $ncos_level = $NCOSLevel->id;
        break;
      }
    }
  }

  // Verify the ncos level does exist.
  if ($NCOSLevel = SipwiseEntity::load('ncoslevels', $ncos_level)) {

    //echo $NCOSLevel;
    // Retrieve the ncos level pattern.
    if ($NcosPatterns = sipwise_api_get_all('ncospatterns', array('ncos_level_id' => $ncos_level))) {

      // Verify if the passed destination number is allowed by the ncos pattern.
      foreach ($NcosPatterns as $NcosPattern) {

        if ($NCOSLevel->mode == 'whitelist' && preg_match('/'. $NcosPattern->pattern . '/', sipwise_api_normalize_number($subscriber_id, $destination, 'callee_in'))) {
          return TRUE;
        }
        elseif ($NCOSLevel->mode == 'blacklist' && preg_match('/'. $NcosPattern->pattern . '/', sipwise_api_normalize_number($subscriber_id, $destination, 'callee_in'))) {
          return FALSE;
        }
      }
    }
    // Ncos patterns not found or no match.
    if ($NCOSLevel->mode == 'whitelist') {

      // Destination not matched against whitelist, so calls to this destination are NOT allowed.
      return FALSE;
    }
    elseif ($NCOSLevel->mode == 'blacklist') {

      // Destination not matched against blacklist, so calls to this destination are allowed.
      return TRUE;
    }

    // Unknown mode.
    return FALSE;
  }
  // NCOS not found.
  return FALSE;
}
/* default forward
*/
function hpbx_set_simple_default_callforward_values($cf_type, $form_state, &$Callforwards, $Subscriber,$CFSubscriber) { 

  if (empty($form_state['values']['call-forwards'][$cf_type]['destination_type'])) {

    if (isset($Callforwards->$cf_type)) {
      unset($Callforwards->$cf_type);
    }
    return;
  }
  elseif ($form_state['values']['call-forwards'][$cf_type]['destination_type'] == 'uri') {

    if (is_numeric($form_state['values']['call-forwards'][$cf_type]['destination_uri'])) { 
        $primary_number = (array)$CFSubscriber->primary_number;
        $cc = $primary_number['cc'];
        $destination = $cc.$form_state['values']['call-forwards'][$cf_type]['destination_uri'];
   }
    else {
      $destination = '';
    }
  }
  else {
    $destination = $form_state['values']['call-forwards'][$cf_type]['destination_type'];
  }

  $Callforwards->$cf_type = new stdClass();
  $cf = &$Callforwards->$cf_type;

  $cf->destinations[0] = array(
    'destination' => $destination, // Set dutch prefix.
    'timeout'=> 300,
    'priority' => 1,
  ); 

  if (isset($form_state['values']['call-forwards'][$cf_type]['times_api'])) {
    $cf->times = $form_state['values']['call-forwards'][$cf_type]['times_api'];
  }
  else {
    $cf->times = array();
  }

  if ($cf_type =='cft') {

    if (!empty($form_state['values']['call-forwards'][$cf_type]['ringtimeout'])) {
      $cf->ringtimeout = $form_state['values']['call-forwards'][$cf_type]['ringtimeout'];
    }
    else {
      $cf->ringtimeout = '30';
    }
  } 
  return;
}

/**
 *
 * @param string $cf_type
 * @param array $form_state
 * @param SipwiseEntity $cf
 * @return void
 */
function hpbx_set_simple_callforward_values($cf_type, $form_state, &$Callforwards, $Subscriber) {

  if (empty($form_state['values']['call-forwards'][$cf_type]['destination_type'])) {

    if (isset($Callforwards->$cf_type)) {
      unset($Callforwards->$cf_type);
    }
    return;
  }
  elseif ($form_state['values']['call-forwards'][$cf_type]['destination_type'] == 'uri') {

    if (is_numeric($form_state['values']['call-forwards'][$cf_type]['destination_uri'])) {
      $destination = sipwise_api_normalize_number($Subscriber->id, $form_state['values']['call-forwards'][$cf_type]['destination_uri']);
    }
    else {
      $destination = '';
    }
  }
  else {
    $destination = $form_state['values']['call-forwards'][$cf_type]['destination_type'];
  }

  $Callforwards->$cf_type = new stdClass();
  $cf = &$Callforwards->$cf_type;

  $cf->destinations[0] = array(
    'destination' => $destination, // Set dutch prefix.
    'timeout'=> 300,
    'priority' => 1,
  );

  if (isset($form_state['values']['call-forwards'][$cf_type]['times_api'])) {
    $cf->times = $form_state['values']['call-forwards'][$cf_type]['times_api'];
  }
  else {
    $cf->times = array();
  }

  if ($cf_type =='cft') {

    if (!empty($form_state['values']['call-forwards'][$cf_type]['ringtimeout'])) {
      $cf->ringtimeout = $form_state['values']['call-forwards'][$cf_type]['ringtimeout'];
    }
    else {
      $cf->ringtimeout = '30';
    }
  }
  return;
}


/**
 * Subscriber
 *  +--- CFMappings
 *          +--- CFDestinationSet
 *          +--- CFTimeSet
 */
function hpbx_set_out_of_office_callforward_values($form_state, $Subscriber) {

  $destinationsets = array();

  // Load/Find the quickset_cfu cfdestinationset as we need it to acomplish this task.
  if (!$destinationsets['quickset_cfu'] = current(sipwise_api_get_all('cfdestinationsets', array('subscriber_id' => $Subscriber->id, 'name' => 'quickset_cfu')))) {

    // Create new quickset_cfu destination set.
    $destinationsets['quickset_cfu'] = SipwiseEntity::create('cfdestinationsets');
    $destinationsets['quickset_cfu']->name = 'quickset_cfu';
    $destinationsets['quickset_cfu']->subscriber_id = $Subscriber->id;
  }

  // Update quickset_cfu destinationset.
  $destinationsets['quickset_cfu']->destinations = array();
  $destinationsets['quickset_cfu']->destinations[] = array(
    'destination' => 'autoattendant',
    'timeout' => 300,
    'priority' => 1, // Higher priority then the out_of_office destinationset..
  );
  $destinationsets['quickset_cfu']->save();

/*
  // Load/Find the out_of_office cfdestinationset as we need it to acomplish this task.
  if (!$destinationsets['out_of_office'] = current(sipwise_api_get_all('cfdestinationsets', array('subscriber_id' => $Subscriber->id, 'name' => 'out_of_office')))) {

    // Create new out of office destination set.
    $destinationsets['out_of_office'] = SipwiseEntity::create('cfdestinationsets');
    $destinationsets['out_of_office']->name = 'out_of_office';
    $destinationsets['out_of_office']->subscriber_id = $Subscriber->id;
  }

  // Update out_of_office destinationset.
  $destinationsets['out_of_office']->destinations = array();
  $destinationsets['out_of_office']->destinations[] = array(
    'destination' => 'officehours',
    'timeout' => 300,
    'priority' => 2, // Lower priority then the quickset.
  );

  $destinationsets['out_of_office']->save();
*/
  $timesets = array();

  // Load/Find the quickset_cfu cfdestinationset as we need it to acomplish this task.
  if (!$CFTimeSet = current(sipwise_api_get_all('cftimesets', array('subscriber_id' => $Subscriber->id, 'name' => 'quickset_cfu')))) {

    // Create new quickset_cfu destination set.
    $CFTimeSet = SipwiseEntity::create('cftimesets');
    $CFTimeSet->name = 'quickset_cfu';
    $CFTimeSet->subscriber_id = $Subscriber->id;
  }

   // Update quickset_cfu timeset.
  $CFTimeSet->times = $form_state['values']['call-forwards']['cfu']['times_api'];
  $CFTimeSet->save();

  // Save the CFMappings, to actually activate the quickset_cfu and out_of_office destinationsets and quickset_cfu timeset.
  $CFMappings = SipwiseEntity::load('cfmappings', $Subscriber->id, TRUE);

  $CFMappings->cfu = array();

  // Add the quickset_cfu.
  $CFMappings->cfu[] = array(
    'destinationset' => 'quickset_cfu',
    'timeset' => 'quickset_cfu'
  );
  /*
  // Add the out_of_office set.
  $CFMappings->cfu[] = array(
      'destinationset' => 'out_of_office',
      'timeset' => NULL,
  );
  */
  $CFMappings->save();

  return;
}

/**
 * Implements hook_theme().
 */
function hpbx_theme() {
  return array(
    'hpbx_table' => array(
        'render element' => 'form',
    ),
    'call_log_select' => array(
      'render element' => 'form',
    ),
    'hpbx_callforwards_table' => array(
      'render element' => 'form',
    ),
    'hpbx_foldable_list' => array(
      'render element' => 'call-forwards',
    ),
    'hpbx_foldable_list_item' => array(
      'render element' => 'type',
    ),
    'hpbx_timeslot' => array(
      'render element' => 'element',
    ),
    'hpbx_help_popups' => array(
      'render element' => 'element'
    ),
    'hpbx_timeslot_popup' => array(
      'render element' => 'element',
    ),
    'hpbx_audio_upload' => array(
      'render element' => 'element',
    ),
    'hpbx_file' => array(
      'render element' => 'element',
    ),
    'hpbx_huntgroup_user_tableselect' => array(
      'render element' => 'element'
    ),
    'hpbx_huntgroup_user_tableselect_option' => array(
        'render element' => 'element'
    ),
    'hpbx_circle' => array(
      'variables' => array('sub' => NULL, 'total' => NULL, 'sub_label' => NULL, 'type' => NULL, 'svg_id' => NULL, 'inner' => NULL, 'class' => array()),
    ),
    'hpbx_pie_chart' => array(
      'variables' => array('title' => NULL, 'subtitle' => NULL, 'tooltip' => NULL, 'value' => NULL, 'percentages' => NULL, 'inner' => NULL, 'class' => array(), 'labels' => NULL),
    ),
    'hpbx_dashboard_help' => array(),
    'hpbx_wizard_progress' => array('step' => NULL, 'total_steps' => NULL),
    'hpbx_wizard_form_element' => array(
          'render element' => 'element',
    ),
  );
}

function hpbx_help_get_help_url() {

  global $language, $base_path;

  if (!$reseller_id = sipwise_api_get_active_reseller()) {
    $reseller_id = 0;
  }
  $hpbx_url = '';
  foreach (hpbx_menu() as $path => $items) {
    //echo '/'. str_replace('%', '\d+', $path) . '$/' .PHP_EOL;
    //echo $_GET['q'] . PHP_EOL;
    //echo PHP_EOL . '=======' .PHP_EOL;
    if (preg_match('/'. str_replace('%', '\d+', str_replace('/', '\/', $path)) . '$/', $_GET['q'], $matches)) {

      $hpbx_url = $path;
      //print_r($hpbx_url);
      break;
    }
  }

  if (!empty($hpbx_url)) {

    if ($result = db_select('hpbx_help', 'h')
    ->fields('h')
    ->condition('h.hpbx_url', $hpbx_url)
    ->condition('h.lang', $language->language)
    ->condition('h.reseller_id', $reseller_id)
    ->execute()
    ->fetchAssoc()) {

      if (!empty($result['help_url']) && node_load($result['nid'])) {
        return $base_path . $result['lang'] . '/'. $result['help_url'];
      }
    }
  }
  return  '';
}

function theme_hpbx_help_popups () {


  global $user,$language, $ActiveReseller;


  $Resellers = hpbx_get_resellers();

  $account = $user;
  if (!empty($_SESSION['ccs']['hpbx']['masquerading_from'])) {
    $account = user_load($_SESSION['ccs']['hpbx']['masquerading_from']);
  }

  $output = '';
  if (user_access('edit any hpbx_help_article content', $account)) {

        drupal_add_js(drupal_get_path('module', 'hpbx') . '/includes/js/hpbx_help.js', array('scope' => 'footer'));
        global $base_path;
        $t = get_t();

        $url = hpbx_help_get_help_url();

        if (empty($url)) {
          $url = t('Type URL');
        }
        $output = <<<EOF
          <div id="hpbx-help-edit-media-library-popup-trigger"></div>
          <div id="hpbx-help-edit-media-library-popup" class="hpbx-help-edit-popup hpbx-help-edit-media-library-popup hpbx-popup mfp-hide">
              <div class="hpbx-help-edit-popup-header">
                  <div class="hpbx-help-edit-popup-header-icon"><span class="LGI-iconb-customer-large"></span></div>
                  <div class="hpbx-help-edit-popup-header-title">{$t('Add photo\'s from the media library')}</div>
              </div>
              <div class="hpbx-help-edit-popup-contents hpbx-scrollable-container">
                  <div class="hpbx-help-edit-media-library-popup-tag-filter">
                      <input type="text" class="sg-element" placeholder="{$t('Type filter')}" />
                  </div>
                  <div class="hpbx-help-edit-thumbnails">
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                      <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                          <label>
                              <input type="checkbox" />
                              <div class="hpbx-help-edit-thumbnail-outer">
                                  <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url(sites/all/themes/hpbx_theme{$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                      <div class="hpbx-help-edit-thumbnail-overlay">
                                      </div>
                                      <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                  </div>
                              </div>
                          </label>
                      </div>
                          <div class="hpbx-help-edit-thumbnail-container hpbx-selectable">
                              <label>
                                  <input type="checkbox" />
                                  <div class="hpbx-help-edit-thumbnail-outer">
                                      <div class="hpbx-help-edit-thumbnail-inner" style="background-image: url({$base_path }sites/all/themes/hpbx_theme/dist/img/wizard/upc-business-1.jpg)">
                                          <div class="hpbx-help-edit-thumbnail-overlay">
                                          </div>
                                          <div class="hpbx-help-edit-thumbnail-overlay-icon"></div>
                                      </div>
                                  </div>
                              </label>
                          </div>
                  </div>
                  <div class="clearfix"></div>
              </div>
              <div class="hpbx-help-edit-popup-footer">
                  <div class="hpbx-help-edit-popup-footer-left">
                      <input type="button" class="sg-btn sg-btn-small sg-without-icon sg-btn-primary" value="{$t('Save')}" data-click-handler="yourOwnCustomFunction">
                  </div>
                  <div class="hpbx-help-edit-popup-footer-right">
                      <a class="hpbx-tab-form-link-button hpbx-help-edit-popup-close-handle" href="#">{$t('Cance')}</a>
                  </div>
              </div>
          </div>


           <div id="hpbx-help-edit-url-popup" class="hpbx-dialog hpbx-help-edit-url-popup hpbx-popup mfp-hide">
            <div class="hpbx-dialog-header">
                <div class="hpbx-dialog-header-icon"><span class="LGI-iconedit"></span></div>
                <div class="hpbx-dialog-header-title">{$t('Select URL of Help page')}</div>
            </div>
            <div class="hpbx-dialog-contents">
                <div class="hpbx-form-login-caption">{$t('URL')}</div>

                          <select class="chzn-select sg-element" name="nid" style="width: 400px">
EOF;
        $selected = FALSE;

        $nodes = array();

        $account = $user;
        if (!empty($_SESSION['ccs']['hpbx']['masquerading_from'])) {
          $account = user_load($_SESSION['ccs']['hpbx']['masquerading_from']);
        }

        foreach (node_load_multiple(array(), array('type' => 'hpbx_help_article', 'language' => $language->language)) as $node) {

          // In case a reseller id is set on the node, ignore other resellers. Also LG (=0) is allowed to display.
          if (isset($account->data['sipwise']['reseller_id']) && $node->field_hpbx_reseller_id['und'][0]['value'] != $account->data['sipwise']['reseller_id']) {
            continue;
          }

          // Construct the title.
          $title = array();
          if ($node->field_hpbx_reseller_id['und'][0]['value'] == 0) {
            $title[] = 'LG';
          }
          elseif (isset($Resellers[$node->field_hpbx_reseller_id['und'][0]['value']])) {
            $title[] = $Resellers[$node->field_hpbx_reseller_id['und'][0]['value']]->name;

          }
          else {
            continue;
          }
          $title[] = strtoupper($language->language);
          $title[] = $node->title;

          $nodes[$node->nid] = implode(' - ', $title);




          if ($url == '/'. $language->language . '/node/'. $node->nid) {
            $selected = $node->nid;
          }
        }
        natsort($nodes);

        $output .= '<option '. (!$selected ? 'selected=selected' : '')  .' value="">'. '-'. t('Select') . '-' .'</option>';
        foreach ($nodes as $nid => $title) {
          $sel = '';
          if ($selected == $nid) {
            $sel = 'selected=selected';
          }
          $output .= '<option '. $sel .' value="'. $nid .'">'. $title.'</option>';
        }

$output .= <<<EOF
                  </select>
            </div>
            <div class="hpbx-dialog-footer">
                <div class="hpbx-dialog-footer-left">
                    <input type="button" class="sg-btn sg-btn-small sg-without-icon sg-btn-primary" value="{$t('Save')}" data-click-handler="URLEditSubmit">
                </div>
                <div class="hpbx-dialog-footer-right">
                    <a class="hpbx-tab-form-link-button hpbx-dialog-close-handle" href="#">{$t('Cancel')}</a>
                </div>
            </div>
        </div>
EOF;
      }
  return $output;
}
/**
 *
 * @param unknown $variables
 * @return string
 */
function theme_hpbx_circle(&$variables) {
  $output = '
   <div class="hpbx-progress-circle-container">
      <div class="hpbx-progress-circle '. implode('  ', $variables['class']) . '" data-value="'.$variables['sub'].'" data-total="'.$variables['total'].'" data-svg-id="'. $variables['svg_id']. '">
        <svg id="'.$variables['svg_id'].'" class="hpbx-progress-circle-svg"></svg>
        <div class="hpbx-progress-circle-inner">'. $variables['inner'] .'</div>
      </div>
      <div class="hpbx-progress-circle-title"><span class="hpbx-progress-circle-title-amount">'.$variables['sub'].'</span> '. $variables['sub_label']. '</div>
      <div class="hpbx-progress-circle-subtitle">'. $variables['total'] .' '. t('total') . '</div>
    </div>';

  return $output;
}

/**
 * Implementation of hook_preprocess_menu_tree().
 */
function hpbx_preprocess_menu_tree(&$variables) {

  global $user;

  if (arg(0) == 'hpbx') {
    drupal_add_js(drupal_get_path('module', 'hpbx') . '/includes/js/hpbx.js', array('scope' => 'footer'));
    $variables['username'] = $variables['role'] = $variables['company'] = '';

    if (in_array('HostedPBX Customer Administrator', $user->roles)) {
      $variables['role'] = 'admin';
    }

    if (!empty($user->data['sipwise']['account']['dn'])) {
      $dn = explode(',', $user->data['sipwise']['account']['dn']);

      if (!empty($user->data['sipwise']['customer_id'])) {
        $Customer = hpbx_get_active_customer();
        $CustomerContact = SipwiseEntity::load('customercontacts', $Customer->contact_id);
        if (!empty($CustomerContact->company)) {
          $variables['company'] = $CustomerContact->company;
        }
      }
      list($f, $variables['username']) = explode('=', $dn[0]);
    }
  }
}

/**
 * Implementation of hook_preprocess_menu_link().
 */
function hpbx_preprocess_menu_link(&$variables) {

  // Add voicemail counter.
  if ($variables['element']['#title'] == t('Voicemail')) {
    $variables['element']['#icon_suffix'] = '<div class="hpbx-menu-item-count"></div>';
  }

  // Add classes based on link.
  $classes = array(
    'hpbx/fax' => 'hpbx-menu-item-fax hpbx-menu-item-everyone',
    'hpbx/call-log' => 'hpbx-menu-item-call-log hpbx-menu-item-everyone',
    'hpbx/settings' => 'hpbx-menu-item-personal-settings hpbx-menu-item-everyone',
    'hpbx/bp/settings' => 'hpbx-menu-item-personal-settings hpbx-menu-item-admin',
    'hpbx/voicemails' => 'hpbx-menu-item-voicemail hpbx-menu-item-everyone',
    'hpbx/dashboard' => 'hpbx-menu-item-dashboard hpbx-menu-item-admin',
    'hpbx/subscriber/bulk' => 'hpbx-menu-item hpbx-submenu-item hpbx-menu-item-bulk-upload hpbx-menu-item-admin',
    'hpbx/wizard/employee' => 'hpbx-menu-item hpbx-submenu-item hpbx-menu-item-start-wizard hpbx-menu-item-admin',
    'hpbx/subscribers' => 'hpbx-menu-item-subscribers hpbx-menu-item-admin',
    'hpbx/pbxdevices' => 'hpbx-menu-item-pbx-devices hpbx-menu-item-admin',
    'hpbx/huntinggroups' => 'hpbx-menu-item-hunting-groups hpbx-menu-item-admin',
    'hpbx/auto-attendants' => 'hpbx-menu-item-auto-attendant hpbx-menu-item-admin',
    'hpbx/conference-rooms' => 'hpbx-menu-item-conference-room hpbx-menu-item-admin',
    'hpbx/logout' => 'hpbx-menu-item-logout hpbx-menu-item-sub',
    'hpbx/password' => 'hpbx-menu-item-password hpbx-menu-item-sub',
    'hpbx/default-forward' => 'hpbx-menu-item-default-forward hpbx-menu-item-admin',
    'hpbx/download' => 'hpbx-menu-item-download hpbx-menu-item-sub',
    'hpbx/music-on-hold' => 'hpbx-menu-item-music-on-hold hpbx-menu-item-admin',
    'hpbx/customers' => 'hpbx-menu-item-customers hpbx-menu-item-admin',
    'hpbx/affiliates' => 'hpbx-menu-item-customers hpbx-menu-item-admin',
    'hpbx/affiliate/settings' => 'hpbx-menu-item-personal-settings hpbx-menu-item-admin',
    'hpbx/users' => 'hpbx-menu-item-subscribers hpbx-menu-item-admin',
    'hpbx/bp/users' => 'hpbx-menu-item-subscribers hpbx-menu-item-admin',
    'hpbx/bps' => 'hpbx-menu-item-customers hpbx-menu-item-admin',
  );

  if (array_key_exists($variables['element']['#href'], $classes)) {
    $variables['element']['#attributes']['class'][] = $classes[$variables['element']['#href']];
  }

  // Add an extra line after password menu item.
  if ($variables['element']['#href'] == 'hpbx/password') {
    $variables['element']['#prefix'] = '</ul><ul class="hpbx-menu-items-sub">';
  }
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function hpbx_search_api_index_items_alter(array &$items, SearchApiIndex $index) {

  foreach ($items as $id => $item){
    // Exclude LG (reseller_id = 0) articles from beeing indexed.
    if (isset($item->field_hpbx_reseller_id) && $item->field_hpbx_reseller_id[LANGUAGE_NONE][0]['value'] == '0') {
      unset($items[$id]);
    }
  }
}

/**
 *
 * @param unknown $variables
 * @return string
 */
function theme_hpbx_pie_chart(&$variables) {
  $output = '
  <div class="hpbx-pie-chart-container">
    <div class="hpbx-pie-chart" data-percentages="'. implode(',', $variables['percentages']).'" data-labels="'. implode(',', $variables['labels']).'" data-svg-id="'. $variables['svg_id']. '">
      <svg id="'.$variables['svg_id'].'" class="hpbx-pie-chart-svg"></svg>
      <div class="hpbx-pie-chart-inner">'. $variables['inner'] .'</div>
      <div class="hpbx-pie-chart-tooltip"></div>
    </div>';

  if ($variables['percentage_display']) {
    $output .= '
    <div class="hpbx-percentage-display" data-value="'.$variables['value'].'" data-svg-id="display-'. $variables['svg_id']. '">
      <svg id="display-'. $variables['svg_id']. '" class="hpbx-percentage-display-svg"></svg>
    </div>';
  }
  else {
    $output .= '<div class="hpbx-percentage-display"></div>';
  }

    $output .= '
    <div class="hpbx-pie-chart-title hpbx-ie8">'. $variables['title'] .'</div>
    <div class="hpbx-pie-chart-subtitle">'. $variables['subtitle'] .'</div>
    <div class="hpbx-ie8">'. PHP_EOL . (!empty($variables['tooltip']) ? implode('<br />'. PHP_EOL, $variables['tooltip']) : '') . '<br /> </div>
  </div>';
  return $output;
}


/**
 *
 * @param unknown $variables
 * @return string
 */
function theme_hpbx_huntgroup_user_tableselect(&$variables) {

  $element = &$variables['element'];


  $rows = array();
  $header = $element['#header'];

  if (!empty($element['#options'])) {

    // Generate a table row for each selectable item in #options.
    foreach (element_children($element) as $key) {
      $row = array();
      $row['data'] = array();

      if (isset($element['#options'][$key]['#attributes'])) {
        $row += $element['#options'][$key]['#attributes'];
      }

      // $element[$key]['#prefix'] = '<input type="hidden" name="subscribers[1][weight]" value="
      $element[$key]['#prefix'] = $element['#options'][$key]['#prefix'];
      $element[$key]['#caption'] = $element['#options'][$key]['#caption'];
      $element[$key]['#theme_wrappers'] = array();
      $element[$key]['#attributes']['data-checkbox-id'] = $key;
      $rows[] = array('data' => drupal_render($element[$key]), 'class' => array('hpbx-hunting-group-user'));
    }
  }


  $menu_head  = '<div class="hpbx-menu hpbx-menu-over-menu">
            <div class="hpbx-menu-over-menu-title-container">
                <div class="hpbx-menu-handle hpbx-menu-handle-open hpbx-menu-over-menu-menu-handle-open"></div>
                <div class="hpbx-menu-over-menu-title">'. $element['#member_menu_title'] .'</div>
            </div>';

  $output = '<div class="hpbx-hunting-group-search-container">
                <span class="hpbx-hunting-group-search-icon LGI-iconsearch"></span>
                <input type="text" class="hpbx-hunting-group-search-input sg-element" placeholder="'. t('search') .'">
            </div>';

  if (isset($element['#selectall']) && $element['#selectall']) {
    $output .= '
    <div class="hpbx-hunting-group-select-all" >
      <div class="sg-custom-check-and-radio sg-custom-check" >
        <label title = "" >
          <input type = "checkbox" />
          <span class="sg-caption" >'. t('Select all') . '</span >
          <div class="sg-alternative-display" >
              <div class="sg-icon-check" ></div >
          </div >
        </label >
      </div >
    </div >';
  }

  $attributes =array('class' => array('hpbx-hunting-group-users'));

  if (isset($element['#sortable']) && $element['#sortable']) {
    $attributes['class'][] = 'hpbx-drag-drop-sortable';
  }

  $output .= theme('item_list', array(
    'items' => $rows,
    'attributes' => $attributes)
  );

  $menu_foot .= '</div>';

  global $hpbx_over_menu;

  // Replace id's for menu content.
  $hpbx_over_menu = str_replace('edit-subscribers-', 'menu-edit-subscribers-', $menu_head . $output . $menu_foot);
  return $output;
}

function theme_hpbx_foldable_list_item(&$variables) {

  $element = &$variables['type'];

  $element += array('#attributes' => array());

  $header_attributes = $element['#attributes'];
  $content_attributes = $element['#attributes'];

  $header_attributes['class'][] = 'hpbx-foldable-heading';

  if (isset($element['#collapsed']) && $element['#collapsed'] == FALSE) {
    $header_attributes['class'][] = 'hpbx-foldable-state-open';
  }

  $content_attributes['class'][] = 'hpbx-foldable-content';

  $output = '<dt '.drupal_attributes($header_attributes).'>
  <span class="hpbx-foldable-heading-title sg-header-5">'. $element['#title'] .'</span>
  <span class="hpbx-foldable-heading-state" data-show-label="'. t('Show') . '" data-hide-label="'.t('Hide').'">'. t('Hide') .'</span>';

  if (isset($element['#toggle'])) {

    $toggle_attributes = array(
      'data-toggle-type' => $element['#toggle']['type'],
      'type' => "checkbox",
      'name' => "sg-custom-toggle-sc",
      'id' => "sg-custom-toggle-sc",
      'value' => 1,
    );

    if ($element['#toggle']['state']) {
      $toggle_attributes['checked'] = 'checked';
    }

    $toggle_attributes = drupal_attributes($toggle_attributes);
    $output .= <<<EOF
    <div class="sg-custom-toggle sg-slide-colors">
      <label title="">
        <input {$toggle_attributes}/>
          <div class="sg-caption-container">
            <div class="sg-caption"></div>
          </div>
          <div class="sg-alternative-display">
            <div class="sg-on"></div>
            <div class="sg-off"></div>
          <div class="sg-knob">
            <div class="sg-dot"></div>
          </div>
        </div>
      </label>
    </div>
EOF;
  }

  $output .= '</dt>';

  $output .= '<dd '. drupal_attributes($content_attributes) . '>';
  $output .= $element['#children'];
  $output .= '</dd>';

  return $output;
}

function theme_hpbx_audio_upload(&$variables) {

  $element = &$variables['element'];

  $output = '
    <span class="hpbx-audio-selector">
      <div '.  drupal_attributes($element['#wrapper_attributes']) .'>'. t('Pick a file');

  $output .= $element['#children'];

  $output .= '
      </div>
      <span class="sg-btn-icon LGI-iconb-arrow-right-bold"></span>
      <span class="sg-btn-file-input-label"></span>
    </span>
      ';
  return $output;
}


function theme_hpbx_file(&$variables) {
  $element = &$variables['element'];

  $output = <<<EOF
  <div class="row">
    <div class="hpbx-tab-form-label-field-row">
      <div class="col-xs-12 col-sm-3">
          <div class="hpbx-tab-form-label">%s</div>
      </div>
      <div class="col-xs-12 col-sm-8 col-md-7">
        <div class="hpbx-tab-form-field">
          <div %s>%s%s</div>
          <span class="sg-btn-icon LGI-iconb-arrow-right-bold"></span>
          <span class="sg-btn-file-input-label"></span>
        </div>
      </div>
    </div>
  </div>
EOF;

  return sprintf($output, t('File upload') . '*',
    isset($element['#wrapper_attributes']) ? drupal_attributes($element['#wrapper_attributes']) : '',
    t('Pick a file'),  $element['#children']);
}


function hpbx_element_info() {
  return array('hpbx_timeslot' => array(
    '#input' => TRUE,
    '#theme' => array('hpbx_timeslot'),
    '#theme_wrapper' => array('form_element'),
    '#value_callback' => 'hpbx_timeslot_value_callback',
    '#process' => array('hpbx_timeslot_element_process'),
  ));
}


function hpbx_timeslot_element_process($element, $form_state, $complete_form) {
  return $element;
}


function hpbx_timeslot_value_callback($element, $input = FALSE, &$form_state) {
  if ($input !== FALSE && $input !== NULL) {
    // This should be a string, but allow other scalars since they might be
    // valid input in programmatic form submissions.
    if (!is_scalar($input)) {
      $input = '';
    }
    return $input;
  }
}


function theme_hpbx_timeslot_popup($variables) {

  $output = '
  <!-- Timeslots popup -->
        <div id="timeslot-popup" class="hpbx-popup mfp-hide">
            <div class="hpbx-popup-content">
                <h4 class="hpbx-popup-title">'. t('Add a time slot') .'</h4>
                <form class="hpbx-popup-form">
                    <div class="hpbx-popup-form-row">
                        <div class="hpbx-popup-form-item-left">
                            <div class="hpbx-popup-form-label">'. t('Start') .'</div>
                            <div class="hpbx-popup-form-field">
                                <input type="text" class="sg-element hpbx-timeslot-start" placeholder="01:00">
                            </div>
                        </div>
                        <div class="hpbx-popup-form-item-right">
                            <div class="hpbx-popup-form-label">'. t('End') .'</div>
                            <div class="hpbx-popup-form-field">
                                <input type="text" class="sg-element hpbx-timeslot-end" placeholder="23:00">
                            </div>
                        </div>
                    </div>
                    <div class="hpbx-popup-form-row">
                        <div class="hpbx-popup-form-label">'. t('Use on') .'</div>
                        <div class="hpbx-popup-form-days-container">
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-monday" id="hpbx-timeslot-monday" class="hpbx-timeslot-monday" value="1">
                                <label for="hpbx-timeslot-monday" title="">'. truncate_utf8(t('Monday'), 1) .'</label>
                            </div>
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-tuesday" id="hpbx-timeslot-tuesday" class="hpbx-timeslot-tuesday" value="1">
                                <label for="hpbx-timeslot-tuesday" title="">'. truncate_utf8(t('Tuesday'), 1) .'</label>
                            </div>
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-wednesday" id="hpbx-timeslot-wednesday" class="hpbx-timeslot-wednesday" value="1">
                                <label for="hpbx-timeslot-wednesday" title="">'. truncate_utf8(t('Wednesday'), 1) .'</label>
                            </div>
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-thursday" id="hpbx-timeslot-thursday" class="hpbx-timeslot-thursday" value="1">
                                <label for="hpbx-timeslot-thursday" title="">'. truncate_utf8(t('Thursday'), 1) .'</label>
                            </div>
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-friday" id="hpbx-timeslot-friday" class="hpbx-timeslot-friday" value="1">
                                <label for="hpbx-timeslot-friday" title="">'. truncate_utf8(t('Friday'), 1).'</label>
                            </div>
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-saturday" id="hpbx-timeslot-saturday" class="hpbx-timeslot-saturday" value="1">
                                <label for="hpbx-timeslot-saturday" title="">'. truncate_utf8(t('Saturday'), 1) .'</label>
                            </div>
                            <div class="hpbx-day-checkbox">
                                <input type="checkbox" name="hpbx-timeslot-sunday" id="hpbx-timeslot-sunday" class="hpbx-timeslot-sunday" value="1">
                                <label for="hpbx-timeslot-sunday" title="">'. truncate_utf8(t('Sunday'), 1) .'</label>
                            </div>
                        </div>
                    </div>
<!--
                    <div class="hpbx-popup-form-add-rule">
                        <div class="sg-custom-check-and-radio sg-custom-check">
                            <input type="checkbox" name="hpbx-add-rule" class="hpbx-timeslot-add-rule" id="hpbx-timeslot-add-rule" value="1" />
                            <label for="hpbx-timeslot-add-rule">
                                <span class="sg-caption">'. t('Add another rule'). '</span>
                                <div class="sg-alternative-display">
                                    <div class="sg-icon-check"></div>
                                </div>
                            </label>
                        </div>
                    </div>
-->
                    <div class="hpbx-popup-form-buttons-row">
                      <!-- Bug #9632 - Adjust messages for "call forward during active" -->
                      <div class="hpbx-timeslot-error sg-input-error" data-error-no-day-selected="'. t('Select at least one day for time slot'). '" data-error-invalid-start-time="'. t('Invalid Start time format'). '" data-error-invalid-end-time="'. t('Invalid End time format'). '" data-error-empty-start-time="'. t('Start time cannot be empty') .'" data-error-empty-end-time="'. t('End time cannot be empty') .'" data-error-slot-overlap-msg="'. t('Timeslot overlaps not possible'). '"></div>
                      <input type="submit" class="hpbx-submit-timeslots sg-btn sg-without-icon sg-btn-primary" value="'. t('Set').'">
                    </div>
                </form>
            </div>
        </div>

        <!-- Timeslots edit popup -->
        <div id="timeslot-edit-popup" class="hpbx-popup mfp-hide">
          <div class="hpbx-popup-content">
            <h4 class="hpbx-popup-title">'. t('Edit a time slot') . '</h4>
              <form class="hpbx-popup-form">
                <div class="hpbx-popup-form-row">
                  <div class="hpbx-popup-form-item-left">
                    <div class="hpbx-popup-form-label">'. t('Start') .'</div>
                      <div class="hpbx-popup-form-field">
                        <input type="text" class="sg-element hpbx-timeslot-start" placeholder="01:00">
                      </div>
                    </div>
                    <div class="hpbx-popup-form-item-right">
                      <div class="hpbx-popup-form-label">'. t('End') . '</div>
                        <div class="hpbx-popup-form-field">
                          <input type="text" class="sg-element hpbx-timeslot-end" placeholder="23:00">
                        </div>
                      </div>
                    </div>
                    <div class="hpbx-popup-form-buttons-row">
                      <!-- Bug #9632 - Adjust messages for "call forward during active" -->
                      <div class="hpbx-timeslot-error sg-input-error" data-error-no-day-selected="'. t('Select at least one day for time slot'). '" data-error-invalid-start-time="'. t('Invalid Start time format'). '" data-error-invalid-end-time="'. t('Invalid End time format'). '" data-error-empty-start-time="'. t('Start time cannot be empty') .'" data-error-empty-end-time="'. t('End time cannot be empty') .'" data-error-slot-overlap-msg="'. t('Timeslot overlaps not possible'). '"></div>
                          <a class="hpbx-popup-form-link-button hpbx-remove-timeslot" href="#">'. t('Remove')  .'</a>
                          <input type="submit" class="hpbx-submit-timeslots sg-btn sg-without-icon sg-btn-primary" value="'. t('Set') .'">
                      </div>
                  </form>
              </div>
          </div>
';
  return $output;
}

/**
 *
 * @param unknown $variables
 * @return string
 */
function theme_hpbx_timeslot($variables) {

  $element = &$variables['element'];

  $output = '';

  $min = 0;
  $max = 1440;

  $output .= <<<EOF
  <div class="row hpbx-deletable-row hpbx-timeslot-row">
    <div class="hpbx-tab-form-label-field-row">
      <div class="col-xs-12 col-md-3">
        <div class="hpbx-tab-form-label">{$element['#title']}</div>
      </div>
      <div class="col-xs-10 col-sm-11 col-md-8">
        <div class="hpbx-tab-form-field">
EOF;
  $output .= '<input class="hpbx-timeslots-input" data-min="0" data-max="1440" type="hidden" name="'. $element['#name'] .'" value="'. str_replace('"', "'", $element['#default_value']) .'" />';

$output .= '
        </div>
      </div>
      <div class="col-xs-2 col-sm-1 col-md-1">
        <div class="hpbx-tab-form-field">
          <div class="hpbx-delete hpbx-delete-timeslots sg-btn sg-btn-small sg-white sg-btn-secondary" data-target="'.$element['#name'].'" title="'. t('Delete') . '">
            <span class="sg-btn-icon LGI-iconb-cross-bold"></span>
          </div>
        </div>
      </div>
    </div>
  </div>';

  return $output;
}

function theme_hpbx_foldable_list(&$variables) {

  $output = '<dl class="hpbx-foldable-list">';
  $output .= $variables['call-forwards']['#children'];
  $output .= '</dl>';
  return $output;
}


function theme_hpbx_callforwards_table($variables) {

  $form = $variables['form'];

  // Individual table headers.
  $rows = array();

  foreach (element_children($form) as $key) {

    $row = array();

    foreach (element_children($form[$key]) as $element) {
      $row[] = drupal_render($form[$key][$element]);
    }
    $rows[] = $row;
  }
  $variables = array(
      'empty' => '<i>'. t('No entries found') . '</i>',
      'rows' => $rows
  );

  if (isset($form['#header'])) {
    $variables['header'] = $form['#header'];
  }

  return theme('table', $variables);
}


function theme_hpbx_table($variables) {

  $form = $variables['form'];

  // Individual table headers.
  $rows = array();

  $remove = FALSE;
  if (!empty($form['#remove_title'])) {
    $btn_attributes = array(
      'class' => array('hpbx-delete', 'js-delete', 'sg-btn', 'sg-btn-small', 'sg-btn-secondary'),
      'title' => $form['#remove_title'],
    );

    $spn_attributes = array(
      'class' => array('sg-btn-icon', 'LGI-iconb-cross-bold'),
    );

    $remove = array(
      '#markup' => '<div'. drupal_attributes($btn_attributes) . '><span'. drupal_attributes($spn_attributes) . ' /></div>',
    );

    $form['#header']['action'] = array('data'=> '', 'class' => array('hpbx-show-xs'));
  }

  foreach (element_children($form) as $key) {

    $row = array();


    foreach (element_children($form[$key]) as $element) {

      $cell = array(
        'data' => drupal_render($form[$key][$element])
      );

      // Set title element, for example in case of truncated elements.
      if (!empty($form[$key][$element]['data']['#attributes']['title']) && !empty($form[$key][$element]['data']['#markup']) &&
        $form[$key][$element]['data']['#markup'] != $form[$key][$element]['data']['#attributes']['title']) {

        $cell['title'] = $form[$key][$element]['data']['#attributes']['title'];
      }

      if (isset($form[$key][$element]['#attributes'])) {
        $cell += $form[$key][$element]['#attributes'];
      }

      $row[] = $cell;
    }
    if ($remove) {
      if (!isset($form[$key]['#attributes']['delete']) || $form[$key]['#attributes']['delete']!=FALSE) {
        $r = $remove;
        $row[] = array('data' => drupal_render($r), 'class' => array('hpbx-show-xs'));
      }
      else {
        // Empty cell.
        $row[] = array('data' => '', 'class' => array('hpbx-show-xs'));
      }
    }

    $temp_d = array();
    foreach ($row as $r) {
      $temp_d[] = $r['data'];
    }

    if (implode('', $temp_d) != '') {

      $tr = array(
        'data' => $row,
      );

      if (!empty($form[$key]['#url'])) {
        $tr['data-url'] = $form[$key]['#url'];
      }


      if (isset($form[$key]['#attributes'])) {
        $tr += $form[$key]['#attributes'];
      }

      $rows[] = $tr;
    }
  }

  $variables = array(
    'empty' => '<i>'. t('No entries found') . '</i>',
    'rows' => $rows
  );

  if (!empty($form['#empty'])) {
    $variables['empty'] = $form['#empty'];
  }

  if (!empty($form['#add'])) {
    $variables['caption'] = $form['#add'];
  }
  elseif (!empty($form['#caption'])) {
    $variables['caption'] = $form['#caption'];
  }
  if (isset($form['#header'])) {
    $variables['header'] = $form['#header'];
    $variables['colgroups']['group'] = array();
    foreach ($variables['header'] as $colgroup => $header) {

      $group = array('class' => array('hpbx-col-'. $colgroup));

      if (!empty($header['width'])) {
        $group['width'] = $header['width'];
      }
      $variables['colgroups']['group'][] = $group;
    }
  }
  if (isset($form['#class'])) {
    $variables['attributes']['class'] = $form['#class'];
  }

  return theme('table', $variables);
}


function hpbx_form_alter(&$form, &$form_state, $form_id) {

  // Check the form_id
  if ($form_id == 'node_delete_confirm' && $form['#node']->type == 'hpbx_help_article') {

    require_once(drupal_get_path('module', 'hpbx') .'/includes/hpbx.help.inc');

    $form['actions']['submit']['#prefix'] = '<span class="submit-button">';
    $form['actions']['submit']['#suffix'] = '</span></div>';
    $form['actions']['submit']['#attributes'] = array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary'));

    $form['actions']['cancel']['#attributes'] = array('class' => array('hpbx-tab-form-link-button'));
    $form['actions']['cancel']['#prefix'] = '<div class="col-xs-12">';
    $form['actions']['cancel']['#href'] .= '/edit';
    $form['actions']['cancel']['#options']['path'] .= '/edit';


    $form['actions']['#attributes'] = array('class' => array('hpbx-tab-form-buttons-row'));
    $form['actions']['#prefix'] = '<div class="row">';
    $form['actions']['#suffix'] = '</div>';

    $form['actions']['cancel']['#weight'] = 1;
    $form['actions']['submit']['#weight'] = 2;

    $form['#submit'][] = 'hpbx_help_delete_confirm_redirect';
  }

  elseif (in_array($form_id, array('hpbx_help_article_node_form', 'hpbx_help_article_steps_node_form'))) {

    require_once(drupal_get_path('module', 'hpbx') .'/includes/hpbx.help.inc');
    hpbx_help_article_node_form_alter($form, $form_state, $form_id);

  }

  // Change the date/time (wrong timezone) in "24 hour valid".
  elseif ($form_id == 'user_pass_reset' && isset($form['#action']) && isset($form_state['build_info']['args'][0])) {

    // We can savely use the uid, as we passed the validation within the original form.
    $account = user_load($form_state['build_info']['args'][0]);

    if (!empty($account->data['sipwise']['account']['cn'][0])) {
      $name = $account->data['sipwise']['account']['cn'][0];
    }
    else {
      $name = $account->name;
    }

    // Set new message.
    $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire after 24 hours.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $name)));
  }
}

function hpbx_cron(){
    $Resellers = hpbx_get_resellers();
    require_once(drupal_get_path('module', 'hpbx') .'/includes/hpbx.reseller.inc');
    $interval = variable_get('hpbx_cron_interval', 60 * 60 * 12 );
    if (time() >= variable_get('hpbx_cron_next_execution', 0)) {
      foreach ($Resellers as $Reseller){
	    hpbx_reseller_clear_cache ($Reseller->id, TRUE);
	    sipwise_api_activate_reseller($Reseller->id);
	    $query['reseller_id'] = $reseller_id;
	    sipwise_api_get_all('customers', $query, FALSE, FALSE, FALSE);
	    watchdog('hpbx_cron', 'reseller clear cache cron ran');
	    variable_set('hpbx_cron_next_execution', time() + $interval);
	  }
	}
}

function hpbx_ajax_add_more_sites(&$form, &$form_state, $SipwiseEntity) {

  global $ActiveReseller;

  $emergency_indexes = variable_get('hpbx_emergency_indexes_'. $ActiveReseller->id, array());

  unset($emergency_indexes['']);

  drupal_add_js(array('hpbx_emergency_indexes' => $emergency_indexes), 'setting');
  if (arg(1)== 'affiliate') {
    drupal_add_js(array('reseller_id' => $reseller_id), 'setting');
  }

  $options = array();
  foreach ($emergency_indexes as $region => $townships) {
    foreach ($townships as $township => $cities) {
      foreach ($cities as $city => $z_gms) {
        foreach ($z_gms as $z_gm => $location_id) {
          $options['cities'][] = $city;
          $options['townships'][] = $township;
          $options['z_gms'][] = $z_gm;
          $options['regions'][] = $region;
        }
      }
    }
  }

  natcasesort($options['cities']);
  natcasesort($options['townships']);
  natcasesort($options['z_gms']);
  natcasesort($options['regions']);

  if (!isset($form_state['triggering_element']['#value']) || $form_state['triggering_element']['#type'] != 'button') {
    $_SESSION['ccs']['hpbx']['add_more_sites'] = array();
  }

  $template_row = array();
  $template_row['id']['data'] = array(
    '#type' => 'hidden',
    '#required' => TRUE,
  );

  if ($SipwiseEntity->table == 'multisite') {
    $prefix = '';
    $slots_var = 'multisite';

    $template_row['site_name']['data'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Site Name'),
      '#attributes' => array(
        'class' => array('sg-element'),
      ),
    );

  if (!empty($ActiveReseller->_settings->enable_restricted_access)) {
      $template_row['ips']['data'] = array(
        '#type' => 'textarea',
        '#required' => FALSE,
        '#rows' => 3,
        '#title' => t('Allowed IPs'),
        '#attributes' => array(
          'class' => array('sg-element'),
        ),
      );
  }

  if (isset($ActiveReseller->_settings->polish_emergency_routing) && $ActiveReseller->_settings->polish_emergency_routing) {
    $template_row['region']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('Region'),
      '#empty_option' => t('Choose an option'),
      '#options' => drupal_map_assoc($options['regions']),
      '#attributes' => array(
        'class' => array('chzn-select','sg-element'),
      ),
    );
    $template_row['township']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('Township'),
      '#empty_option' => t('Choose an option'),
      '#options' => drupal_map_assoc($options['townships']),
      '#attributes' => array(
        'class' => array('chzn-select','sg-element'),
      ),
    );
    $template_row['city']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('City'),
      '#empty_option' => t('Choose an option'),
      '#options' => drupal_map_assoc($options['cities']),
      '#attributes' => array(
        'class' => array('chzn-select','sg-element'),
      ),
    );
    $template_row['z_gm']['data'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('Z gm.'),
      '#empty_option' => t('Choose an option'),
      '#options' => drupal_map_assoc($options['z_gms']),
      '#attributes' => array(
        'class' => array('chzn-select','sg-element'),
      ),
    );
  }

  }
  else {
    return FALSE;
  }

  // Delete button.
  $template_row['op']['data'] = array(
    '#type' => 'button',
    '#value' => t('Delete'),
    '#ajax' => array(
      'callback' => 'hpbx_'. $SipwiseEntity->table .'_delete_callback',
      'wrapper' => 'hpbx-'. $SipwiseEntity->table .'-table-wrapper'
    ),
    '#limit_validation_errors' => array(),
    '#prefix' => '<span class="submit-button">',
    '#suffix' => '</span>',
    '#attributes' => array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary'), 'style' => 'margin-left:20cm;'),
  );

  // Add the already configured lines to the form storage, but only on first load (so not on ajax load).
  if (!isset($form_state['clicked_button']['#value']) && isset($SipwiseEntity->$slots_var)) {

    foreach ($SipwiseEntity->$slots_var as $id => $rows) {

      $row = array();
      foreach ($template_row as $template_row_cell_key => $template_row_cell) {

        // For destination the prefix and suffix must be stripped.
        if ($template_row_cell_key!='op' && $template_row_cell_key!='id') {
          // Set the default values.
          $row[$template_row_cell_key] = array('data' => $rows->$template_row_cell_key);
        }
      }
      $row['id'] = array('data' => $id);
      $_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows'][$row['id']['data']] = $row;
    }
  }

  // Create the table.
  $form[$SipwiseEntity->table]['table'] = array(
    '#type' => 'container',
    '#title' => '',
    '#collapsible' => FALSE,
    '#tree' => TRUE,
//
  );

  // Set the wrapper div, required for the AJAX response.
  $form[$SipwiseEntity->table]['table']['#prefix'] = '<div id="hpbx-'. $SipwiseEntity->table .'-table-wrapper">';
  $form[$SipwiseEntity->table]['table']['#suffix'] = '</div>';

  $deleted_slot = NULL;

  // In case the 'Add' or 'Remove' line button is clicked. Add the values to the session..
  if (isset($form_state['clicked_button']['#value'])) {
    if ($SipwiseEntity->table == 'multisite') {
      if ($form_state['clicked_button']['#value'] == t('Add')) {

        // Add all rows to the storage.
        if(count($form_state['input']['general']['multisite']['table']) <= $ActiveReseller->_settings->number_of_sites){
          $_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows'] = $form_state['input']['general'][$SipwiseEntity->table]['table'];
        }

        unset($form_state['input']['general'][$SipwiseEntity->table]['table']);
      }
      elseif ($form_state['clicked_button']['#value'] == t('Delete')) {
        $deleted_slot = $form_state['clicked_button']['#name'];
      }
    }
  }

  // Add all existing (real and in session) to the table.
  if (isset($_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows'])) {

    foreach ($_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows'] as $slot => $row) {

      $new_row = $template_row;
      $new_row['op']['data']['#name'] = $row['id']['data'];

      foreach ($template_row as $template_row_cell_key => $template_row_cell) {
        //if ($template_row_cell_key!='op') {

          // Set the default values.
          $new_row[$template_row_cell_key]['data']['#default_value'] = $row[$template_row_cell_key]['data'];
       // }
      }


      if (isset($row['id']['data'])) {
        if (!empty($row['site_name']['data'])) {
          // Add the row to the table.
          $form[$SipwiseEntity->table]['table'][$row['id']['data']] = $new_row;
        }
      }
    }
  }

  // Verify if a row has been deleted.
  if (!is_null($deleted_slot)) {
    // Remove that specific row from the storage.
    if($_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows'][$deleted_slot] == NULL){
      unset($_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows']['add']);
    }else{
      unset($_SESSION['ccs']['hpbx']['add_more_sites']['values'][$SipwiseEntity->table]['rows'][$deleted_slot]);
    }
    unset($form[$SipwiseEntity->table]['table'][$deleted_slot]);
  }

  // Remove required attribute and default value.
  foreach ($template_row as &$row) {
    unset($row['data']['#required']);

    unset($row['data']['#default_value']);

    $row['data']['#value'] = '';


  }

  // Set new ID value.
  $template_row['id']['data']['#value'] = uniqid();

  // Assign the template row to the last row.
  $form[$SipwiseEntity->table]['table']['add'] = $template_row;

  foreach ($form[$SipwiseEntity->table]['table'] as $keys => $values){
    foreach ($values as $key => $value){
	  if(in_array($key, array('region', 'township', 'city', 'z_gm'))){
        $form[$SipwiseEntity->table]['table'][$keys][$key]['data']['#attributes']['data-multisite-id'] = $keys.'-'.$key;
	  }
	}
  }

  $form[$SipwiseEntity->table]['table']['add']['op']['data'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#name' => 'add-'. $SipwiseEntity->table,
    '#ajax' => array(
      'callback' => 'hpbx_'. $SipwiseEntity->table .'_callback',
      'wrapper' => 'hpbx-'. $SipwiseEntity->table .'-table-wrapper'
    ),
    '#limit_validation_errors' => array(),
    '#prefix' => '<span class="submit-button">',
    '#suffix' => '</span>',
    '#attributes' => array('class' => array('sg-btn', 'sg-without-icon', 'sg-btn-primary'), 'style' => 'margin-left:20cm;'),
  );

}

function hpbx_multisite_callback($form, &$form_state) {

  global $ActiveReseller;

  if(count($form_state['input']['general']['multisite']['table']) <= $ActiveReseller->_settings->number_of_sites){
  	return array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_replace("#hpbx-multisite-table-wrapper", render($form['general']['multisite']['table'])),
        array('command' => 'multisite'),
       )
     );
  }else{
    $html  = '<div class="hpbx-notification hpbx-notification-error">
                <div class="hpbx-notification-icon"></div>
                <div class="hpbx-notification-title"></div>
                  <div class="hpbx-notification-message"><ul>
                    <li>' . t('You have exceeded the maximum number of sites ').'('. $ActiveReseller->_settings->number_of_sites. ')' . '</li>
                  </ul></div></div>';
    return array('#type' => 'ajax','#commands' => array(ajax_command_prepend('.container', $html), array('command' => 'multisite'),));
  }
}

function hpbx_multisite_delete_callback($form, &$form_state) {

  return array(
  '#type' => 'ajax',
  '#commands' => array(
    ajax_command_replace("#hpbx-multisite-table-wrapper", render($form['general']['multisite']['table'])),
    array('command' => 'multisite'),
    )
  );
}

